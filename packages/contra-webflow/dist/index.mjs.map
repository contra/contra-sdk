{"version":3,"sources":["../src/runtime.ts"],"names":["ATTR_PREFIX","ATTRS","RuntimeState","programId","updates","state","ContraWebflowRuntime","config","ContraClient","containers","container","error","element","initialFilters","debouncedReload","utils","filterControls","control","filterKey","filterType","eventType","button","action","target","e","response","experts","template","card","expert","expertCard","fieldName","format","value","displayValue","repeatType","maxItems","tag","items","item","itemElement","showWhen","hideWhen","shouldShow","condition","field","operator","expertValue","emptyElement","currentPage","totalCount","pageSize","totalPages","activeFilters","_key","key","name","selector","filters","attr","v","option","type","newFilters","currentArray","event","_target","_button","show","loadingElement","errorElement","eventName","detail","message","args","autoInit","configElement","runtime"],"mappings":"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","file":"index.mjs","sourcesContent":["import { ContraClient, utils } from '@contra/client';\nimport type {\n  ExpertProfile,\n  ExpertFilters,\n  FilterChangeEvent,\n  ExpertLoadEvent,\n  ErrorEvent,\n  ExpertField\n} from '@contra/types';\n\n/**\n * Professional Webflow Runtime for Contra Experts\n * Features: Performance optimization, advanced filtering, error handling, loading states\n */\n\n// Configuration interface\ninterface RuntimeConfig {\n  apiKey: string;\n  debug?: boolean;\n  loadingClass?: string;\n  errorClass?: string;\n  emptyClass?: string;\n  autoReload?: boolean;\n  debounceDelay?: number;\n  maxRetries?: number;\n}\n\n// Attribute constants\nconst ATTR_PREFIX = 'data-contra-';\nconst ATTRS = {\n  // Core attributes\n  program: 'program',\n  template: 'template',\n  loading: 'loading',\n  error: 'error',\n  empty: 'empty',\n  \n  // Field binding\n  field: 'field',\n  format: 'format',\n  \n  // Repeating elements\n  repeat: 'repeat',\n  max: 'max',\n  \n  // Filter controls\n  filter: 'filter',\n  filterType: 'filter-type',\n  \n  // Sorting and pagination\n  sort: 'sort',\n  page: 'page',\n  limit: 'limit',\n  \n  // UI states\n  showWhen: 'show-when',\n  hideWhen: 'hide-when',\n  \n  // Actions\n  action: 'action',\n  target: 'target'\n} as const;\n\n// State management\nclass RuntimeState {\n  private states = new Map<string, {\n    filters: ExpertFilters;\n    experts: ExpertProfile[];\n    loading: boolean;\n    error: Error | null;\n    currentPage: number;\n    totalCount: number;\n  }>();\n\n  getState(programId: string) {\n    if (!this.states.has(programId)) {\n      this.states.set(programId, {\n        filters: {},\n        experts: [],\n        loading: false,\n        error: null,\n        currentPage: 1,\n        totalCount: 0\n      });\n    }\n    return this.states.get(programId)!;\n  }\n\n  updateState(programId: string, updates: Partial<ReturnType<RuntimeState['getState']>>) {\n    const state = this.getState(programId);\n    Object.assign(state, updates);\n    this.states.set(programId, state);\n  }\n}\n\n/**\n * Main Runtime Class\n */\nexport class ContraWebflowRuntime {\n  private client: ContraClient;\n  private config: Required<RuntimeConfig>;\n  private state = new RuntimeState();\n  private debouncedReload: Map<string, () => void> = new Map();\n\n  constructor(config: RuntimeConfig) {\n    this.config = {\n      debug: false,\n      loadingClass: 'loading',\n      errorClass: 'error',\n      emptyClass: 'empty',\n      autoReload: true,\n      debounceDelay: 300,\n      maxRetries: 3,\n      ...config\n    };\n\n    this.client = new ContraClient({\n      apiKey: this.config.apiKey,\n      debug: this.config.debug\n    });\n\n    this.log('Runtime initialized', this.config);\n  }\n\n  /**\n   * Initialize the runtime and find all expert containers\n   */\n  async init(): Promise<void> {\n    this.log('Initializing runtime...');\n\n    try {\n      // Find all expert containers\n      const containers = this.findExpertContainers();\n      this.log(`Found ${containers.length} expert containers`);\n\n      // Initialize each container\n      for (const container of containers) {\n        await this.initContainer(container);\n      }\n\n      this.log('Runtime initialization complete');\n    } catch (error) {\n      this.log('Runtime initialization failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize a single expert container\n   */\n  private async initContainer(container: Element): Promise<void> {\n    const programId = this.getAttr(container, ATTRS.program);\n    if (!programId) {\n      this.log('Container missing program ID', container);\n      return;\n    }\n\n    this.log(`Initializing container for program: ${programId}`);\n\n    try {\n      // Setup container state\n      this.setupContainer(container, programId);\n      \n      // Wire up filter controls\n      this.wireFilterControls(container, programId);\n      \n      // Wire up action buttons\n      this.wireActionButtons(container, programId);\n      \n      // Load initial data\n      await this.loadExperts(container, programId);\n\n    } catch (error) {\n      this.log(`Failed to initialize container for program ${programId}`, error);\n      this.showError(container, error as Error);\n    }\n  }\n\n  /**\n   * Setup container with initial state and classes\n   */\n  private setupContainer(container: Element, programId: string): void {\n    const element = container as HTMLElement;\n    \n    // Add runtime classes\n    element.classList.add('contra-runtime');\n    element.setAttribute('data-program-id', programId);\n    \n    // Parse initial filters from attributes\n    const initialFilters = this.parseFiltersFromElement(container);\n    this.state.updateState(programId, { filters: initialFilters });\n    \n    // Create debounced reload function\n    const debouncedReload = utils.debounce(() => {\n      this.loadExperts(container, programId);\n    }, this.config.debounceDelay);\n    \n    this.debouncedReload.set(programId, debouncedReload);\n    \n    this.log(`Container setup complete for program: ${programId}`, initialFilters);\n  }\n\n  /**\n   * Wire up filter controls to auto-update\n   */\n  private wireFilterControls(container: Element, programId: string): void {\n    const filterControls = this.querySelectorAll(container, `[${ATTR_PREFIX}${ATTRS.filter}]`);\n    \n    this.log(`Found ${filterControls.length} filter controls for program: ${programId}`);\n\n    filterControls.forEach(control => {\n      const filterKey = this.getAttr(control, ATTRS.filter);\n      const filterType = this.getAttr(control, ATTRS.filterType) || 'replace';\n      \n      if (!filterKey) return;\n\n      // Add event listeners based on control type\n      if (control instanceof HTMLInputElement) {\n        const eventType = control.type === 'range' || control.type === 'number' ? 'input' : 'change';\n        \n        control.addEventListener(eventType, () => {\n          this.updateFilter(programId, filterKey, this.getControlValue(control), filterType);\n          if (this.config.autoReload) {\n            this.debouncedReload.get(programId)?.();\n          }\n        });\n        \n      } else if (control instanceof HTMLSelectElement) {\n        control.addEventListener('change', () => {\n          this.updateFilter(programId, filterKey, this.getControlValue(control), filterType);\n          if (this.config.autoReload) {\n            this.debouncedReload.get(programId)?.();\n          }\n        });\n      }\n      \n      this.log(`Wired filter control: ${filterKey} (${filterType})`, control);\n    });\n  }\n\n  /**\n   * Wire up action buttons (pagination, sorting, etc.)\n   */\n  private wireActionButtons(container: Element, programId: string): void {\n    const actionButtons = this.querySelectorAll(container, `[${ATTR_PREFIX}${ATTRS.action}]`);\n    \n    actionButtons.forEach(button => {\n      const action = this.getAttr(button, ATTRS.action);\n      const target = this.getAttr(button, ATTRS.target);\n      \n      if (!action) return;\n\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.handleAction(programId, action, target, button);\n      });\n    });\n  }\n\n  /**\n   * Load experts for a program\n   */\n  private async loadExperts(container: Element, programId: string): Promise<void> {\n    const state = this.state.getState(programId);\n    \n    this.log(`Loading experts for program: ${programId}`, state.filters);\n\n    try {\n      // Show loading state\n      this.showLoading(container, true);\n      this.state.updateState(programId, { loading: true, error: null });\n\n      // Fetch experts\n      const response = await this.client.listExperts(programId, state.filters);\n      \n      this.log(`Loaded ${response.data.length} experts`, response);\n\n      // Update state\n      this.state.updateState(programId, {\n        experts: response.data,\n        totalCount: response.totalCount,\n        loading: false\n      });\n\n      // Render experts\n      this.renderExperts(container, response.data);\n      \n      // Update UI states\n      this.updateUIStates(container, programId);\n      \n      // Dispatch event\n      this.dispatchEvent(container, 'expertsLoaded', {\n        experts: response.data,\n        totalCount: response.totalCount,\n        filters: state.filters\n      } as ExpertLoadEvent);\n\n    } catch (error) {\n      this.log(`Failed to load experts for program: ${programId}`, error);\n      \n      this.state.updateState(programId, { \n        loading: false, \n        error: error as Error \n      });\n      \n      this.showError(container, error as Error);\n      \n      // Dispatch error event\n      this.dispatchEvent(container, 'expertsError', {\n        error: error as Error,\n        context: `Loading experts for program ${programId}`\n      } as ErrorEvent);\n    } finally {\n      this.showLoading(container, false);\n    }\n  }\n\n  /**\n   * Render experts into the container\n   */\n  private renderExperts(container: Element, experts: ExpertProfile[]): void {\n    const template = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    if (!template) {\n      this.log('No template found in container', container);\n      return;\n    }\n\n    // Clear existing expert cards (keep template)\n    const existingCards = this.querySelectorAll(container, ':scope > *:not([data-contra-template]):not([data-contra-loading]):not([data-contra-error]):not([data-contra-empty])');\n    existingCards.forEach(card => card.remove());\n\n    // Render expert cards\n    experts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert);\n      container.appendChild(expertCard);\n    });\n\n    this.log(`Rendered ${experts.length} expert cards`);\n  }\n\n  /**\n   * Populate expert card from template\n   */\n  private populateExpertCard(template: Element, expert: ExpertProfile): Element {\n    const card = template.cloneNode(true) as Element;\n    \n    // Remove template attribute and show the card\n    card.removeAttribute(`${ATTR_PREFIX}${ATTRS.template}`);\n    (card as HTMLElement).style.display = '';\n\n    // Populate field bindings\n    this.populateFields(card, expert);\n    \n    // Handle repeating elements (projects, social links)\n    this.populateRepeatingElements(card, expert);\n    \n    // Handle conditional display\n    this.handleConditionalDisplay(card, expert);\n\n    return card;\n  }\n\n  /**\n   * Populate data fields in the card\n   */\n  private populateFields(card: Element, expert: ExpertProfile): void {\n    const fieldElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.field}]`);\n    \n    fieldElements.forEach(element => {\n      const fieldName = this.getAttr(element, ATTRS.field) as ExpertField;\n      const format = this.getAttr(element, ATTRS.format);\n      \n      if (!fieldName || !(fieldName in expert)) return;\n\n      const value = expert[fieldName];\n      this.setElementValue(element, value, format);\n    });\n\n    // Handle star ratings\n    const starsElements = this.querySelectorAll(card, '[data-contra-stars]');\n    starsElements.forEach(element => {\n      if (expert.averageReviewScore) {\n        element.innerHTML = utils.renderStars(expert.averageReviewScore);\n      }\n    });\n  }\n\n  /**\n   * Set element value with proper formatting\n   */\n  private setElementValue(element: Element, value: any, format?: string | null): void {\n    if (value == null) return;\n\n    if (element instanceof HTMLImageElement) {\n      element.src = String(value);\n      element.alt = element.alt || 'Image';\n    } else if (element instanceof HTMLAnchorElement) {\n      element.href = String(value);\n      if (!element.textContent?.trim()) {\n        element.textContent = String(value);\n      }\n    } else if (element instanceof HTMLInputElement) {\n      element.value = String(value);\n    } else {\n      // Text content with formatting\n      let displayValue = String(value);\n      \n      if (format) {\n        switch (format) {\n          case 'currency':\n            displayValue = typeof value === 'number' ? `$${value}` : displayValue;\n            break;\n          case 'rate':\n            displayValue = utils.formatRate(typeof value === 'number' ? value : null);\n            break;\n          case 'number':\n            displayValue = typeof value === 'number' ? value.toLocaleString() : displayValue;\n            break;\n          case 'truncate':\n            displayValue = displayValue.length > 100 ? displayValue.substring(0, 97) + '...' : displayValue;\n            break;\n        }\n      }\n      \n      element.textContent = displayValue;\n    }\n  }\n\n  /**\n   * Handle repeating elements (projects, social links)\n   */\n  private populateRepeatingElements(card: Element, expert: ExpertProfile): void {\n    const repeatElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.repeat}]`);\n    \n    repeatElements.forEach(container => {\n      const repeatType = this.getAttr(container, ATTRS.repeat);\n      const maxItems = parseInt(this.getAttr(container, ATTRS.max) || '10');\n      \n      if (repeatType === 'projects' && expert.projects) {\n        this.populateRepeatingContainer(container, expert.projects.slice(0, maxItems));\n      } else if (repeatType === 'socialLinks' && expert.socialLinks) {\n        this.populateRepeatingContainer(container, expert.socialLinks.slice(0, maxItems));\n      } else if (repeatType === 'skillTags' && expert.skillTags) {\n        this.populateRepeatingContainer(container, expert.skillTags.slice(0, maxItems).map((tag: string) => ({ name: tag })));\n      }\n    });\n  }\n\n  /**\n   * Populate a repeating container with items\n   */\n  private populateRepeatingContainer(container: Element, items: any[]): void {\n    const template = container.firstElementChild;\n    if (!template) return;\n\n    // Clear existing items\n    container.innerHTML = '';\n    \n    // Create items from template\n    items.forEach(item => {\n      const itemElement = template.cloneNode(true) as Element;\n      this.populateFields(itemElement, item);\n      container.appendChild(itemElement);\n    });\n    \n    // Hide container if no items\n    if (items.length === 0) {\n      (container as HTMLElement).style.display = 'none';\n    }\n  }\n\n  /**\n   * Handle conditional display based on data\n   */\n  private handleConditionalDisplay(card: Element, expert: ExpertProfile): void {\n    const conditionalElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.showWhen}], [${ATTR_PREFIX}${ATTRS.hideWhen}]`);\n    \n    conditionalElements.forEach(element => {\n      const showWhen = this.getAttr(element, ATTRS.showWhen);\n      const hideWhen = this.getAttr(element, ATTRS.hideWhen);\n      \n      let shouldShow = true;\n      \n      if (showWhen) {\n        shouldShow = this.evaluateCondition(expert, showWhen);\n      }\n      \n      if (hideWhen) {\n        shouldShow = shouldShow && !this.evaluateCondition(expert, hideWhen);\n      }\n      \n      (element as HTMLElement).style.display = shouldShow ? '' : 'none';\n    });\n  }\n\n  /**\n   * Evaluate a condition against expert data\n   */\n  private evaluateCondition(expert: ExpertProfile, condition: string): boolean {\n    // Simple condition evaluation (can be extended)\n    // Format: \"field:value\" or \"field:>value\" or \"field:<value\"\n    const [field, operator, value] = condition.split(':');\n    const expertValue = (expert as any)[field];\n    \n    if (expertValue == null) return false;\n    \n    switch (operator) {\n      case '>':\n        return Number(expertValue) > Number(value);\n      case '<':\n        return Number(expertValue) < Number(value);\n      case '>=':\n        return Number(expertValue) >= Number(value);\n      case '<=':\n        return Number(expertValue) <= Number(value);\n      default:\n        return String(expertValue).toLowerCase() === value.toLowerCase();\n    }\n  }\n\n  /**\n   * Update UI states based on current data\n   */\n  private updateUIStates(container: Element, programId: string): void {\n    const state = this.state.getState(programId);\n    \n    // Show/hide empty state\n    const emptyElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (emptyElement) {\n      (emptyElement as HTMLElement).style.display = state.experts.length === 0 ? '' : 'none';\n    }\n    \n    // Update pagination info\n    const paginationElements = this.querySelectorAll(container, '[data-contra-pagination-info]');\n    paginationElements.forEach(element => {\n      const { currentPage, totalCount } = state;\n      const pageSize = state.filters.limit || 20;\n      const totalPages = Math.ceil(totalCount / pageSize);\n      \n      element.textContent = `Page ${currentPage} of ${totalPages} (${totalCount} total)`;\n    });\n    \n    // Update filter summaries\n    const filterSummaries = this.querySelectorAll(container, '[data-contra-filter-summary]');\n    filterSummaries.forEach(element => {\n      const activeFilters = Object.entries(state.filters)\n        .filter(([_key, value]) => value != null && value !== '')\n        .map(([key, value]) => `${key}: ${value}`)\n        .join(', ');\n      \n      element.textContent = activeFilters || 'No filters applied';\n    });\n  }\n\n  // ... (utility methods continue below)\n\n  /**\n   * Utility Methods\n   */\n  private getAttr(element: Element, name: string): string | null {\n    return element.getAttribute(`${ATTR_PREFIX}${name}`);\n  }\n\n  private querySelector(element: Element, selector: string): Element | null {\n    return element.querySelector(selector);\n  }\n\n  private querySelectorAll(element: Element, selector: string): Element[] {\n    return Array.from(element.querySelectorAll(selector));\n  }\n\n  private findExpertContainers(): Element[] {\n    return Array.from(document.querySelectorAll(`[${ATTR_PREFIX}${ATTRS.program}]`));\n  }\n\n  private parseFiltersFromElement(element: Element): ExpertFilters {\n    const filters: ExpertFilters = {};\n    \n    // Parse filter attributes\n    const filterMap = {\n      'available': 'available',\n      'languages': 'languages', \n      'location': 'location',\n      'min-rate': 'minRate',\n      'max-rate': 'maxRate',\n      'sort': 'sortBy',\n      'limit': 'limit',\n      'offset': 'offset'\n    };\n\n    Object.entries(filterMap).forEach(([attr, filterKey]) => {\n      const value = this.getAttr(element, attr);\n      if (value != null) {\n        if (filterKey === 'available') {\n          (filters as any)[filterKey] = value === 'true';\n        } else if (filterKey === 'languages') {\n          (filters as any)[filterKey] = value.split(',').map(v => v.trim());\n        } else if (['minRate', 'maxRate', 'limit', 'offset'].includes(filterKey)) {\n          (filters as any)[filterKey] = parseInt(value);\n        } else {\n          (filters as any)[filterKey] = value;\n        }\n      }\n    });\n\n    return filters;\n  }\n\n  private getControlValue(control: HTMLInputElement | HTMLSelectElement): any {\n    if (control instanceof HTMLInputElement) {\n      switch (control.type) {\n        case 'checkbox':\n          return control.checked;\n        case 'number':\n        case 'range':\n          return control.valueAsNumber;\n        default:\n          return control.value;\n      }\n    } else if (control instanceof HTMLSelectElement) {\n      if (control.multiple) {\n        return Array.from(control.selectedOptions).map(option => option.value);\n      }\n      return control.value;\n    }\n    return null;\n  }\n\n  private updateFilter(programId: string, filterKey: string, value: any, type: string = 'replace'): void {\n    const state = this.state.getState(programId);\n    const newFilters = { ...state.filters };\n\n    if (type === 'append' && Array.isArray(newFilters[filterKey as keyof ExpertFilters])) {\n      const currentArray = newFilters[filterKey as keyof ExpertFilters] as any[];\n      newFilters[filterKey as keyof ExpertFilters] = [...currentArray, value] as any;\n    } else {\n      (newFilters as any)[filterKey] = value;\n    }\n\n    this.state.updateState(programId, { filters: newFilters });\n    \n    // Dispatch filter change event\n    const event: FilterChangeEvent = {\n      filters: newFilters,\n      element: document.querySelector(`[data-program-id=\"${programId}\"]`) as HTMLElement\n    };\n    \n    this.dispatchEvent(document as any, 'filterChange', event);\n  }\n\n  private handleAction(programId: string, action: string, _target?: string | null, _button?: Element): void {\n    const state = this.state.getState(programId);\n    \n    switch (action) {\n      case 'next-page':\n        this.updateFilter(programId, 'offset', (state.filters.offset || 0) + (state.filters.limit || 20));\n        break;\n      case 'prev-page':\n        this.updateFilter(programId, 'offset', Math.max(0, (state.filters.offset || 0) - (state.filters.limit || 20)));\n        break;\n      case 'clear-filters':\n        this.state.updateState(programId, { filters: {} });\n        break;\n      case 'reload':\n        this.client.clearCache(`experts:${programId}`);\n        break;\n    }\n    \n    if (this.config.autoReload) {\n      this.debouncedReload.get(programId)?.();\n    }\n  }\n\n  private showLoading(container: Element, show: boolean): void {\n    const loadingElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n    if (loadingElement) {\n      (loadingElement as HTMLElement).style.display = show ? '' : 'none';\n    }\n    \n    (container as HTMLElement).classList.toggle(this.config.loadingClass, show);\n  }\n\n  private showError(container: Element, error: Error): void {\n    const errorElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.error}]`);\n    if (errorElement) {\n      errorElement.textContent = error.message;\n      (errorElement as HTMLElement).style.display = '';\n    }\n    \n    (container as HTMLElement).classList.add(this.config.errorClass);\n    this.log('Error displayed', error);\n  }\n\n  private dispatchEvent(target: Element | Document, eventName: string, detail: any): void {\n    const event = new CustomEvent(`contra:${eventName}`, { detail });\n    target.dispatchEvent(event);\n  }\n\n  private log(message: string, ...args: any[]): void {\n    if (this.config.debug) {\n      console.log(`[ContraWebflow] ${message}`, ...args);\n    }\n  }\n}\n\n/**\n * Auto-initialize runtime when DOM is ready\n */\nfunction autoInit(): void {\n  const configElement = document.getElementById('contra-config');\n  if (!configElement) {\n    console.warn('[ContraWebflow] No config element found. Runtime not initialized.');\n    return;\n  }\n\n  try {\n    const config = JSON.parse(configElement.textContent || '{}');\n    const runtime = new ContraWebflowRuntime(config);\n    \n    // Expose runtime globally for debugging\n    (window as any).contraRuntime = runtime;\n    \n    runtime.init().catch(error => {\n      console.error('[ContraWebflow] Runtime initialization failed:', error);\n    });\n    \n  } catch (error) {\n    console.error('[ContraWebflow] Failed to parse config:', error);\n  }\n}\n\n// Auto-initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', autoInit);\n} else {\n  autoInit();\n}\n\n// Export runtime class for manual initialization\nexport { ContraWebflowRuntime as default }; "]}
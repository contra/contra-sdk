{"version":3,"sources":["../src/runtime.ts"],"names":["ATTR_PREFIX","ATTRS","RuntimeState","programId","updates","state","pageNumber","experts","oldestPage","loading","ContraWebflowRuntime","config","ContraClient","containers","container","error","element","initialFilters","paginationMode","debouncedReload","utils","mode","isScrolling","handleScroll","scrollPosition","documentHeight","threshold","button","filterControls","control","filterKey","filterType","eventType","action","target","e","isPageNavigation","currentPage","cachedExperts","response","limit","offset","page","totalPages","hasNextPage","hasPreviousPage","template","card","expert","expertCard","fieldName","format","value","displayValue","rating","fullStars","hasHalfStar","emptyStars","starsHtml","i","textElement","url","mediaType","parent","mediaElement","urlLower","isVideo","ext","isCloudinaryVideo","originalElement","video","posterUrl","fallbackImg","img","placeholder","videoUrl","from","to","attr","existingStyle","repeatType","maxItems","tag","items","item","itemElement","showWhen","hideWhen","shouldShow","condition","parts","field","restOfCondition","expertValue","result","numValue","expertStr","valueStr","emptyElement","totalCount","pageSize","activeFilters","_key","key","nextPage","nextOffset","allExperts","prevButtons","nextButtons","loadMoreButtons","btnElement","indicator","newExperts","fragment","name","selector","filters","v","option","type","newFilters","processedValue","currentArray","event","_target","prevOffset","lastPageOffset","show","loadingElement","errorElement","eventName","detail","message","args","autoInit","configElement","runtime"],"mappings":"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","file":"index.mjs","sourcesContent":["import { ContraClient, utils } from '@contra/client';\nimport type {\n  ExpertProfile,\n  ExpertFilters,\n  FilterChangeEvent,\n  ExpertLoadEvent,\n  ErrorEvent,\n  ExpertField\n} from '@contra/types';\n\n/**\n * Webflow Runtime for Contra Experts\n * Features: Performance optimization, filtering, error handling, loading states\n */\n\n// Configuration interface\ninterface RuntimeConfig {\n  apiKey: string;\n  debug?: boolean;\n  loadingClass?: string;\n  errorClass?: string;\n  emptyClass?: string;\n  autoReload?: boolean;\n  debounceDelay?: number;\n  maxRetries?: number;\n  \n  // Pagination Configuration\n  paginationMode?: 'traditional' | 'infinite' | 'hybrid';\n  infiniteScrollThreshold?: number;        // Pixels from bottom to trigger load\n  preloadNextPage?: boolean;              // Preload next page for performance\n  maxCachedPages?: number;                // Max pages to keep in memory\n  smoothScrollBehavior?: 'auto' | 'smooth';\n  loadMoreText?: string;                  // Custom \"Load More\" button text\n  \n  // Video configuration\n  videoAutoplay?: boolean;\n  videoHoverPlay?: boolean;\n  videoMuted?: boolean;\n  videoLoop?: boolean;\n  videoControls?: boolean;\n}\n\n// Attribute constants\nconst ATTR_PREFIX = 'data-contra-';\nconst ATTRS = {\n  // Core attributes\n  program: 'program',\n  template: 'template',\n  loading: 'loading',\n  error: 'error',\n  empty: 'empty',\n  \n  // Field binding\n  field: 'field',\n  format: 'format',\n  \n  // Repeating elements\n  repeat: 'repeat',\n  max: 'max',\n  \n  // Filter controls\n  filter: 'filter',\n  filterType: 'filter-type',\n  \n  // Filter attributes\n  available: 'available',\n  \n  // Sorting and pagination\n  sort: 'sort',\n  page: 'page',\n  limit: 'limit',\n  \n  // Pagination mode and controls\n  paginationMode: 'pagination-mode',\n  infiniteLoading: 'infinite-loading',\n  paginationInfo: 'pagination-info',\n  \n  // UI states\n  showWhen: 'show-when',\n  hideWhen: 'hide-when',\n  \n  // Actions\n  action: 'action',\n  target: 'target'\n} as const;\n\n// State management\nclass RuntimeState {\n  private states = new Map<string, {\n    filters: ExpertFilters;\n    experts: ExpertProfile[];\n    loading: boolean;\n    error: Error | null;\n    currentPage: number;\n    totalCount: number;\n    // Advanced pagination state\n    cachedPages: Map<number, ExpertProfile[]>;\n    loadingPages: Set<number>;\n    hasNextPage: boolean;\n    hasPreviousPage: boolean;\n    isInfiniteLoading: boolean;\n    lastScrollPosition: number;\n    paginationMode: 'traditional' | 'infinite' | 'hybrid';\n  }>();\n\n  getState(programId: string) {\n    if (!this.states.has(programId)) {\n      this.states.set(programId, {\n        filters: {},\n        experts: [],\n        loading: false,\n        error: null,\n        currentPage: 1,\n        totalCount: 0,\n        // Advanced pagination defaults\n        cachedPages: new Map(),\n        loadingPages: new Set(),\n        hasNextPage: false,\n        hasPreviousPage: false,\n        isInfiniteLoading: false,\n        lastScrollPosition: 0,\n        paginationMode: 'traditional'\n      });\n    }\n    return this.states.get(programId)!;\n  }\n\n  updateState(programId: string, updates: Partial<ReturnType<RuntimeState['getState']>>) {\n    const state = this.getState(programId);\n    Object.assign(state, updates);\n    this.states.set(programId, state);\n  }\n\n  // Advanced pagination helpers\n  cachePage(programId: string, pageNumber: number, experts: ExpertProfile[]) {\n    const state = this.getState(programId);\n    state.cachedPages.set(pageNumber, experts);\n    \n    // Implement LRU cache cleanup\n    if (state.cachedPages.size > 5) { // maxCachedPages from config\n      const oldestPage = Math.min(...state.cachedPages.keys());\n      state.cachedPages.delete(oldestPage);\n    }\n  }\n\n  getCachedPage(programId: string, pageNumber: number): ExpertProfile[] | null {\n    const state = this.getState(programId);\n    return state.cachedPages.get(pageNumber) || null;\n  }\n\n  setPageLoading(programId: string, pageNumber: number, loading: boolean) {\n    const state = this.getState(programId);\n    if (loading) {\n      state.loadingPages.add(pageNumber);\n    } else {\n      state.loadingPages.delete(pageNumber);\n    }\n  }\n\n  isPageLoading(programId: string, pageNumber: number): boolean {\n    const state = this.getState(programId);\n    return state.loadingPages.has(pageNumber);\n  }\n}\n\n/**\n * Main Runtime Class\n */\nexport class ContraWebflowRuntime {\n  private client: ContraClient;\n  private config: Required<RuntimeConfig>;\n  private state = new RuntimeState();\n  private debouncedReload: Map<string, () => void> = new Map();\n\n  constructor(config: RuntimeConfig) {\n    this.config = {\n      debug: false,\n      loadingClass: 'loading',\n      errorClass: 'error',\n      emptyClass: 'empty',\n      autoReload: true,\n      debounceDelay: 300,\n      maxRetries: 3,\n      // Pagination Configuration defaults\n      paginationMode: 'traditional',\n      infiniteScrollThreshold: 500,\n      preloadNextPage: true,\n      maxCachedPages: 5,\n      smoothScrollBehavior: 'auto',\n      loadMoreText: 'Load More',\n      // Video configuration defaults\n      videoAutoplay: false,      // No autoplay by default (better UX)\n      videoHoverPlay: true,       // Hover to play by default\n      videoMuted: true,           // Muted for autoplay compatibility\n      videoLoop: true,            // Loop videos\n      videoControls: false,       // No controls for cleaner look\n      ...config\n    };\n\n    this.client = new ContraClient({\n      apiKey: this.config.apiKey,\n      debug: this.config.debug\n    });\n\n    this.log('Runtime initialized', this.config);\n  }\n\n  /**\n   * Initialize the runtime and find all expert containers\n   */\n  async init(): Promise<void> {\n    this.log('Initializing runtime...');\n\n    try {\n      // Find all expert containers\n      const containers = this.findExpertContainers();\n      this.log(`Found ${containers.length} expert containers`);\n\n      // Initialize each container\n      for (const container of containers) {\n        await this.initContainer(container);\n      }\n\n      this.log('Runtime initialization complete');\n    } catch (error) {\n      this.log('Runtime initialization failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize a single expert container\n   */\n  private async initContainer(container: Element): Promise<void> {\n    const programId = this.getAttr(container, ATTRS.program);\n    if (!programId) {\n      this.log('Container missing program ID', container);\n      return;\n    }\n\n    this.log(`Initializing container for program: ${programId}`);\n\n    try {\n      // Setup container state\n      this.setupContainer(container, programId);\n      \n      // Wire up filter controls\n      this.wireFilterControls(container, programId);\n      \n      // Wire up action buttons\n      this.wireActionButtons(container, programId);\n      \n      // Load initial data\n      await this.loadExperts(container, programId);\n\n    } catch (error) {\n      this.log(`Failed to initialize container for program ${programId}`, error);\n      this.showError(container, error as Error);\n    }\n  }\n\n  /**\n   * Setup container with initial state and classes\n   */\n  private setupContainer(container: Element, programId: string): void {\n    const element = container as HTMLElement;\n    \n    // Add runtime classes\n    element.classList.add('contra-runtime');\n    element.setAttribute('data-program-id', programId);\n    \n    // Parse initial filters from attributes\n    const initialFilters = this.parseFiltersFromElement(container);\n    \n    // Determine pagination mode\n    const paginationMode = this.determinePaginationMode(container);\n    \n    this.state.updateState(programId, { \n      filters: initialFilters,\n      paginationMode: paginationMode\n    });\n    \n    // Setup pagination\n    this.setupPagination(container, programId, paginationMode);\n    \n    // Create debounced reload function\n    const debouncedReload = utils.debounce(() => {\n      this.loadExperts(container, programId);\n    }, this.config.debounceDelay);\n    \n    this.debouncedReload.set(programId, debouncedReload);\n    \n    this.log(`Container setup complete for program: ${programId}`, { initialFilters, paginationMode });\n  }\n\n  /**\n   * Determine pagination mode from container attributes or config\n   */\n  private determinePaginationMode(container: Element): 'traditional' | 'infinite' | 'hybrid' {\n    const explicitMode = this.getAttr(container, 'pagination-mode') as 'traditional' | 'infinite' | 'hybrid';\n    return explicitMode || this.config.paginationMode;\n  }\n\n  /**\n   * Setup pagination system based on mode\n   */\n  private setupPagination(container: Element, programId: string, mode: 'traditional' | 'infinite' | 'hybrid'): void {\n    this.log(`Setting up ${mode} pagination for program: ${programId}`);\n    \n    if (mode === 'infinite' || mode === 'hybrid') {\n      this.setupInfiniteScroll(container, programId);\n    }\n    \n    if (mode === 'traditional' || mode === 'hybrid') {\n      this.setupTraditionalPagination(container, programId);\n    }\n    \n    // Setup load more button for hybrid/infinite modes\n    if (mode === 'infinite' || mode === 'hybrid') {\n      this.setupLoadMoreButton(container, programId);\n    }\n  }\n\n  /**\n   * Setup infinite scroll functionality\n   */\n  private setupInfiniteScroll(container: Element, programId: string): void {\n    let isScrolling = false;\n    \n    const handleScroll = utils.throttle(() => {\n      if (isScrolling) return;\n      \n      const state = this.state.getState(programId);\n      if (state.isInfiniteLoading || !state.hasNextPage) return;\n      \n      const scrollPosition = window.scrollY + window.innerHeight;\n      const documentHeight = document.documentElement.scrollHeight;\n      const threshold = this.config.infiniteScrollThreshold;\n      \n      if (scrollPosition >= documentHeight - threshold) {\n        isScrolling = true;\n        this.loadNextPageInfinite(container, programId).finally(() => {\n          isScrolling = false;\n        });\n      }\n    }, 100);\n    \n    window.addEventListener('scroll', handleScroll);\n    \n    // Store cleanup function\n    (container as any).__infiniteScrollCleanup = () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }\n\n  /**\n   * Setup traditional pagination button states\n   */\n  private setupTraditionalPagination(container: Element, programId: string): void {\n    // Will be handled in updatePaginationControls\n    this.updatePaginationControls(container, programId);\n  }\n\n  /**\n   * Setup load more button for infinite scroll\n   */\n  private setupLoadMoreButton(container: Element, programId: string): void {\n    const loadMoreButtons = this.querySelectorAll(container, '[data-contra-action=\"load-more\"]');\n    \n    loadMoreButtons.forEach(button => {\n      if (!button.textContent?.trim()) {\n        button.textContent = this.config.loadMoreText;\n      }\n    });\n  }\n\n  /**\n   * Wire up filter controls to auto-update\n   */\n  private wireFilterControls(container: Element, programId: string): void {\n    const filterControls = this.querySelectorAll(container, `[${ATTR_PREFIX}${ATTRS.filter}]`);\n    \n    this.log(`Found ${filterControls.length} filter controls for program: ${programId}`);\n\n    filterControls.forEach(control => {\n      const filterKey = this.getAttr(control, ATTRS.filter);\n      const filterType = this.getAttr(control, ATTRS.filterType) || 'replace';\n      \n      if (!filterKey) return;\n\n      // Add event listeners based on control type\n      if (control instanceof HTMLInputElement) {\n        const eventType = control.type === 'range' || control.type === 'number' ? 'input' : 'change';\n        \n        control.addEventListener(eventType, () => {\n          this.updateFilter(programId, filterKey, this.getControlValue(control), filterType);\n          if (this.config.autoReload) {\n            this.debouncedReload.get(programId)?.();\n          }\n        });\n        \n      } else if (control instanceof HTMLSelectElement) {\n        control.addEventListener('change', () => {\n          this.updateFilter(programId, filterKey, this.getControlValue(control), filterType);\n          if (this.config.autoReload) {\n            this.debouncedReload.get(programId)?.();\n          }\n        });\n      }\n      \n      this.log(`Wired filter control: ${filterKey} (${filterType})`, control);\n    });\n  }\n\n  /**\n   * Wire up action buttons (pagination, sorting, etc.)\n   */\n  private wireActionButtons(container: Element, programId: string): void {\n    const actionButtons = this.querySelectorAll(container, `[${ATTR_PREFIX}${ATTRS.action}]`);\n    \n    actionButtons.forEach(button => {\n      const action = this.getAttr(button, ATTRS.action);\n      const target = this.getAttr(button, ATTRS.target);\n      \n      if (!action) return;\n\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.handleAction(programId, action, target, button);\n      });\n    });\n  }\n\n  /**\n   * Load experts for a program\n   */\n  private async loadExperts(container: Element, programId: string, isPageNavigation = false): Promise<void> {\n    const state = this.state.getState(programId);\n    \n    this.log(`Loading experts for program: ${programId}`, state.filters);\n\n    try {\n      // Show loading state\n      this.showLoading(container, true);\n      this.state.updateState(programId, { loading: true, error: null });\n\n      // Check cache first for page navigation\n      const currentPage = Math.floor((state.filters.offset || 0) / (state.filters.limit || 20)) + 1;\n      if (isPageNavigation && state.paginationMode === 'traditional') {\n        const cachedExperts = this.state.getCachedPage(programId, currentPage);\n        if (cachedExperts) {\n          this.log(`Using cached page ${currentPage}`);\n          this.renderExperts(container, cachedExperts);\n          this.state.updateState(programId, { \n            experts: cachedExperts, \n            currentPage: currentPage,\n            loading: false \n          });\n          this.updatePaginationControls(container, programId);\n          this.showLoading(container, false);\n          return;\n        }\n      }\n\n      // Fetch experts\n      const response = await this.client.listExperts(programId, state.filters);\n      \n      this.log(`Loaded ${response.data.length} experts`, response);\n\n      // Calculate pagination state\n      const limit = state.filters.limit || 20;\n      const offset = state.filters.offset || 0;\n      const page = Math.floor(offset / limit) + 1;\n      const totalPages = Math.ceil(response.totalCount / limit);\n      const hasNextPage = page < totalPages;\n      const hasPreviousPage = page > 1;\n\n      // Update state with pagination info\n      this.state.updateState(programId, {\n        experts: response.data,\n        totalCount: response.totalCount,\n        currentPage: page,\n        hasNextPage: hasNextPage,\n        hasPreviousPage: hasPreviousPage,\n        loading: false\n      });\n\n      // Cache the page\n      this.state.cachePage(programId, page, response.data);\n\n      // Render experts\n      this.renderExperts(container, response.data);\n      \n      // Update UI states including pagination\n      this.updateUIStates(container, programId);\n      this.updatePaginationControls(container, programId);\n      \n      // Dispatch event\n      this.dispatchEvent(container, 'expertsLoaded', {\n        experts: response.data,\n        totalCount: response.totalCount,\n        filters: state.filters,\n        page: page,\n        totalPages: totalPages,\n        hasNextPage: hasNextPage,\n        hasPreviousPage: hasPreviousPage\n      } as ExpertLoadEvent);\n\n    } catch (error) {\n      this.log(`Failed to load experts for program: ${programId}`, error);\n      \n      this.state.updateState(programId, { \n        loading: false, \n        error: error as Error \n      });\n      \n      this.showError(container, error as Error);\n      \n      // Dispatch error event\n      this.dispatchEvent(container, 'expertsError', {\n        error: error as Error,\n        context: `Loading experts for program ${programId}`\n      } as ErrorEvent);\n    } finally {\n      this.showLoading(container, false);\n    }\n  }\n\n  /**\n   * Render experts into the container\n   */\n  private renderExperts(container: Element, experts: ExpertProfile[]): void {\n    const template = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    if (!template) {\n      this.log('No template found in container', container);\n      return;\n    }\n\n    // Clear existing expert cards (keep template)\n    const existingCards = this.querySelectorAll(container, ':scope > *:not([data-contra-template]):not([data-contra-loading]):not([data-contra-error]):not([data-contra-empty])');\n    existingCards.forEach(card => card.remove());\n\n    // Render expert cards\n    experts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert);\n      container.appendChild(expertCard);\n    });\n\n    this.log(`Rendered ${experts.length} expert cards`);\n  }\n\n  /**\n   * Populate expert card from template\n   */\n  private populateExpertCard(template: Element, expert: ExpertProfile): Element {\n    const card = template.cloneNode(true) as Element;\n    \n    // Remove template attribute and show the card\n    card.removeAttribute(`${ATTR_PREFIX}${ATTRS.template}`);\n    (card as HTMLElement).style.display = '';\n\n    // Populate field bindings\n    this.populateFields(card, expert);\n    \n    // Handle repeating elements (projects, social links)\n    this.populateRepeatingElements(card, expert);\n    \n    // Handle conditional display\n    this.handleConditionalDisplay(card, expert);\n\n    return card;\n  }\n\n  /**\n   * Populate data fields in the card\n   */\n  private populateFields(card: Element, expert: ExpertProfile): void {\n    const fieldElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.field}]`);\n    \n    fieldElements.forEach(element => {\n      const fieldName = this.getAttr(element, ATTRS.field) as ExpertField;\n      const format = this.getAttr(element, ATTRS.format);\n      \n      if (!fieldName || !(fieldName in expert)) return;\n\n      const value = expert[fieldName];\n      this.setElementValue(element, value, format);\n    });\n\n    // Handle star ratings\n    const starsElements = this.querySelectorAll(card, '[data-contra-stars]');\n    starsElements.forEach(element => {\n      if (expert.averageReviewScore) {\n        this.renderStarRating(element, expert.averageReviewScore);\n      }\n    });\n  }\n\n  /**\n   * Set element value with proper formatting\n   */\n  private setElementValue(element: Element, value: any, format?: string | null): void {\n    if (value == null || value === '') return;\n\n    // Media type detection and handling\n    if (this.isMediaField(element) && typeof value === 'string' && value.trim()) {\n      this.setMediaValue(element, value);\n      return;\n    }\n\n    if (element instanceof HTMLAnchorElement) {\n      element.href = String(value);\n      if (!element.textContent?.trim()) {\n        element.textContent = String(value);\n      }\n    } else if (element instanceof HTMLInputElement) {\n      element.value = String(value);\n    } else if (element instanceof HTMLImageElement) {\n      // Regular image handling for avatars and other images\n      element.src = String(value);\n      element.alt = element.alt || 'Image';\n    } else {\n      // Text content with formatting\n      let displayValue = String(value);\n      \n      if (format) {\n        switch (format) {\n          case 'currency':\n            displayValue = typeof value === 'number' ? `$${value}` : displayValue;\n            break;\n          case 'rate':\n            displayValue = utils.formatRate(typeof value === 'number' ? value : null);\n            break;\n          case 'rating':\n            // Format rating to one decimal place (5.0, 4.9, etc.)\n            displayValue = typeof value === 'number' ? value.toFixed(1) : displayValue;\n            break;\n          case 'earnings':\n            // Format earnings like $25k+\n            if (typeof value === 'number') {\n              if (value >= 1000000) {\n                displayValue = `$${Math.floor(value / 1000000)}M+`;\n              } else if (value >= 1000) {\n                displayValue = `$${Math.floor(value / 1000)}k+`;\n              } else {\n                displayValue = `$${value}`;\n              }\n            }\n            break;\n          case 'number':\n            displayValue = typeof value === 'number' ? value.toLocaleString() : displayValue;\n            break;\n          case 'truncate':\n            displayValue = displayValue.length > 100 ? displayValue.substring(0, 97) + '...' : displayValue;\n            break;\n          case 'boolean':\n            displayValue = value ? 'Yes' : 'No';\n            break;\n          case 'availability':\n            displayValue = value ? 'Available' : 'Not Available';\n            break;\n        }\n      }\n      \n      element.textContent = displayValue;\n    }\n  }\n\n  /**\n   * Star rating rendering with optional text display\n   */\n  private renderStarRating(element: Element, rating: number): void {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    let starsHtml = '';\n    \n    // Full stars\n    for (let i = 0; i < fullStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-full\">★</span>';\n    }\n    \n    // Half star\n    if (hasHalfStar) {\n      starsHtml += '<span class=\"contra-star contra-star-half\">★</span>';\n    }\n    \n    // Empty stars\n    for (let i = 0; i < emptyStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-empty\">☆</span>';\n    }\n    \n    element.innerHTML = starsHtml;\n    \n    // Also update any rating text elements in the same card\n    const card = element.closest('[data-contra-template]') || element.closest('.expert-card');\n    if (card) {\n      const ratingTextElements = this.querySelectorAll(card, '[data-contra-rating-text]');\n      ratingTextElements.forEach(textElement => {\n        textElement.textContent = rating.toFixed(1);\n      });\n    }\n  }\n\n  /**\n   * Media type detection and element handling\n   */\n  private isMediaField(element: Element): boolean {\n    const field = this.getAttr(element, ATTRS.field);\n    // Only apply advanced media handling to project cover URLs, not avatars\n    return field === 'coverUrl';\n  }\n\n  /**\n   * Media value setting with automatic type detection\n   */\n  private setMediaValue(element: Element, url: string): void {\n    const mediaType = this.detectMediaType(url);\n    const parent = element.parentElement;\n    \n    if (!parent) {\n      this.log('Media element has no parent for replacement', element);\n      return;\n    }\n\n    // Remove existing media element\n    element.remove();\n\n    // Create appropriate media element\n    let mediaElement: HTMLElement;\n    \n    switch (mediaType) {\n      case 'video':\n        mediaElement = this.createVideoElement(url, element);\n        break;\n      case 'image':\n      default:\n        mediaElement = this.createImageElement(url, element);\n        break;\n    }\n\n    // Preserve classes and attributes from original element\n    this.transferAttributes(element, mediaElement);\n    \n    // Insert new media element\n    parent.appendChild(mediaElement);\n    \n    this.log(`Created ${mediaType} element for URL: ${url}`);\n  }\n\n  /**\n   * Detect media type from URL\n   */\n  private detectMediaType(url: string): 'image' | 'video' {\n    if (!url || typeof url !== 'string') {\n      this.log('Invalid URL provided to detectMediaType:', url);\n      return 'image';\n    }\n    \n    const urlLower = url.toLowerCase();\n    \n    // Video formats\n    const videoExtensions = ['.mp4', '.webm', '.mov', '.avi', '.mkv', '.ogg'];\n    const isVideo = videoExtensions.some(ext => urlLower.includes(ext));\n    \n    // Special handling for Cloudinary video URLs\n    const isCloudinaryVideo = urlLower.includes('cloudinary.com/') && urlLower.includes('/video/');\n    \n    return (isVideo || isCloudinaryVideo) ? 'video' : 'image';\n  }\n\n  /**\n   * Create video element with fallback\n   */\n  private createVideoElement(url: string, originalElement: Element): HTMLVideoElement {\n    const video = document.createElement('video');\n    \n    // Video attributes\n    video.src = url;\n    video.muted = this.config.videoMuted;\n    video.loop = this.config.videoLoop;\n    video.playsInline = true;\n    video.preload = 'metadata';\n    video.controls = this.config.videoControls;\n    \n    // Maintain aspect ratio and object-fit from original\n    video.style.width = '100%';\n    video.style.height = '100%';\n    video.style.objectFit = 'cover';\n    video.style.borderRadius = 'inherit';\n    \n    // Autoplay configuration\n    if (this.config.videoAutoplay) {\n      video.autoplay = true;\n      video.setAttribute('autoplay', '');\n    }\n    \n    // Error handling with fallback to poster or placeholder\n    video.onerror = () => {\n      this.log(`Video failed to load: ${url}`);\n      // Try to extract a thumbnail from Cloudinary video URL\n      const posterUrl = this.extractVideoThumbnail(url);\n      if (posterUrl) {\n        const fallbackImg = this.createImageElement(posterUrl, originalElement);\n        video.parentElement?.replaceChild(fallbackImg, video);\n      } else {\n        // Show placeholder\n        video.style.background = '#f3f4f6';\n        video.style.position = 'relative';\n        video.innerHTML = '<div style=\"position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);color:#9ca3af;font-size:12px;\">Video unavailable</div>';\n      }\n    };\n\n    // Hover-to-play functionality (if enabled and not autoplay)\n    if (this.config.videoHoverPlay && !this.config.videoAutoplay) {\n      video.addEventListener('mouseenter', () => {\n        video.currentTime = 0;\n        video.play().catch(() => {\n          // Ignore play errors (browser policies)\n        });\n      });\n\n      video.addEventListener('mouseleave', () => {\n        video.pause();\n        video.currentTime = 0;\n      });\n    }\n\n    return video;\n  }\n\n  /**\n   * Create image element with error handling\n   */\n  private createImageElement(url: string, originalElement: Element): HTMLImageElement {\n    const img = document.createElement('img');\n    \n    img.src = url;\n    img.alt = originalElement.getAttribute('alt') || 'Media content';\n    img.loading = 'lazy';\n    \n    // Maintain styling\n    img.style.width = '100%';\n    img.style.height = '100%';\n    img.style.objectFit = 'cover';\n    img.style.borderRadius = 'inherit';\n    \n    // Error handling\n    img.onerror = () => {\n      this.log(`Image failed to load: ${url}`);\n      img.style.background = '#f3f4f6';\n      img.style.opacity = '0.5';\n      img.alt = 'Image unavailable';\n      \n      // Add broken image icon\n      img.style.position = 'relative';\n      const placeholder = document.createElement('div');\n      placeholder.style.cssText = `\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        color: #9ca3af;\n        font-size: 12px;\n        text-align: center;\n      `;\n      placeholder.textContent = '🖼️ Image unavailable';\n      img.parentElement?.appendChild(placeholder);\n    };\n\n    return img;\n  }\n\n  /**\n   * Extract video thumbnail from Cloudinary URL\n   */\n  private extractVideoThumbnail(videoUrl: string): string | null {\n    if (videoUrl.includes('cloudinary.com/') && videoUrl.includes('/video/')) {\n      // Convert video URL to image thumbnail\n      return videoUrl\n        .replace('/video/', '/image/')\n        .replace(/\\.(mp4|webm|mov|avi|mkv)$/i, '.jpg')\n        .replace('fl_progressive', 'f_auto,q_auto,c_fill');\n    }\n    return null;\n  }\n\n  /**\n   * Transfer attributes and classes from old element to new\n   */\n  private transferAttributes(from: Element, to: HTMLElement): void {\n    // Transfer classes\n    if (from.className) {\n      to.className = from.className;\n    }\n    \n    // Transfer data attributes (except contra-field)\n    Array.from(from.attributes).forEach(attr => {\n      if (attr.name.startsWith('data-') && attr.name !== `${ATTR_PREFIX}${ATTRS.field}`) {\n        to.setAttribute(attr.name, attr.value);\n      }\n    });\n    \n    // Transfer style\n    if (from.getAttribute('style')) {\n      const existingStyle = to.getAttribute('style') || '';\n      to.setAttribute('style', existingStyle + '; ' + from.getAttribute('style'));\n    }\n  }\n\n  /**\n   * Handle repeating elements (projects, social links)\n   */\n  private populateRepeatingElements(card: Element, expert: ExpertProfile): void {\n    const repeatElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.repeat}]`);\n    \n    repeatElements.forEach(container => {\n      const repeatType = this.getAttr(container, ATTRS.repeat);\n      const maxItems = parseInt(this.getAttr(container, ATTRS.max) || '10');\n      \n      if (repeatType === 'projects' && expert.projects) {\n        this.populateRepeatingContainer(container, expert.projects.slice(0, maxItems));\n      } else if (repeatType === 'socialLinks' && expert.socialLinks) {\n        this.populateRepeatingContainer(container, expert.socialLinks.slice(0, maxItems));\n      } else if (repeatType === 'skillTags' && expert.skillTags) {\n        this.populateRepeatingContainer(container, expert.skillTags.slice(0, maxItems).map((tag: string) => ({ name: tag })));\n      }\n    });\n  }\n\n  /**\n   * Populate a repeating container with items\n   */\n  private populateRepeatingContainer(container: Element, items: any[]): void {\n    const template = container.firstElementChild;\n    if (!template) return;\n\n    // Clear existing items\n    container.innerHTML = '';\n    \n    // Create items from template\n    items.forEach(item => {\n      const itemElement = template.cloneNode(true) as Element;\n      this.populateFields(itemElement, item);\n      container.appendChild(itemElement);\n    });\n    \n    // Hide container if no items\n    if (items.length === 0) {\n      (container as HTMLElement).style.display = 'none';\n    }\n  }\n\n  /**\n   * Handle conditional display based on data\n   */\n  private handleConditionalDisplay(card: Element, expert: ExpertProfile): void {\n    const conditionalElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.showWhen}], [${ATTR_PREFIX}${ATTRS.hideWhen}]`);\n    \n    conditionalElements.forEach(element => {\n      const showWhen = this.getAttr(element, ATTRS.showWhen);\n      const hideWhen = this.getAttr(element, ATTRS.hideWhen);\n      \n      let shouldShow = true;\n      \n      if (showWhen) {\n        shouldShow = this.evaluateCondition(expert, showWhen);\n      }\n      \n      if (hideWhen) {\n        shouldShow = shouldShow && !this.evaluateCondition(expert, hideWhen);\n      }\n      \n      (element as HTMLElement).style.display = shouldShow ? '' : 'none';\n    });\n  }\n\n  /**\n   * Evaluate a condition against expert data\n   */\n  private evaluateCondition(expert: ExpertProfile, condition: string): boolean {\n    if (!condition || typeof condition !== 'string') {\n      this.log('Invalid condition provided:', condition);\n      return false;\n    }\n    \n    // Parse condition: \"field:value\" or \"field:>value\" etc.\n    const parts = condition.split(':');\n    if (parts.length < 2) {\n      this.log('Invalid condition format:', condition);\n      return false;\n    }\n    \n    const field = parts[0];\n    const restOfCondition = parts.slice(1).join(':'); // Handle colons in values\n    const expertValue = (expert as any)[field];\n    \n    this.log(`Evaluating condition: ${field} (${expertValue}, type: ${typeof expertValue}) against ${restOfCondition}`);\n    \n    if (expertValue == null) {\n      this.log(`Field '${field}' is null/undefined, condition fails`);\n      return false;\n    }\n    \n    // Check for comparison operators\n    if (restOfCondition.startsWith('>=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) >= Number(value);\n      this.log(`Comparison: ${expertValue} >= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) <= Number(value);\n      this.log(`Comparison: ${expertValue} <= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('>')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) > Number(value);\n      this.log(`Comparison: ${expertValue} > ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) < Number(value);\n      this.log(`Comparison: ${expertValue} < ${value} = ${result}`);\n      return result;\n    } else {\n      // Direct value comparison with type-aware handling\n      let result = false;\n      \n      // Handle boolean fields specially\n      if (typeof expertValue === 'boolean') {\n        // Convert string condition to boolean for comparison\n        if (restOfCondition.toLowerCase() === 'true') {\n          result = expertValue === true;\n        } else if (restOfCondition.toLowerCase() === 'false') {\n          result = expertValue === false;\n        } else {\n          result = false;\n        }\n        this.log(`Boolean comparison: ${expertValue} === ${restOfCondition.toLowerCase() === 'true'} = ${result}`);\n      } else if (typeof expertValue === 'number') {\n        // Handle numeric comparisons\n        const numValue = Number(restOfCondition);\n        result = !isNaN(numValue) && expertValue === numValue;\n        this.log(`Number comparison: ${expertValue} === ${numValue} = ${result}`);\n      } else {\n        // String comparison (case-insensitive)\n        const expertStr = String(expertValue);\n        const valueStr = String(restOfCondition);\n        result = expertStr.toLowerCase() === valueStr.toLowerCase();\n        this.log(`String comparison: '${expertStr}' === '${valueStr}' = ${result}`);\n      }\n      \n      return result;\n    }\n  }\n\n  /**\n   * Update UI states based on current data\n   */\n  private updateUIStates(container: Element, programId: string): void {\n    const state = this.state.getState(programId);\n    \n    // Show/hide empty state\n    const emptyElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (emptyElement) {\n      (emptyElement as HTMLElement).style.display = state.experts.length === 0 ? '' : 'none';\n    }\n    \n    // Update pagination info\n    const paginationElements = this.querySelectorAll(container, '[data-contra-pagination-info]');\n    paginationElements.forEach(element => {\n      const { currentPage, totalCount } = state;\n      const pageSize = state.filters.limit || 20;\n      const totalPages = Math.ceil(totalCount / pageSize);\n      \n      element.textContent = `Page ${currentPage} of ${totalPages} (${totalCount} total)`;\n    });\n    \n    // Update filter summaries\n    const filterSummaries = this.querySelectorAll(container, '[data-contra-filter-summary]');\n    filterSummaries.forEach(element => {\n      const activeFilters = Object.entries(state.filters)\n        .filter(([_key, value]) => value != null && value !== '')\n        .map(([key, value]) => `${key}: ${value}`)\n        .join(', ');\n      \n      element.textContent = activeFilters || 'No filters applied';\n    });\n  }\n\n  /**\n   * Load next page for infinite scroll\n   */\n  private async loadNextPageInfinite(container: Element, programId: string): Promise<void> {\n    const state = this.state.getState(programId);\n    const nextPage = state.currentPage + 1;\n    const limit = state.filters.limit || 20;\n    const nextOffset = (nextPage - 1) * limit;\n\n    this.log(`Loading next page ${nextPage} for infinite scroll`);\n\n    try {\n      this.state.updateState(programId, { isInfiniteLoading: true });\n      this.updateInfiniteLoadingState(container, true);\n\n      const response = await this.client.listExperts(programId, {\n        ...state.filters,\n        offset: nextOffset,\n        limit: limit\n      });\n\n      // Append new experts to existing ones\n      const allExperts = [...state.experts, ...response.data];\n      \n      this.state.updateState(programId, {\n        experts: allExperts,\n        currentPage: nextPage,\n        totalCount: response.totalCount,\n        hasNextPage: allExperts.length < response.totalCount,\n        isInfiniteLoading: false\n      });\n\n      // Cache the new page\n      this.state.cachePage(programId, nextPage, response.data);\n\n      // Render only the new experts\n      this.renderNewExperts(container, response.data);\n      \n      // Update pagination controls\n      this.updatePaginationControls(container, programId);\n\n      // Dispatch event\n      this.dispatchEvent(container, 'expertsLoaded', {\n        experts: response.data,\n        totalExperts: allExperts,\n        totalCount: response.totalCount,\n        page: nextPage,\n        isInfiniteLoad: true\n      });\n\n    } catch (error) {\n      this.log(`Failed to load next page for infinite scroll`, error);\n      this.state.updateState(programId, { isInfiniteLoading: false });\n      // Don't show full error state for infinite scroll failures\n    } finally {\n      this.updateInfiniteLoadingState(container, false);\n    }\n  }\n\n  /**\n   * Update pagination control states\n   */\n  private updatePaginationControls(container: Element, programId: string): void {\n    const state = this.state.getState(programId);\n    const limit = state.filters.limit || 20;\n    const totalPages = Math.ceil(state.totalCount / limit);\n    \n    // Update button states\n    const prevButtons = this.querySelectorAll(container, '[data-contra-action=\"prev-page\"]');\n    const nextButtons = this.querySelectorAll(container, '[data-contra-action=\"next-page\"]');\n    const loadMoreButtons = this.querySelectorAll(container, '[data-contra-action=\"load-more\"]');\n\n    // Previous page buttons\n    prevButtons.forEach(button => {\n      const btnElement = button as HTMLButtonElement;\n      btnElement.disabled = state.currentPage <= 1;\n      btnElement.classList.toggle('disabled', state.currentPage <= 1);\n    });\n\n    // Next page buttons\n    nextButtons.forEach(button => {\n      const btnElement = button as HTMLButtonElement;\n      btnElement.disabled = state.currentPage >= totalPages;\n      btnElement.classList.toggle('disabled', state.currentPage >= totalPages);\n    });\n\n    // Load more buttons (for infinite/hybrid modes)\n    loadMoreButtons.forEach(button => {\n      const btnElement = button as HTMLButtonElement;\n      const hasNextPage = state.experts.length < state.totalCount;\n      btnElement.disabled = !hasNextPage || state.isInfiniteLoading;\n      btnElement.classList.toggle('disabled', !hasNextPage);\n      \n      if (state.isInfiniteLoading) {\n        btnElement.textContent = 'Loading...';\n      } else if (!hasNextPage) {\n        btnElement.textContent = 'All experts loaded';\n      } else {\n        btnElement.textContent = this.config.loadMoreText;\n      }\n    });\n\n    this.log(`Pagination controls updated: page ${state.currentPage}/${totalPages}, hasNext: ${state.hasNextPage}`);\n  }\n\n  /**\n   * Update infinite loading state\n   */\n  private updateInfiniteLoadingState(container: Element, loading: boolean): void {\n    const loadingIndicators = this.querySelectorAll(container, '[data-contra-infinite-loading]');\n    \n    loadingIndicators.forEach(indicator => {\n      (indicator as HTMLElement).style.display = loading ? '' : 'none';\n    });\n  }\n\n  /**\n   * Render new experts for infinite scroll (append mode)\n   */\n  private renderNewExperts(container: Element, newExperts: ExpertProfile[]): void {\n    const template = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    if (!template) {\n      this.log('No template found for rendering new experts', container);\n      return;\n    }\n\n    // Create a document fragment for efficient DOM manipulation\n    const fragment = document.createDocumentFragment();\n\n    newExperts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert);\n      fragment.appendChild(expertCard);\n    });\n\n    // Append all new cards at once\n    container.appendChild(fragment);\n\n    this.log(`Rendered ${newExperts.length} new expert cards for infinite scroll`);\n  }\n\n  // ... (utility methods continue below)\n\n  /**\n   * Utility Methods\n   */\n  private getAttr(element: Element, name: string): string | null {\n    return element.getAttribute(`${ATTR_PREFIX}${name}`);\n  }\n\n  private querySelector(element: Element, selector: string): Element | null {\n    return element.querySelector(selector);\n  }\n\n  private querySelectorAll(element: Element, selector: string): Element[] {\n    return Array.from(element.querySelectorAll(selector));\n  }\n\n  private findExpertContainers(): Element[] {\n    return Array.from(document.querySelectorAll(`[${ATTR_PREFIX}${ATTRS.program}]`));\n  }\n\n  private parseFiltersFromElement(element: Element): ExpertFilters {\n    const filters: ExpertFilters = {};\n    \n    // Parse filter attributes\n    const filterMap = {\n      'available': 'available',\n      'languages': 'languages', \n      'location': 'location',\n      'min-rate': 'minRate',\n      'max-rate': 'maxRate',\n      'sort': 'sortBy',\n      'limit': 'limit',\n      'offset': 'offset'\n    };\n\n    Object.entries(filterMap).forEach(([attr, filterKey]) => {\n      const value = this.getAttr(element, attr);\n      if (value != null) {\n        if (filterKey === 'available') {\n          (filters as any)[filterKey] = value === 'true';\n        } else if (filterKey === 'languages') {\n          (filters as any)[filterKey] = value.split(',').map(v => v.trim());\n        } else if (['minRate', 'maxRate', 'limit', 'offset'].includes(filterKey)) {\n          (filters as any)[filterKey] = parseInt(value);\n        } else {\n          (filters as any)[filterKey] = value;\n        }\n      }\n    });\n\n    return filters;\n  }\n\n  private getControlValue(control: HTMLInputElement | HTMLSelectElement): any {\n    if (control instanceof HTMLInputElement) {\n      switch (control.type) {\n        case 'checkbox':\n          return control.checked;\n        case 'number':\n        case 'range':\n          return control.valueAsNumber;\n        default:\n          return control.value;\n      }\n    } else if (control instanceof HTMLSelectElement) {\n      if (control.multiple) {\n        return Array.from(control.selectedOptions).map(option => option.value);\n      }\n      return control.value;\n    }\n    return null;\n  }\n\n  private updateFilter(programId: string, filterKey: string, value: any, type: string = 'replace'): void {\n    const state = this.state.getState(programId);\n    const newFilters = { ...state.filters };\n\n    // Handle special cases for filter value conversion\n    let processedValue = value;\n    \n    if (filterKey === 'available') {\n      // Convert string values to boolean for availability filter\n      if (typeof value === 'string') {\n        if (value === 'true') {\n          processedValue = true;\n        } else if (value === 'false') {\n          processedValue = false;\n        } else if (value === '' || value === null) {\n          processedValue = undefined; // No filter\n        }\n      }\n    } else if (filterKey === 'minRate' || filterKey === 'maxRate') {\n      // Convert empty strings to undefined for rate filters\n      if (value === '' || value === null) {\n        processedValue = undefined;\n      } else {\n        processedValue = Number(value);\n      }\n    }\n\n    if (type === 'append' && Array.isArray(newFilters[filterKey as keyof ExpertFilters])) {\n      const currentArray = newFilters[filterKey as keyof ExpertFilters] as any[];\n      newFilters[filterKey as keyof ExpertFilters] = [...currentArray, processedValue] as any;\n    } else {\n      (newFilters as any)[filterKey] = processedValue;\n    }\n\n    this.state.updateState(programId, { filters: newFilters });\n    \n    this.log(`Filter updated: ${filterKey} = ${processedValue} (original: ${value})`);\n    \n    // Dispatch filter change event\n    const event: FilterChangeEvent = {\n      filters: newFilters,\n      element: document.querySelector(`[data-program-id=\"${programId}\"]`) as HTMLElement\n    };\n    \n    this.dispatchEvent(document as any, 'filterChange', event);\n  }\n\n  private handleAction(programId: string, action: string, _target?: string | null, button?: Element): void {\n    const state = this.state.getState(programId);\n    const container = document.querySelector(`[data-program-id=\"${programId}\"]`);\n    \n    if (!container) {\n      this.log(`Container not found for program: ${programId}`);\n      return;\n    }\n\n    // Show button feedback\n    if (button && button instanceof HTMLButtonElement) {\n      const originalText = button.textContent;\n      button.disabled = true;\n    }\n    \n    switch (action) {\n      case 'next-page':\n        const limit = state.filters.limit || 20;\n        const nextOffset = (state.filters.offset || 0) + limit;\n        \n        if (nextOffset < state.totalCount) {\n          this.updateFilter(programId, 'offset', nextOffset);\n          // Use page navigation mode for caching\n          setTimeout(() => {\n            this.loadExperts(container as Element, programId, true);\n          }, 0);\n        }\n        break;\n        \n      case 'prev-page':\n        const prevOffset = Math.max(0, (state.filters.offset || 0) - (state.filters.limit || 20));\n        this.updateFilter(programId, 'offset', prevOffset);\n        // Use page navigation mode for caching\n        setTimeout(() => {\n          this.loadExperts(container as Element, programId, true);\n        }, 0);\n        break;\n        \n      case 'load-more':\n        if (state.paginationMode === 'infinite' || state.paginationMode === 'hybrid') {\n          this.loadNextPageInfinite(container as Element, programId).finally(() => {\n            if (button && button instanceof HTMLButtonElement) {\n              button.disabled = false;\n            }\n          });\n          return; // Exit early to avoid re-enabling button\n        }\n        break;\n        \n      case 'first-page':\n        this.updateFilter(programId, 'offset', 0);\n        setTimeout(() => {\n          this.loadExperts(container as Element, programId, true);\n        }, 0);\n        break;\n        \n      case 'last-page':\n        const lastPageOffset = Math.max(0, Math.floor((state.totalCount - 1) / (state.filters.limit || 20)) * (state.filters.limit || 20));\n        this.updateFilter(programId, 'offset', lastPageOffset);\n        setTimeout(() => {\n          this.loadExperts(container as Element, programId, true);\n        }, 0);\n        break;\n        \n      case 'clear-filters':\n        // Reset pagination when clearing filters\n        this.state.updateState(programId, { \n          filters: { limit: state.filters.limit }, // Keep limit\n          currentPage: 1,\n          cachedPages: new Map() // Clear cache\n        });\n        if (this.config.autoReload) {\n          this.debouncedReload.get(programId)?.();\n        }\n        break;\n        \n      case 'reload':\n        // Clear cache and reload\n        this.state.updateState(programId, { cachedPages: new Map() });\n        this.client.clearCache(`experts:${programId}`);\n        if (this.config.autoReload) {\n          this.debouncedReload.get(programId)?.();\n        }\n        break;\n    }\n    \n    // Re-enable button after action completes\n    if (button && button instanceof HTMLButtonElement && action !== 'load-more') {\n      setTimeout(() => {\n        button.disabled = false;\n      }, 100);\n    }\n  }\n\n  private showLoading(container: Element, show: boolean): void {\n    const loadingElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n    if (loadingElement) {\n      (loadingElement as HTMLElement).style.display = show ? '' : 'none';\n    }\n    \n    (container as HTMLElement).classList.toggle(this.config.loadingClass, show);\n  }\n\n  private showError(container: Element, error: Error): void {\n    const errorElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.error}]`);\n    if (errorElement) {\n      errorElement.textContent = error.message;\n      (errorElement as HTMLElement).style.display = '';\n    }\n    \n    (container as HTMLElement).classList.add(this.config.errorClass);\n    this.log('Error displayed', error);\n  }\n\n  private dispatchEvent(target: Element | Document, eventName: string, detail: any): void {\n    const event = new CustomEvent(`contra:${eventName}`, { detail });\n    target.dispatchEvent(event);\n  }\n\n  private log(message: string, ...args: any[]): void {\n    if (this.config.debug) {\n      console.log(`[ContraWebflow] ${message}`, ...args);\n    }\n  }\n}\n\n/**\n * Auto-initialize runtime when DOM is ready\n */\nfunction autoInit(): void {\n  const configElement = document.getElementById('contra-config');\n  if (!configElement) {\n    console.warn('[ContraWebflow] No config element found. Runtime not initialized.');\n    return;\n  }\n\n  try {\n    const config = JSON.parse(configElement.textContent || '{}');\n    const runtime = new ContraWebflowRuntime(config);\n    \n    // Expose runtime globally for debugging\n    (window as any).contraRuntime = runtime;\n    \n    runtime.init().catch(error => {\n      console.error('[ContraWebflow] Runtime initialization failed:', error);\n    });\n    \n  } catch (error) {\n    console.error('[ContraWebflow] Failed to parse config:', error);\n  }\n}\n\n// Auto-initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', autoInit);\n} else {\n  autoInit();\n}\n\n// Export runtime class for manual initialization\nexport { ContraWebflowRuntime as default }; "]}
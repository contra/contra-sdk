{"version":3,"sources":["../src/runtime.ts"],"names":["ATTR_PREFIX","ATTRS","RuntimeState","programId","updates","state","pageNumber","experts","oldestPage","loading","ContraWebflowRuntime","config","ContraClient","allContainers","containers","container","error","element","initialFilters","paginationMode","debouncedReload","utils","mode","isScrolling","handleScroll","scrollPosition","documentHeight","threshold","button","filterControls","control","filterKey","filterType","eventType","action","target","e","isPageNavigation","currentPage","cachedExperts","response","limit","offset","page","totalPages","hasNextPage","hasPreviousPage","template","card","expert","expertCard","fieldName","format","value","displayValue","rating","fullStars","hasHalfStar","emptyStars","starsHtml","i","textElement","url","mediaType","parent","mediaElement","urlLower","isVideo","ext","isCloudinaryVideo","originalElement","video","posterUrl","fallbackImg","img","placeholder","videoUrl","from","to","attr","existingStyle","repeatType","maxItems","tag","items","item","itemElement","showWhen","hideWhen","shouldShow","condition","parts","field","restOfCondition","expertValue","result","numValue","expertStr","valueStr","emptyElement","totalCount","pageSize","activeFilters","_key","key","_target","nextOffset","prevOffset","lastPageOffset","currentOffset","allExperts","errorText","loadMoreButtons","btnElement","prevButtons","nextButtons","loadedCount","indicator","newExperts","fragment","name","selector","filters","v","option","type","newFilters","processedValue","currentArray","event","show","loadingElement","errorElement","eventName","detail","message","args","autoInit","configElement","runtime"],"mappings":"gDA4CMA,IAAAA,CAAAA,CAAc,cACdC,CAAAA,CAAAA,CAAQ,CAEZ,OAAA,CAAS,SACT,CAAA,QAAA,CAAU,WACV,OAAS,CAAA,SAAA,CACT,KAAO,CAAA,OAAA,CACP,KAAO,CAAA,OAAA,CAGP,KAAO,CAAA,OAAA,CACP,MAAQ,CAAA,QAAA,CAGR,MAAQ,CAAA,QAAA,CACR,GAAK,CAAA,KAAA,CAGL,OAAQ,QACR,CAAA,UAAA,CAAY,aAGZ,CAaA,QAAU,CAAA,WAAA,CACV,QAAU,CAAA,WAAA,CAGV,MAAQ,CAAA,QAAA,CACR,MAAQ,CAAA,QACV,CAGMC,CAAAA,CAAAA,CAAN,KAAmB,CAAnB,cACE,IAAQ,CAAA,MAAA,CAAS,IAAI,IAAA,CAiBrB,QAASC,CAAAA,CAAAA,CAAmB,CAC1B,OAAK,IAAK,CAAA,MAAA,CAAO,GAAIA,CAAAA,CAAS,CAC5B,EAAA,IAAA,CAAK,OAAO,GAAIA,CAAAA,CAAAA,CAAW,CACzB,OAAA,CAAS,EAAC,CACV,OAAS,CAAA,EACT,CAAA,OAAA,CAAS,KACT,CAAA,KAAA,CAAO,IACP,CAAA,WAAA,CAAa,EACb,UAAY,CAAA,CAAA,CAEZ,WAAa,CAAA,IAAI,GACjB,CAAA,YAAA,CAAc,IAAI,GAAA,CAClB,WAAa,CAAA,KAAA,CACb,eAAiB,CAAA,KAAA,CACjB,iBAAmB,CAAA,KAAA,CACnB,kBAAoB,CAAA,CAAA,CACpB,cAAgB,CAAA,aAClB,CAAC,CAAA,CAEI,IAAK,CAAA,MAAA,CAAO,GAAIA,CAAAA,CAAS,CAClC,CAEA,WAAYA,CAAAA,CAAAA,CAAmBC,CAAwD,CAAA,CACrF,IAAMC,CAAQ,CAAA,IAAA,CAAK,QAASF,CAAAA,CAAS,CACrC,CAAA,MAAA,CAAO,MAAOE,CAAAA,CAAAA,CAAOD,CAAO,CAAA,CAC5B,IAAK,CAAA,MAAA,CAAO,GAAID,CAAAA,CAAAA,CAAWE,CAAK,EAClC,CAGA,SAAUF,CAAAA,CAAAA,CAAmBG,CAAoBC,CAAAA,CAAAA,CAA0B,CACzE,IAAMF,CAAQ,CAAA,IAAA,CAAK,QAASF,CAAAA,CAAS,CAIrC,CAAA,GAHAE,EAAM,WAAY,CAAA,GAAA,CAAIC,CAAYC,CAAAA,CAAO,CAGrCF,CAAAA,CAAAA,CAAM,WAAY,CAAA,IAAA,CAAO,CAAG,CAAA,CAC9B,IAAMG,CAAAA,CAAa,IAAK,CAAA,GAAA,CAAI,GAAGH,CAAM,CAAA,WAAA,CAAY,IAAK,EAAC,CACvDA,CAAAA,CAAAA,CAAM,WAAY,CAAA,MAAA,CAAOG,CAAU,EACrC,CACF,CAEA,aAAcL,CAAAA,CAAAA,CAAmBG,EAA4C,CAE3E,OADc,IAAK,CAAA,QAAA,CAASH,CAAS,CAAA,CACxB,WAAY,CAAA,GAAA,CAAIG,CAAU,CAAA,EAAK,IAC9C,CAEA,cAAeH,CAAAA,CAAAA,CAAmBG,EAAoBG,CAAkB,CAAA,CACtE,IAAMJ,CAAAA,CAAQ,IAAK,CAAA,QAAA,CAASF,CAAS,CAAA,CACjCM,CACFJ,CAAAA,CAAAA,CAAM,YAAa,CAAA,GAAA,CAAIC,CAAU,CAAA,CAEjCD,EAAM,YAAa,CAAA,MAAA,CAAOC,CAAU,EAExC,CAEA,aAAA,CAAcH,CAAmBG,CAAAA,CAAAA,CAA6B,CAE5D,OADc,IAAK,CAAA,QAAA,CAASH,CAAS,CAAA,CACxB,YAAa,CAAA,GAAA,CAAIG,CAAU,CAC1C,CACF,CAAA,CAKaI,CAAN,CAAA,KAA2B,CAMhC,WAAA,CAAYC,CAAuB,CAAA,CAHnC,IAAQ,CAAA,KAAA,CAAQ,IAAIT,CAAAA,CACpB,KAAQ,eAA2C,CAAA,IAAI,GAGrD,CAAA,IAAA,CAAK,MAAS,CAAA,CACZ,KAAO,CAAA,KAAA,CACP,OAAS,CAAA,EAAA,CACT,YAAc,CAAA,SAAA,CACd,UAAY,CAAA,OAAA,CACZ,WAAY,OACZ,CAAA,UAAA,CAAY,IACZ,CAAA,aAAA,CAAe,GACf,CAAA,UAAA,CAAY,CAEZ,CAAA,cAAA,CAAgB,aAChB,CAAA,uBAAA,CAAyB,GACzB,CAAA,eAAA,CAAiB,IACjB,CAAA,cAAA,CAAgB,EAChB,oBAAsB,CAAA,MAAA,CACtB,YAAc,CAAA,WAAA,CAEd,aAAe,CAAA,KAAA,CACf,cAAgB,CAAA,IAAA,CAChB,UAAY,CAAA,IAAA,CACZ,SAAW,CAAA,IAAA,CACX,aAAe,CAAA,KAAA,CACf,GAAGS,CACL,CAAA,CAEA,IAAK,CAAA,MAAA,CAAS,IAAIC,YAAAA,CAAa,CAC7B,MAAA,CAAQ,IAAK,CAAA,MAAA,CAAO,MACpB,CAAA,KAAA,CAAO,IAAK,CAAA,MAAA,CAAO,KACrB,CAAC,CAAA,CAED,IAAK,CAAA,GAAA,CAAI,qBAAuB,CAAA,IAAA,CAAK,MAAM,EAC7C,CAKA,MAAM,IAAsB,EAAA,CAC1B,IAAK,CAAA,GAAA,CAAI,yBAAyB,CAElC,CAAA,GAAI,CAEF,IAAMC,CAAgB,CAAA,IAAA,CAAK,oBAAqB,EAAA,CAE1CC,CAAaD,CAAAA,CAAAA,CAAc,MAAOE,CAAAA,CAAAA,EACtC,CAACA,CAAAA,CAAU,aAAa,yBAAyB,CACnD,CAEA,CAAA,IAAA,CAAK,GAAI,CAAA,CAAA,MAAA,EAASD,CAAW,CAAA,MAAM,CAAqCD,kCAAAA,EAAAA,CAAAA,CAAc,MAAM,CAAA,OAAA,CAAS,CAGrG,CAAA,IAAA,IAAWE,CAAaD,IAAAA,CAAAA,CACtB,MAAM,IAAA,CAAK,aAAcC,CAAAA,CAAS,CAGpC,CAAA,IAAA,CAAK,GAAI,CAAA,iCAAiC,EAC5C,CAAA,MAASC,CAAO,CAAA,CACd,MAAK,IAAA,CAAA,GAAA,CAAI,gCAAiCA,CAAK,CAAA,CACzCA,CACR,CACF,CAKA,MAAc,aAAcD,CAAAA,CAAAA,CAAmC,CAE7D,IAAMZ,CAAY,CAAA,IAAA,CAAK,MAAO,CAAA,OAAA,CAC9B,GAAI,CAACA,CAAAA,CAAW,CACd,IAAA,CAAK,GAAI,CAAA,+BAAA,CAAiCY,CAAS,CAAA,CACnD,MACF,CAEA,IAAK,CAAA,GAAA,CAAI,CAAuCZ,oCAAAA,EAAAA,CAAS,EAAE,CAE3D,CAAA,GAAI,CAEF,IAAA,CAAK,cAAeY,CAAAA,CAAAA,CAAWZ,CAAS,CAAA,CAGxC,IAAK,CAAA,kBAAA,CAAmBY,CAAWZ,CAAAA,CAAS,CAG5C,CAAA,IAAA,CAAK,kBAAkBY,CAAWZ,CAAAA,CAAS,CAG3C,CAAA,MAAM,IAAK,CAAA,WAAA,CAAYY,CAAWZ,CAAAA,CAAS,EAE7C,CAAA,MAASa,CAAO,CAAA,CACd,IAAK,CAAA,GAAA,CAAI,8CAA8Cb,CAAS,CAAA,CAAA,CAAIa,CAAK,CAAA,CACzE,IAAK,CAAA,SAAA,CAAUD,CAAWC,CAAAA,CAAc,EAC1C,CACF,CAKQ,cAAA,CAAeD,CAAoBZ,CAAAA,CAAAA,CAAyB,CAClE,IAAMc,CAAAA,CAAUF,CAGhBE,CAAAA,CAAAA,CAAQ,SAAU,CAAA,GAAA,CAAI,gBAAgB,CAAA,CACtCA,CAAQ,CAAA,YAAA,CAAa,yBAA2B,CAAA,MAAM,CACtDA,CAAAA,CAAAA,CAAQ,aAAa,iBAAmBd,CAAAA,CAAS,CAGjD,CAAA,IAAMe,CAAiB,CAAA,IAAA,CAAK,uBAAwBH,CAAAA,CAAS,CAGvDI,CAAAA,CAAAA,CAAiB,IAAK,CAAA,uBAAA,CAAwBJ,CAAS,CAAA,CAE7D,IAAK,CAAA,KAAA,CAAM,WAAYZ,CAAAA,CAAAA,CAAW,CAChC,OAAA,CAASe,CACT,CAAA,cAAA,CAAgBC,CAClB,CAAC,CAGD,CAAA,IAAA,CAAK,eAAgBJ,CAAAA,CAAAA,CAAWZ,CAAWgB,CAAAA,CAAc,EAGzD,IAAMC,CAAAA,CAAkBC,KAAM,CAAA,QAAA,CAAS,IAAM,CAC3C,IAAK,CAAA,WAAA,CAAYN,CAAWZ,CAAAA,CAAS,EACvC,CAAA,CAAG,IAAK,CAAA,MAAA,CAAO,aAAa,CAE5B,CAAA,IAAA,CAAK,eAAgB,CAAA,GAAA,CAAIA,CAAWiB,CAAAA,CAAe,CAEnD,CAAA,IAAA,CAAK,GAAI,CAAA,CAAA,sCAAA,EAAyCjB,CAAS,CAAA,CAAA,CAAI,CAAE,cAAA,CAAAe,EAAgB,cAAAC,CAAAA,CAAe,CAAC,EACnG,CAKQ,uBAAA,CAAwBJ,CAA2D,CAAA,CAEzF,OADqB,IAAA,CAAK,OAAQA,CAAAA,CAAAA,CAAW,iBAAiB,CAAA,EACvC,KAAK,MAAO,CAAA,cACrC,CAKQ,eAAA,CAAgBA,CAAoBZ,CAAAA,CAAAA,CAAmBmB,CAAmD,CAAA,CAChH,IAAK,CAAA,GAAA,CAAI,CAAcA,WAAAA,EAAAA,CAAI,CAA4BnB,yBAAAA,EAAAA,CAAS,EAAE,CAE9DmB,CAAAA,CAAAA,CAAAA,GAAS,UAAcA,EAAAA,CAAAA,GAAS,QAClC,GAAA,IAAA,CAAK,mBAAoBP,CAAAA,CAAAA,CAAWZ,CAAS,CAAA,CAAA,CAG3CmB,CAAS,GAAA,aAAA,EAAiBA,CAAS,GAAA,QAAA,GACrC,KAAK,0BAA2BP,CAAAA,CAAAA,CAAWZ,CAAS,CAAA,CAAA,CAIlDmB,CAAS,GAAA,UAAA,EAAcA,CAAS,GAAA,QAAA,GAClC,IAAK,CAAA,mBAAA,CAAoBP,CAAWZ,CAAAA,CAAS,EAEjD,CAKQ,oBAAoBY,CAAoBZ,CAAAA,CAAAA,CAAyB,CACvE,IAAIoB,CAAc,CAAA,KAAA,CAEZC,CAAeH,CAAAA,KAAAA,CAAM,QAAS,CAAA,IAAM,CACxC,GAAIE,CAAa,CAAA,OAEjB,IAAMlB,CAAAA,CAAQ,IAAK,CAAA,KAAA,CAAM,QAASF,CAAAA,CAAS,CAC3C,CAAA,GAAIE,CAAM,CAAA,iBAAA,EAAqB,CAACA,CAAAA,CAAM,WAAa,CAAA,OAEnD,IAAMoB,CAAAA,CAAiB,OAAO,OAAU,CAAA,MAAA,CAAO,WACzCC,CAAAA,CAAAA,CAAiB,QAAS,CAAA,eAAA,CAAgB,YAC1CC,CAAAA,CAAAA,CAAY,IAAK,CAAA,MAAA,CAAO,uBAE1BF,CAAAA,CAAAA,EAAkBC,CAAiBC,CAAAA,CAAAA,GACrCJ,EAAc,IACd,CAAA,IAAA,CAAK,oBAAqBR,CAAAA,CAAAA,CAAWZ,CAAS,CAAA,CAAE,OAAQ,CAAA,IAAM,CAC5DoB,CAAAA,CAAc,MAChB,CAAC,CAEL,EAAA,CAAA,CAAG,GAAG,CAEN,CAAA,MAAA,CAAO,gBAAiB,CAAA,QAAA,CAAUC,CAAY,CAAA,CAG7CT,CAAkB,CAAA,uBAAA,CAA0B,IAAM,CACjD,MAAO,CAAA,mBAAA,CAAoB,QAAUS,CAAAA,CAAY,EACnD,EACF,CAKQ,0BAA2BT,CAAAA,CAAAA,CAAoBZ,CAAyB,CAAA,CAE9E,IAAK,CAAA,wBAAA,CAAyBY,CAAWZ,CAAAA,CAAS,EACpD,CAKQ,mBAAoBY,CAAAA,CAAAA,CAAoBZ,EAAyB,CAC/C,IAAA,CAAK,gBAAiBY,CAAAA,CAAAA,CAAW,kCAAkC,CAAA,CAE3E,OAAQa,CAAAA,CAAAA,EAAU,CAC3BA,CAAAA,CAAO,WAAa,EAAA,IAAA,EACvBA,GAAAA,CAAAA,CAAO,YAAc,IAAK,CAAA,MAAA,CAAO,YAErC,EAAA,CAAC,EACH,CAKQ,kBAAmBb,CAAAA,CAAAA,CAAoBZ,CAAyB,CAAA,CACtE,IAAM0B,CAAAA,CAAiB,IAAK,CAAA,gBAAA,CAAiBd,EAAW,CAAIf,CAAAA,EAAAA,CAAW,CAAGC,EAAAA,CAAAA,CAAM,MAAM,CAAA,CAAA,CAAG,CAEzF,CAAA,IAAA,CAAK,GAAI,CAAA,CAAA,MAAA,EAAS4B,CAAe,CAAA,MAAM,CAAiC1B,8BAAAA,EAAAA,CAAS,CAAE,CAAA,CAAA,CAEnF0B,CAAe,CAAA,OAAA,CAAQC,CAAW,EAAA,CAChC,IAAMC,CAAAA,CAAY,IAAK,CAAA,OAAA,CAAQD,CAAS7B,CAAAA,CAAAA,CAAM,MAAM,CAAA,CAC9C+B,CAAa,CAAA,IAAA,CAAK,QAAQF,CAAS7B,CAAAA,CAAAA,CAAM,UAAU,CAAA,EAAK,SAE9D,CAAA,GAAK8B,CAGL,CAAA,CAAA,GAAID,CAAmB,YAAA,gBAAA,CAAkB,CACvC,IAAMG,CAAYH,CAAAA,CAAAA,CAAQ,OAAS,OAAWA,EAAAA,CAAAA,CAAQ,IAAS,GAAA,QAAA,CAAW,OAAU,CAAA,QAAA,CAEpFA,CAAQ,CAAA,gBAAA,CAAiBG,CAAW,CAAA,IAAM,CACxC,IAAA,CAAK,YAAa9B,CAAAA,CAAAA,CAAW4B,EAAW,IAAK,CAAA,eAAA,CAAgBD,CAAO,CAAA,CAAGE,CAAU,CAAA,CAC7E,IAAK,CAAA,MAAA,CAAO,UACd,EAAA,IAAA,CAAK,eAAgB,CAAA,GAAA,CAAI7B,CAAS,CAAA,KAEtC,CAAC,EAEH,CAAW2B,KAAAA,CAAAA,YAAmB,iBAC5BA,EAAAA,CAAAA,CAAQ,gBAAiB,CAAA,QAAA,CAAU,IAAM,CACvC,IAAK,CAAA,YAAA,CAAa3B,CAAW4B,CAAAA,CAAAA,CAAW,KAAK,eAAgBD,CAAAA,CAAO,CAAGE,CAAAA,CAAU,CAC7E,CAAA,IAAA,CAAK,MAAO,CAAA,UAAA,EACd,IAAK,CAAA,eAAA,CAAgB,GAAI7B,CAAAA,CAAS,CAAI,KAE1C,CAAC,CAGH,CAAA,IAAA,CAAK,GAAI,CAAA,CAAA,sBAAA,EAAyB4B,CAAS,CAAA,EAAA,EAAKC,CAAU,CAAA,CAAA,CAAA,CAAKF,CAAO,EAAA,CACxE,CAAC,EACH,CAKQ,iBAAA,CAAkBf,EAAoBZ,CAAyB,CAAA,CAC/C,IAAK,CAAA,gBAAA,CAAiBY,CAAW,CAAA,CAAA,CAAA,EAAIf,CAAW,CAAA,EAAGC,CAAM,CAAA,MAAM,CAAG,CAAA,CAAA,CAAA,CAE1E,OAAQ2B,CAAAA,CAAAA,EAAU,CAC9B,IAAMM,CAAS,CAAA,IAAA,CAAK,OAAQN,CAAAA,CAAAA,CAAQ3B,CAAM,CAAA,MAAM,CAC1CkC,CAAAA,CAAAA,CAAS,IAAK,CAAA,OAAA,CAAQP,CAAQ3B,CAAAA,CAAAA,CAAM,MAAM,CAAA,CAE3CiC,GAELN,CAAO,CAAA,gBAAA,CAAiB,OAAUQ,CAAAA,CAAAA,EAAM,CACtCA,CAAAA,CAAE,cAAe,EAAA,CACjB,IAAK,CAAA,YAAA,CAAajC,CAAW+B,CAAAA,CAAAA,CAAQC,CAAQP,CAAAA,CAAM,EACrD,CAAC,EACH,CAAC,EACH,CAKA,MAAc,WAAYb,CAAAA,CAAAA,CAAoBZ,CAAmBkC,CAAAA,CAAAA,CAAmB,KAAsB,CAAA,CACxG,IAAMhC,CAAAA,CAAQ,KAAK,KAAM,CAAA,QAAA,CAASF,CAAS,CAAA,CAE3C,IAAK,CAAA,GAAA,CAAI,CAAgCA,6BAAAA,EAAAA,CAAS,CAAIE,CAAAA,CAAAA,CAAAA,CAAM,OAAO,CAAA,CAEnE,GAAI,CAEF,IAAK,CAAA,WAAA,CAAYU,CAAW,CAAA,CAAA,CAAI,CAChC,CAAA,IAAA,CAAK,KAAM,CAAA,WAAA,CAAYZ,CAAW,CAAA,CAAE,OAAS,CAAA,CAAA,CAAA,CAAM,KAAO,CAAA,IAAK,CAAC,CAAA,CAGhE,IAAMmC,CAAc,CAAA,IAAA,CAAK,KAAOjC,CAAAA,CAAAA,CAAAA,CAAM,OAAQ,CAAA,MAAA,EAAU,CAAMA,GAAAA,CAAAA,CAAM,OAAQ,CAAA,KAAA,EAAS,EAAG,CAAA,CAAA,CAAI,CAC5F,CAAA,GAAIgC,GAAoBhC,CAAM,CAAA,cAAA,GAAmB,aAAe,CAAA,CAC9D,IAAMkC,CAAAA,CAAgB,IAAK,CAAA,KAAA,CAAM,aAAcpC,CAAAA,CAAAA,CAAWmC,CAAW,CAAA,CACrE,GAAIC,CAAAA,CAAe,CACjB,IAAK,CAAA,GAAA,CAAI,CAAqBD,kBAAAA,EAAAA,CAAW,CAAE,CAAA,CAAA,CAC3C,IAAK,CAAA,aAAA,CAAcvB,CAAWwB,CAAAA,CAAa,CAC3C,CAAA,IAAA,CAAK,KAAM,CAAA,WAAA,CAAYpC,CAAW,CAAA,CAChC,OAASoC,CAAAA,CAAAA,CACT,WAAaD,CAAAA,CAAAA,CACb,OAAS,CAAA,CAAA,CACX,CAAC,CAAA,CACD,IAAK,CAAA,wBAAA,CAAyBvB,CAAWZ,CAAAA,CAAS,CAClD,CAAA,IAAA,CAAK,YAAYY,CAAW,CAAA,CAAA,CAAK,CACjC,CAAA,MACF,CACF,CAGA,IAAMyB,CAAAA,CAAW,MAAM,IAAA,CAAK,MAAO,CAAA,WAAA,CAAYrC,CAAWE,CAAAA,CAAAA,CAAM,OAAO,CAEvE,CAAA,IAAA,CAAK,GAAI,CAAA,CAAA,OAAA,EAAUmC,CAAS,CAAA,IAAA,CAAK,MAAM,CAAA,QAAA,CAAA,CAAYA,CAAQ,CAAA,CAG3D,IAAMC,CAAAA,CAAQpC,CAAM,CAAA,OAAA,CAAQ,OAAS,EAC/BqC,CAAAA,CAAAA,CAASrC,CAAM,CAAA,OAAA,CAAQ,MAAU,EAAA,CAAA,CACjCsC,CAAO,CAAA,IAAA,CAAK,KAAMD,CAAAA,CAAAA,CAASD,CAAK,CAAA,CAAI,CACpCG,CAAAA,CAAAA,CAAa,KAAK,IAAKJ,CAAAA,CAAAA,CAAS,UAAaC,CAAAA,CAAK,CAGlDI,CAAAA,CAAAA,CAAcL,CAAS,CAAA,IAAA,CAAK,MAAWC,GAAAA,CAAAA,CACvCK,CAAkBH,CAAAA,CAAAA,CAAO,CAG/B,CAAA,IAAA,CAAK,MAAM,WAAYxC,CAAAA,CAAAA,CAAW,CAChC,OAAA,CAASqC,CAAS,CAAA,IAAA,CAClB,UAAYA,CAAAA,CAAAA,CAAS,UACrB,CAAA,WAAA,CAAaG,CACb,CAAA,WAAA,CAAaE,CACb,CAAA,eAAA,CAAiBC,EACjB,OAAS,CAAA,CAAA,CACX,CAAC,CAAA,CAGD,IAAK,CAAA,KAAA,CAAM,SAAU3C,CAAAA,CAAAA,CAAWwC,CAAMH,CAAAA,CAAAA,CAAS,IAAI,CAAA,CAGnD,IAAK,CAAA,aAAA,CAAczB,EAAWyB,CAAS,CAAA,IAAI,CAG3C,CAAA,IAAA,CAAK,cAAezB,CAAAA,CAAAA,CAAWZ,CAAS,CAAA,CACxC,IAAK,CAAA,wBAAA,CAAyBY,CAAWZ,CAAAA,CAAS,CAGlD,CAAA,IAAA,CAAK,aAAcY,CAAAA,CAAAA,CAAW,eAAiB,CAAA,CAC7C,OAASyB,CAAAA,CAAAA,CAAS,IAClB,CAAA,UAAA,CAAYA,CAAS,CAAA,UAAA,CACrB,OAASnC,CAAAA,CAAAA,CAAM,OACf,CAAA,IAAA,CAAMsC,CACN,CAAA,UAAA,CAAYC,EACZ,WAAaC,CAAAA,CAAAA,CACb,eAAiBC,CAAAA,CACnB,CAAoB,EAEtB,CAAS9B,MAAAA,CAAAA,CAAO,CACd,IAAA,CAAK,GAAI,CAAA,CAAA,oCAAA,EAAuCb,CAAS,CAAA,CAAA,CAAIa,CAAK,CAElE,CAAA,IAAA,CAAK,KAAM,CAAA,WAAA,CAAYb,CAAW,CAAA,CAChC,OAAS,CAAA,KAAA,CACT,KAAOa,CAAAA,CACT,CAAC,CAAA,CAED,IAAK,CAAA,SAAA,CAAUD,EAAWC,CAAc,CAAA,CAGxC,IAAK,CAAA,aAAA,CAAcD,CAAW,CAAA,cAAA,CAAgB,CAC5C,KAAA,CAAOC,CACP,CAAA,OAAA,CAAS,CAA+Bb,4BAAAA,EAAAA,CAAS,CACnD,CAAA,CAAe,EACjB,CAAE,OAAA,CACA,IAAK,CAAA,WAAA,CAAYY,CAAW,CAAA,KAAK,EACnC,CACF,CAKQ,aAAA,CAAcA,CAAoBR,CAAAA,CAAAA,CAAgC,CACxE,IAAMwC,EAAW,IAAK,CAAA,aAAA,CAAchC,CAAW,CAAA,CAAA,CAAA,EAAIf,CAAW,CAAA,EAAGC,CAAM,CAAA,QAAQ,CAAG,CAAA,CAAA,CAAA,CAClF,GAAI,CAAC8C,CAAU,CAAA,CACb,KAAK,GAAI,CAAA,gCAAA,CAAkChC,CAAS,CAAA,CACpD,MACF,CAGsB,IAAK,CAAA,gBAAA,CAAiBA,CAAW,CAAA,uBAAuB,CAChE,CAAA,OAAA,CAAQiC,CAAQA,EAAAA,CAAAA,CAAK,QAAQ,CAAA,CAG3CzC,CAAQ,CAAA,OAAA,CAAQ0C,CAAU,EAAA,CACxB,IAAMC,CAAAA,CAAa,IAAK,CAAA,kBAAA,CAAmBH,CAAUE,CAAAA,CAAM,CAC3DlC,CAAAA,CAAAA,CAAU,WAAYmC,CAAAA,CAAU,EAClC,CAAC,CAED,CAAA,IAAA,CAAK,GAAI,CAAA,CAAA,SAAA,EAAY3C,CAAQ,CAAA,MAAM,CAAe,aAAA,CAAA,EACpD,CAKQ,kBAAA,CAAmBwC,CAAmBE,CAAAA,CAAAA,CAAgC,CAC5E,IAAMD,CAAAA,CAAOD,CAAS,CAAA,SAAA,CAAU,IAAI,CAAA,CAGpC,OAAAC,CAAAA,CAAK,SAAU,CAAA,GAAA,CAAI,sBAAsB,CAAA,CAGzCA,CAAK,CAAA,eAAA,CAAgB,GAAGhD,CAAW,CAAA,EAAGC,CAAM,CAAA,QAAQ,CAAE,CAAA,CAAA,CACrD+C,CAAqB,CAAA,KAAA,CAAM,OAAU,CAAA,EAAA,CAGtC,IAAK,CAAA,cAAA,CAAeA,CAAMC,CAAAA,CAAM,EAGhC,IAAK,CAAA,yBAAA,CAA0BD,CAAMC,CAAAA,CAAM,CAG3C,CAAA,IAAA,CAAK,wBAAyBD,CAAAA,CAAAA,CAAMC,CAAM,CAAA,CAEnCD,CACT,CAKQ,cAAeA,CAAAA,CAAAA,CAAeC,EAA6B,CAC3C,IAAA,CAAK,gBAAiBD,CAAAA,CAAAA,CAAM,CAAIhD,CAAAA,EAAAA,CAAW,CAAGC,EAAAA,CAAAA,CAAM,KAAK,CAAA,CAAA,CAAG,CAEpE,CAAA,OAAA,CAAQgB,CAAW,EAAA,CAC/B,IAAMkC,CAAY,CAAA,IAAA,CAAK,OAAQlC,CAAAA,CAAAA,CAAShB,CAAM,CAAA,KAAK,CAC7CmD,CAAAA,CAAAA,CAAS,IAAK,CAAA,OAAA,CAAQnC,CAAShB,CAAAA,CAAAA,CAAM,MAAM,CAAA,CAEjD,GAAI,CAACkD,CAAAA,EAAa,EAAEA,CAAAA,IAAaF,CAAS,CAAA,CAAA,OAE1C,IAAMI,CAAAA,CAAQJ,CAAOE,CAAAA,CAAS,CAC9B,CAAA,IAAA,CAAK,eAAgBlC,CAAAA,CAAAA,CAASoC,EAAOD,CAAM,EAC7C,CAAC,CAAA,CAGqB,IAAK,CAAA,gBAAA,CAAiBJ,CAAM,CAAA,qBAAqB,CACzD,CAAA,OAAA,CAAQ/B,CAAW,EAAA,CAC3BgC,CAAO,CAAA,kBAAA,EACT,IAAK,CAAA,gBAAA,CAAiBhC,CAASgC,CAAAA,CAAAA,CAAO,kBAAkB,EAE5D,CAAC,EACH,CAKQ,eAAA,CAAgBhC,CAAkBoC,CAAAA,CAAAA,CAAYD,CAA8B,CAAA,CAClF,GAAI,EAAAC,GAAS,IAAQA,EAAAA,CAAAA,GAAU,EAG/B,CAAA,CAAA,CAAA,GAAI,IAAK,CAAA,YAAA,CAAapC,CAAO,CAAA,EAAK,OAAOoC,CAAAA,EAAU,QAAYA,EAAAA,CAAAA,CAAM,IAAK,EAAA,CAAG,CAC3E,IAAK,CAAA,aAAA,CAAcpC,CAASoC,CAAAA,CAAK,CACjC,CAAA,MACF,CAEA,GAAIpC,CAAmB,YAAA,iBAAA,CACrBA,CAAQ,CAAA,IAAA,CAAO,MAAOoC,CAAAA,CAAK,EACtBpC,CAAQ,CAAA,WAAA,EAAa,IAAK,EAAA,GAC7BA,CAAQ,CAAA,WAAA,CAAc,MAAOoC,CAAAA,CAAK,CAE3BpC,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,YAAmB,gBAC5BA,CAAAA,CAAAA,CAAQ,KAAQ,CAAA,MAAA,CAAOoC,CAAK,CAAA,CAAA,KAAA,GACnBpC,CAAmB,YAAA,gBAAA,CAE5BA,CAAQ,CAAA,GAAA,CAAM,MAAOoC,CAAAA,CAAK,CAC1BpC,CAAAA,CAAAA,CAAQ,GAAMA,CAAAA,CAAAA,CAAQ,GAAO,EAAA,OAAA,CAAA,KACxB,CAEL,IAAIqC,EAAe,MAAOD,CAAAA,CAAK,CAE/B,CAAA,GAAID,CACF,CAAA,OAAQA,CAAQ,EACd,KAAK,UAAA,CACHE,CAAe,CAAA,OAAOD,CAAU,EAAA,QAAA,CAAW,IAAIA,CAAK,CAAA,CAAA,CAAKC,CACzD,CAAA,MACF,KAAK,MAAA,CACHA,CAAejC,CAAAA,KAAAA,CAAM,UAAW,CAAA,OAAOgC,CAAU,EAAA,QAAA,CAAWA,CAAQ,CAAA,IAAI,EACxE,MACF,KAAK,QAEHC,CAAAA,CAAAA,CAAe,OAAOD,CAAAA,EAAU,QAAWA,CAAAA,CAAAA,CAAM,OAAQ,CAAA,CAAC,CAAIC,CAAAA,CAAAA,CAC9D,MACF,KAAK,UAEC,CAAA,OAAOD,CAAU,EAAA,QAAA,GACfA,CAAS,EAAA,GAAA,CACXC,CAAe,CAAA,CAAA,CAAA,EAAI,IAAK,CAAA,KAAA,CAAMD,CAAQ,CAAA,GAAO,CAAC,CAAA,EAAA,CAAA,CACrCA,CAAS,EAAA,GAAA,CAClBC,EAAe,CAAI,CAAA,EAAA,IAAA,CAAK,KAAMD,CAAAA,CAAAA,CAAQ,GAAI,CAAC,CAE3CC,EAAAA,CAAAA,CAAAA,CAAAA,CAAe,CAAID,CAAAA,EAAAA,CAAK,CAG5B,CAAA,CAAA,CAAA,MACF,KAAK,QAAA,CACHC,EAAe,OAAOD,CAAAA,EAAU,QAAWA,CAAAA,CAAAA,CAAM,cAAe,EAAA,CAAIC,CACpE,CAAA,MACF,KAAK,UAAA,CACHA,CAAeA,CAAAA,CAAAA,CAAa,MAAS,CAAA,GAAA,CAAMA,EAAa,SAAU,CAAA,CAAA,CAAG,EAAE,CAAA,CAAI,KAAQA,CAAAA,CAAAA,CACnF,MACF,KAAK,SACHA,CAAAA,CAAAA,CAAeD,CAAQ,CAAA,KAAA,CAAQ,IAC/B,CAAA,MACF,KAAK,cACHC,CAAAA,CAAAA,CAAeD,CAAQ,CAAA,WAAA,CAAc,eACrC,CAAA,KACJ,CAGFpC,CAAAA,CAAQ,WAAcqC,CAAAA,EACxB,CACF,CAAA,CAKQ,gBAAiBrC,CAAAA,CAAAA,CAAkBsC,EAAsB,CAC/D,IAAMC,CAAY,CAAA,IAAA,CAAK,KAAMD,CAAAA,CAAM,CAC7BE,CAAAA,CAAAA,CAAcF,CAAS,CAAA,CAAA,EAAK,EAC5BG,CAAAA,CAAAA,CAAa,CAAIF,CAAAA,CAAAA,EAAaC,EAAc,CAAI,CAAA,CAAA,CAAA,CAElDE,CAAY,CAAA,EAAA,CAGhB,IAASC,IAAAA,CAAAA,CAAI,CAAGA,CAAAA,CAAAA,CAAIJ,CAAWI,CAAAA,CAAAA,EAAAA,CAC7BD,CAAa,EAAA,0DAAA,CAIXF,CACFE,GAAAA,CAAAA,EAAa,4DAIf,IAASC,IAAAA,CAAAA,CAAI,CAAGA,CAAAA,CAAAA,CAAIF,CAAYE,CAAAA,CAAAA,EAAAA,CAC9BD,CAAa,EAAA,2DAAA,CAGf1C,CAAQ,CAAA,SAAA,CAAY0C,CAGpB,CAAA,IAAMX,CAAO/B,CAAAA,CAAAA,CAAQ,OAAQ,CAAA,wBAAwB,CAAKA,EAAAA,CAAAA,CAAQ,OAAQ,CAAA,cAAc,CACpF+B,CAAAA,CAAAA,EACyB,IAAK,CAAA,gBAAA,CAAiBA,CAAM,CAAA,2BAA2B,CAC/D,CAAA,OAAA,CAAQa,CAAe,EAAA,CACxCA,EAAY,WAAcN,CAAAA,CAAAA,CAAO,OAAQ,CAAA,CAAC,EAC5C,CAAC,EAEL,CAKQ,YAAatC,CAAAA,CAAAA,CAA2B,CAG9C,OAFc,IAAK,CAAA,OAAA,CAAQA,EAAShB,CAAM,CAAA,KAAK,CAE9B,GAAA,UACnB,CAKQ,aAAA,CAAcgB,CAAkB6C,CAAAA,CAAAA,CAAmB,CACzD,IAAMC,CAAY,CAAA,IAAA,CAAK,eAAgBD,CAAAA,CAAG,EACpCE,CAAS/C,CAAAA,CAAAA,CAAQ,aAEvB,CAAA,GAAI,CAAC+C,CAAAA,CAAQ,CACX,IAAA,CAAK,GAAI,CAAA,6CAAA,CAA+C/C,CAAO,CAAA,CAC/D,MACF,CAGAA,EAAQ,MAAO,EAAA,CAGf,IAAIgD,CAAAA,CAEJ,OAAQF,CAAAA,EACN,KAAK,OACHE,CAAAA,CAAAA,CAAe,IAAK,CAAA,kBAAA,CAAmBH,CAAK7C,CAAAA,CAAO,EACnD,MACF,KAAK,OACL,CAAA,QACEgD,CAAe,CAAA,IAAA,CAAK,kBAAmBH,CAAAA,CAAAA,CAAK7C,CAAO,CAAA,CACnD,KACJ,CAGA,IAAK,CAAA,kBAAA,CAAmBA,EAASgD,CAAY,CAAA,CAG7CD,CAAO,CAAA,WAAA,CAAYC,CAAY,CAAA,CAE/B,IAAK,CAAA,GAAA,CAAI,CAAWF,QAAAA,EAAAA,CAAS,CAAqBD,kBAAAA,EAAAA,CAAG,CAAE,CAAA,EACzD,CAKQ,eAAgBA,CAAAA,CAAAA,CAAgC,CACtD,GAAI,CAACA,CAAAA,EAAO,OAAOA,CAAAA,EAAQ,QACzB,CAAA,OAAA,IAAA,CAAK,GAAI,CAAA,0CAAA,CAA4CA,CAAG,CAAA,CACjD,OAGT,CAAA,IAAMI,CAAWJ,CAAAA,CAAAA,CAAI,WAAY,EAAA,CAI3BK,CADkB,CAAA,CAAC,MAAQ,CAAA,OAAA,CAAS,MAAQ,CAAA,MAAA,CAAQ,MAAQ,CAAA,MAAM,CACxC,CAAA,IAAA,CAAKC,GAAOF,CAAS,CAAA,QAAA,CAASE,CAAG,CAAC,CAG5DC,CAAAA,CAAAA,CAAoBH,CAAS,CAAA,QAAA,CAAS,iBAAiB,CAAA,EAAKA,CAAS,CAAA,QAAA,CAAS,SAAS,CAAA,CAE7F,OAAQC,CAAWE,EAAAA,CAAAA,CAAqB,OAAU,CAAA,OACpD,CAKQ,kBAAA,CAAmBP,CAAaQ,CAAAA,CAAAA,CAA4C,CAClF,IAAMC,CAAQ,CAAA,QAAA,CAAS,aAAc,CAAA,OAAO,EAG5C,OAAAA,CAAAA,CAAM,GAAMT,CAAAA,CAAAA,CACZS,CAAM,CAAA,KAAA,CAAQ,IAAK,CAAA,MAAA,CAAO,UAC1BA,CAAAA,CAAAA,CAAM,IAAO,CAAA,IAAA,CAAK,MAAO,CAAA,SAAA,CACzBA,EAAM,WAAc,CAAA,IAAA,CACpBA,CAAM,CAAA,OAAA,CAAU,UAChBA,CAAAA,CAAAA,CAAM,QAAW,CAAA,IAAA,CAAK,MAAO,CAAA,aAAA,CAG7BA,CAAM,CAAA,KAAA,CAAM,KAAQ,CAAA,MAAA,CACpBA,EAAM,KAAM,CAAA,MAAA,CAAS,MACrBA,CAAAA,CAAAA,CAAM,KAAM,CAAA,SAAA,CAAY,OACxBA,CAAAA,CAAAA,CAAM,KAAM,CAAA,YAAA,CAAe,SAGvB,CAAA,IAAA,CAAK,MAAO,CAAA,aAAA,GACdA,EAAM,QAAW,CAAA,IAAA,CACjBA,CAAM,CAAA,YAAA,CAAa,UAAY,CAAA,EAAE,CAInCA,CAAAA,CAAAA,CAAAA,CAAM,OAAU,CAAA,IAAM,CACpB,IAAA,CAAK,GAAI,CAAA,CAAA,sBAAA,EAAyBT,CAAG,CAAE,CAAA,CAAA,CAEvC,IAAMU,CAAAA,CAAY,IAAK,CAAA,qBAAA,CAAsBV,CAAG,CAAA,CAChD,GAAIU,CAAAA,CAAW,CACb,IAAMC,CAAc,CAAA,IAAA,CAAK,kBAAmBD,CAAAA,CAAAA,CAAWF,CAAe,CAAA,CACtEC,CAAM,CAAA,aAAA,EAAe,YAAaE,CAAAA,CAAAA,CAAaF,CAAK,EACtD,CAEEA,KAAAA,CAAAA,CAAM,KAAM,CAAA,UAAA,CAAa,SACzBA,CAAAA,CAAAA,CAAM,MAAM,QAAW,CAAA,UAAA,CACvBA,CAAM,CAAA,SAAA,CAAY,uIAEtB,CAAA,CAGI,IAAK,CAAA,MAAA,CAAO,cAAkB,EAAA,CAAC,IAAK,CAAA,MAAA,CAAO,aAC7CA,GAAAA,CAAAA,CAAM,iBAAiB,YAAc,CAAA,IAAM,CACzCA,CAAAA,CAAM,WAAc,CAAA,CAAA,CACpBA,CAAM,CAAA,IAAA,EAAO,CAAA,KAAA,CAAM,IAAM,EAExB,EACH,CAAC,CAEDA,CAAAA,CAAAA,CAAM,gBAAiB,CAAA,YAAA,CAAc,IAAM,CACzCA,CAAM,CAAA,KAAA,EACNA,CAAAA,CAAAA,CAAM,WAAc,CAAA,EACtB,CAAC,CAAA,CAAA,CAGIA,CACT,CAKQ,kBAAmBT,CAAAA,CAAAA,CAAaQ,CAA4C,CAAA,CAClF,IAAMI,CAAAA,CAAM,QAAS,CAAA,aAAA,CAAc,KAAK,CAAA,CAExC,OAAAA,CAAAA,CAAI,GAAMZ,CAAAA,CAAAA,CACVY,EAAI,GAAMJ,CAAAA,CAAAA,CAAgB,YAAa,CAAA,KAAK,CAAK,EAAA,eAAA,CACjDI,CAAI,CAAA,OAAA,CAAU,MAGdA,CAAAA,CAAAA,CAAI,KAAM,CAAA,KAAA,CAAQ,MAClBA,CAAAA,CAAAA,CAAI,MAAM,MAAS,CAAA,MAAA,CACnBA,CAAI,CAAA,KAAA,CAAM,SAAY,CAAA,OAAA,CACtBA,CAAI,CAAA,KAAA,CAAM,YAAe,CAAA,SAAA,CAGzBA,CAAI,CAAA,OAAA,CAAU,IAAM,CAClB,KAAK,GAAI,CAAA,CAAA,sBAAA,EAAyBZ,CAAG,CAAA,CAAE,CACvCY,CAAAA,CAAAA,CAAI,KAAM,CAAA,UAAA,CAAa,SACvBA,CAAAA,CAAAA,CAAI,KAAM,CAAA,OAAA,CAAU,KACpBA,CAAAA,CAAAA,CAAI,GAAM,CAAA,mBAAA,CAGVA,CAAI,CAAA,KAAA,CAAM,QAAW,CAAA,UAAA,CACrB,IAAMC,CAAAA,CAAc,QAAS,CAAA,aAAA,CAAc,KAAK,CAAA,CAChDA,CAAY,CAAA,KAAA,CAAM,OAAU,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAA,CAAA,CAS5BA,CAAY,CAAA,WAAA,CAAc,mCAC1BD,CAAAA,CAAAA,CAAI,aAAe,EAAA,WAAA,CAAYC,CAAW,EAC5C,CAEOD,CAAAA,CACT,CAKQ,qBAAA,CAAsBE,CAAiC,CAAA,CAC7D,OAAIA,CAAAA,CAAS,QAAS,CAAA,iBAAiB,CAAKA,EAAAA,CAAAA,CAAS,QAAS,CAAA,SAAS,CAE9DA,CAAAA,CAAAA,CACJ,OAAQ,CAAA,SAAA,CAAW,SAAS,CAAA,CAC5B,OAAQ,CAAA,4BAAA,CAA8B,MAAM,CAAA,CAC5C,OAAQ,CAAA,gBAAA,CAAkB,sBAAsB,CAAA,CAE9C,IACT,CAKQ,kBAAmBC,CAAAA,CAAAA,CAAeC,CAAuB,CAAA,CAc/D,GAZID,CAAAA,CAAK,SACPC,GAAAA,CAAAA,CAAG,SAAYD,CAAAA,CAAAA,CAAK,SAItB,CAAA,CAAA,KAAA,CAAM,IAAKA,CAAAA,CAAAA,CAAK,UAAU,CAAA,CAAE,OAAQE,CAAAA,CAAAA,EAAQ,CACtCA,CAAAA,CAAK,IAAK,CAAA,UAAA,CAAW,OAAO,CAAA,EAAKA,CAAK,CAAA,IAAA,GAAS,CAAG/E,EAAAA,CAAW,CAAGC,EAAAA,CAAAA,CAAM,KAAK,CAAA,CAAA,EAC7E6E,CAAG,CAAA,YAAA,CAAaC,CAAK,CAAA,IAAA,CAAMA,CAAK,CAAA,KAAK,EAEzC,CAAC,CAGGF,CAAAA,CAAAA,CAAK,YAAa,CAAA,OAAO,CAAG,CAAA,CAC9B,IAAMG,CAAAA,CAAgBF,CAAG,CAAA,YAAA,CAAa,OAAO,CAAA,EAAK,EAClDA,CAAAA,CAAAA,CAAG,YAAa,CAAA,OAAA,CAASE,CAAgB,CAAA,IAAA,CAAOH,CAAK,CAAA,YAAA,CAAa,OAAO,CAAC,EAC5E,CACF,CAKQ,yBAAA,CAA0B7B,CAAeC,CAAAA,CAAAA,CAA6B,CACrD,IAAA,CAAK,gBAAiBD,CAAAA,CAAAA,CAAM,CAAIhD,CAAAA,EAAAA,CAAW,CAAGC,EAAAA,CAAAA,CAAM,MAAM,CAAA,CAAA,CAAG,CAErE,CAAA,OAAA,CAAQc,CAAa,EAAA,CAClC,IAAMkE,CAAAA,CAAa,IAAK,CAAA,OAAA,CAAQlE,CAAWd,CAAAA,CAAAA,CAAM,MAAM,CAAA,CACjDiF,CAAW,CAAA,QAAA,CAAS,IAAK,CAAA,OAAA,CAAQnE,CAAWd,CAAAA,CAAAA,CAAM,GAAG,CAAA,EAAK,IAAI,CAAA,CAEhEgF,CAAe,GAAA,UAAA,EAAchC,CAAO,CAAA,QAAA,CACtC,IAAK,CAAA,0BAAA,CAA2BlC,CAAWkC,CAAAA,CAAAA,CAAO,QAAS,CAAA,KAAA,CAAM,CAAGiC,CAAAA,CAAQ,CAAC,CAAA,CACpED,CAAe,GAAA,aAAA,EAAiBhC,CAAO,CAAA,WAAA,CAChD,IAAK,CAAA,0BAAA,CAA2BlC,CAAWkC,CAAAA,CAAAA,CAAO,WAAY,CAAA,KAAA,CAAM,CAAGiC,CAAAA,CAAQ,CAAC,CAAA,CACvED,CAAe,GAAA,WAAA,EAAehC,CAAO,CAAA,SAAA,EAC9C,IAAK,CAAA,0BAAA,CAA2BlC,CAAWkC,CAAAA,CAAAA,CAAO,SAAU,CAAA,KAAA,CAAM,CAAGiC,CAAAA,CAAQ,CAAE,CAAA,GAAA,CAAKC,CAAiB,GAAA,CAAE,IAAMA,CAAAA,CAAI,CAAE,CAAA,CAAC,EAExH,CAAC,EACH,CAKQ,0BAA2BpE,CAAAA,CAAAA,CAAoBqE,CAAoB,CAAA,CACzE,IAAMrC,CAAAA,CAAWhC,CAAU,CAAA,iBAAA,CACtBgC,CAGLhC,GAAAA,CAAAA,CAAU,SAAY,CAAA,EAAA,CAGtBqE,CAAM,CAAA,OAAA,CAAQC,CAAQ,EAAA,CACpB,IAAMC,CAAAA,CAAcvC,CAAS,CAAA,SAAA,CAAU,IAAI,CAAA,CAC3C,IAAK,CAAA,cAAA,CAAeuC,CAAaD,CAAAA,CAAI,CACrCtE,CAAAA,CAAAA,CAAU,WAAYuE,CAAAA,CAAW,EACnC,CAAC,CAGGF,CAAAA,CAAAA,CAAM,MAAW,GAAA,CAAA,GAClBrE,CAA0B,CAAA,KAAA,CAAM,OAAU,CAAA,MAAA,CAAA,EAE/C,CAKQ,wBAAA,CAAyBiC,CAAeC,CAAAA,CAAAA,CAA6B,CAC/C,IAAA,CAAK,gBAAiBD,CAAAA,CAAAA,CAAM,CAAIhD,CAAAA,EAAAA,CAAW,CAAGC,EAAAA,CAAAA,CAAM,QAAQ,CAAA,IAAA,EAAOD,CAAW,CAAA,EAAGC,CAAM,CAAA,QAAQ,CAAG,CAAA,CAAA,CAAA,CAE1G,OAAQgB,CAAAA,CAAAA,EAAW,CACrC,IAAMsE,CAAW,CAAA,IAAA,CAAK,OAAQtE,CAAAA,CAAAA,CAAShB,CAAM,CAAA,QAAQ,CAC/CuF,CAAAA,CAAAA,CAAW,IAAK,CAAA,OAAA,CAAQvE,CAAShB,CAAAA,CAAAA,CAAM,QAAQ,CAAA,CAEjDwF,CAAa,CAAA,IAAA,CAEbF,CACFE,GAAAA,CAAAA,CAAa,IAAK,CAAA,iBAAA,CAAkBxC,CAAQsC,CAAAA,CAAQ,CAGlDC,CAAAA,CAAAA,CAAAA,GACFC,CAAaA,CAAAA,CAAAA,EAAc,CAAC,IAAA,CAAK,iBAAkBxC,CAAAA,CAAAA,CAAQuC,CAAQ,CAAA,CAAA,CAGpEvE,CAAwB,CAAA,KAAA,CAAM,OAAUwE,CAAAA,CAAAA,CAAa,EAAK,CAAA,OAC7D,CAAC,EACH,CAKQ,iBAAA,CAAkBxC,CAAuByC,CAAAA,CAAAA,CAA4B,CAC3E,GAAI,CAACA,CAAAA,EAAa,OAAOA,CAAAA,EAAc,QACrC,CAAA,OAAA,IAAA,CAAK,GAAI,CAAA,6BAAA,CAA+BA,CAAS,CAAA,CAC1C,KAIT,CAAA,IAAMC,CAAQD,CAAAA,CAAAA,CAAU,KAAM,CAAA,GAAG,CACjC,CAAA,GAAIC,CAAM,CAAA,MAAA,CAAS,CACjB,CAAA,OAAA,IAAA,CAAK,GAAI,CAAA,2BAAA,CAA6BD,CAAS,CAAA,CACxC,KAGT,CAAA,IAAME,CAAQD,CAAAA,CAAAA,CAAM,CAAC,CAAA,CACfE,CAAkBF,CAAAA,CAAAA,CAAM,KAAM,CAAA,CAAC,CAAE,CAAA,IAAA,CAAK,GAAG,CAAA,CACzCG,CAAe7C,CAAAA,CAAAA,CAAe2C,CAAK,CAAA,CAIzC,GAFA,IAAA,CAAK,GAAI,CAAA,CAAA,sBAAA,EAAyBA,CAAK,CAAA,EAAA,EAAKE,CAAW,CAAA,QAAA,EAAW,OAAOA,CAAW,CAAaD,UAAAA,EAAAA,CAAe,CAAE,CAAA,CAAA,CAE9GC,CAAe,EAAA,IAAA,CACjB,OAAK,IAAA,CAAA,GAAA,CAAI,CAAUF,OAAAA,EAAAA,CAAK,CAAsC,oCAAA,CAAA,CAAA,CACvD,KAIT,CAAA,GAAIC,CAAgB,CAAA,UAAA,CAAW,IAAI,CAAA,CAAG,CACpC,IAAMxC,CAAQwC,CAAAA,CAAAA,CAAgB,SAAU,CAAA,CAAC,CACnCE,CAAAA,CAAAA,CAAS,MAAOD,CAAAA,CAAW,CAAK,EAAA,MAAA,CAAOzC,CAAK,CAAA,CAClD,OAAK,IAAA,CAAA,GAAA,CAAI,CAAeyC,YAAAA,EAAAA,CAAW,CAAOzC,IAAAA,EAAAA,CAAK,CAAM0C,GAAAA,EAAAA,CAAM,CAAE,CAAA,CAAA,CACtDA,CACT,CAAA,KAAA,GAAWF,CAAgB,CAAA,UAAA,CAAW,IAAI,CAAA,CAAG,CAC3C,IAAMxC,CAAQwC,CAAAA,CAAAA,CAAgB,SAAU,CAAA,CAAC,CACnCE,CAAAA,CAAAA,CAAS,MAAOD,CAAAA,CAAW,CAAK,EAAA,MAAA,CAAOzC,CAAK,CAAA,CAClD,OAAK,IAAA,CAAA,GAAA,CAAI,CAAeyC,YAAAA,EAAAA,CAAW,CAAOzC,IAAAA,EAAAA,CAAK,CAAM0C,GAAAA,EAAAA,CAAM,CAAE,CAAA,CAAA,CACtDA,CACT,CAAA,KAAA,GAAWF,CAAgB,CAAA,UAAA,CAAW,GAAG,CAAA,CAAG,CAC1C,IAAMxC,CAAQwC,CAAAA,CAAAA,CAAgB,SAAU,CAAA,CAAC,CACnCE,CAAAA,CAAAA,CAAS,MAAOD,CAAAA,CAAW,CAAI,CAAA,MAAA,CAAOzC,CAAK,CAAA,CACjD,OAAK,IAAA,CAAA,GAAA,CAAI,CAAeyC,YAAAA,EAAAA,CAAW,CAAMzC,GAAAA,EAAAA,CAAK,CAAM0C,GAAAA,EAAAA,CAAM,CAAE,CAAA,CAAA,CACrDA,CACT,CAAA,KAAA,GAAWF,CAAgB,CAAA,UAAA,CAAW,GAAG,CAAA,CAAG,CAC1C,IAAMxC,CAAQwC,CAAAA,CAAAA,CAAgB,SAAU,CAAA,CAAC,CACnCE,CAAAA,CAAAA,CAAS,MAAOD,CAAAA,CAAW,CAAI,CAAA,MAAA,CAAOzC,CAAK,CAAA,CACjD,OAAK,IAAA,CAAA,GAAA,CAAI,CAAeyC,YAAAA,EAAAA,CAAW,CAAMzC,GAAAA,EAAAA,CAAK,CAAM0C,GAAAA,EAAAA,CAAM,CAAE,CAAA,CAAA,CACrDA,CACT,CAAA,KAAO,CAEL,IAAIA,CAAS,CAAA,KAAA,CAGb,GAAI,OAAOD,CAAgB,EAAA,SAAA,CAErBD,CAAgB,CAAA,WAAA,EAAkB,GAAA,MAAA,CACpCE,CAASD,CAAAA,CAAAA,GAAgB,IAChBD,CAAAA,CAAAA,CAAgB,WAAY,EAAA,GAAM,OAC3CE,CAAAA,CAAAA,CAASD,IAAgB,KAEzBC,CAAAA,CAAAA,CAAS,KAEX,CAAA,IAAA,CAAK,GAAI,CAAA,CAAA,oBAAA,EAAuBD,CAAW,CAAA,KAAA,EAAQD,CAAgB,CAAA,WAAA,EAAkB,GAAA,MAAM,CAAME,GAAAA,EAAAA,CAAM,CAAE,CAAA,CAAA,CAAA,KAAA,GAChG,OAAOD,CAAAA,EAAgB,QAAU,CAAA,CAE1C,IAAME,CAAAA,CAAW,MAAOH,CAAAA,CAAe,CACvCE,CAAAA,CAAAA,CAAS,CAAC,KAAA,CAAMC,CAAQ,CAAA,EAAKF,CAAgBE,GAAAA,CAAAA,CAC7C,IAAK,CAAA,GAAA,CAAI,CAAsBF,mBAAAA,EAAAA,CAAW,CAAQE,KAAAA,EAAAA,CAAQ,CAAMD,GAAAA,EAAAA,CAAM,CAAE,CAAA,EAC1E,CAAO,KAAA,CAEL,IAAME,CAAAA,CAAY,MAAOH,CAAAA,CAAW,CAC9BI,CAAAA,CAAAA,CAAW,MAAOL,CAAAA,CAAe,CACvCE,CAAAA,CAAAA,CAASE,CAAU,CAAA,WAAA,EAAkBC,GAAAA,CAAAA,CAAS,WAAY,EAAA,CAC1D,IAAK,CAAA,GAAA,CAAI,CAAuBD,oBAAAA,EAAAA,CAAS,CAAUC,OAAAA,EAAAA,CAAQ,CAAOH,IAAAA,EAAAA,CAAM,CAAE,CAAA,EAC5E,CAEA,OAAOA,CACT,CACF,CAKQ,cAAA,CAAehF,CAAoBZ,CAAAA,CAAAA,CAAyB,CAClE,IAAME,CAAQ,CAAA,IAAA,CAAK,KAAM,CAAA,QAAA,CAASF,CAAS,CAAA,CAGrCgG,CAAe,CAAA,IAAA,CAAK,aAAcpF,CAAAA,CAAAA,CAAW,CAAIf,CAAAA,EAAAA,CAAW,CAAGC,EAAAA,CAAAA,CAAM,KAAK,CAAA,CAAA,CAAG,CAC/EkG,CAAAA,CAAAA,GACDA,CAA6B,CAAA,KAAA,CAAM,OAAU9F,CAAAA,CAAAA,CAAM,OAAQ,CAAA,MAAA,GAAW,CAAI,CAAA,EAAA,CAAK,MAIvD,CAAA,CAAA,IAAA,CAAK,gBAAiBU,CAAAA,CAAAA,CAAW,+BAA+B,CAAA,CACxE,OAAQE,CAAAA,CAAAA,EAAW,CACpC,GAAM,CAAE,WAAA,CAAAqB,CAAa,CAAA,UAAA,CAAA8D,CAAW,CAAA,CAAI/F,CAC9BgG,CAAAA,CAAAA,CAAWhG,CAAM,CAAA,OAAA,CAAQ,KAAS,EAAA,EAAA,CAClCuC,CAAa,CAAA,IAAA,CAAK,IAAKwD,CAAAA,CAAAA,CAAaC,CAAQ,CAAA,CAElDpF,CAAQ,CAAA,WAAA,CAAc,CAAQqB,KAAAA,EAAAA,CAAW,CAAOM,IAAAA,EAAAA,CAAU,CAAKwD,EAAAA,EAAAA,CAAU,CAC3E,OAAA,EAAA,CAAC,CAGuB,CAAA,IAAA,CAAK,gBAAiBrF,CAAAA,CAAAA,CAAW,8BAA8B,CAAA,CACvE,OAAQE,CAAAA,CAAAA,EAAW,CACjC,IAAMqF,CAAgB,CAAA,MAAA,CAAO,OAAQjG,CAAAA,CAAAA,CAAM,OAAO,CAAA,CAC/C,MAAO,CAAA,CAAC,CAACkG,CAAAA,CAAMlD,CAAK,CAAA,GAAMA,CAAS,EAAA,IAAA,EAAQA,CAAU,GAAA,EAAE,CACvD,CAAA,GAAA,CAAI,CAAC,CAACmD,CAAKnD,CAAAA,CAAK,CAAM,GAAA,CAAA,EAAGmD,CAAG,CAAA,EAAA,EAAKnD,CAAK,CAAA,CAAE,CACxC,CAAA,IAAA,CAAK,IAAI,CAAA,CAEZpC,CAAQ,CAAA,WAAA,CAAcqF,CAAiB,EAAA,qBACzC,CAAC,EACH,CAKQ,YAAA,CAAanG,CAAmB+B,CAAAA,CAAAA,CAAgBuE,CAAyB7E,CAAAA,CAAAA,CAAwB,CACvG,IAAMvB,CAAQ,CAAA,IAAA,CAAK,KAAM,CAAA,QAAA,CAASF,CAAS,CAAA,CACrCY,CAAY,CAAA,QAAA,CAAS,aAAc,CAAA,CAAA,kBAAA,EAAqBZ,CAAS,CAAA,EAAA,CAAI,CAE3E,CAAA,GAAI,CAACY,CAAAA,CAAW,CACd,IAAA,CAAK,GAAI,CAAA,CAAA,iCAAA,EAAoCZ,CAAS,CAAA,CAAE,CACxD,CAAA,MACF,CAGA,GAAIyB,CAAUA,EAAAA,CAAAA,YAAkB,iBAAmB,CAAA,CAC5BA,CAAO,CAAA,YAC5BA,CAAO,CAAA,QAAA,CAAW,KACpB,CAEA,OAAQM,CAAAA,EACN,KAAK,WACH,CAAA,IAAMO,CAAQpC,CAAAA,CAAAA,CAAM,OAAQ,CAAA,KAAA,EAAS,EAC/BqG,CAAAA,CAAAA,CAAAA,CAAcrG,CAAM,CAAA,OAAA,CAAQ,MAAU,EAAA,CAAA,EAAKoC,CAE7CiE,CAAAA,CAAAA,CAAarG,EAAM,UACrB,GAAA,IAAA,CAAK,YAAaF,CAAAA,CAAAA,CAAW,QAAUuG,CAAAA,CAAU,CAEjD,CAAA,UAAA,CAAW,IAAM,CACf,IAAK,CAAA,WAAA,CAAY3F,CAAsBZ,CAAAA,CAAAA,CAAW,IAAI,EACxD,CAAG,CAAA,CAAC,CAEN,CAAA,CAAA,MAEF,KAAK,WAAA,CACH,IAAMwG,CAAAA,CAAa,IAAK,CAAA,GAAA,CAAI,CAAItG,CAAAA,CAAAA,CAAAA,CAAM,OAAQ,CAAA,MAAA,EAAU,CAAMA,GAAAA,CAAAA,CAAM,OAAQ,CAAA,KAAA,EAAS,EAAG,CAAA,CAAA,CACxF,IAAK,CAAA,YAAA,CAAaF,CAAW,CAAA,QAAA,CAAUwG,CAAU,CAAA,CAEjD,UAAW,CAAA,IAAM,CACf,IAAA,CAAK,WAAY5F,CAAAA,CAAAA,CAAsBZ,CAAW,CAAA,IAAI,EACxD,CAAA,CAAG,CAAC,CAAA,CACJ,MAEF,KAAK,WAEH,CAAA,IAAA,CAAK,eAAgBY,CAAAA,CAAAA,CAAsBZ,CAAS,CAAA,CAAE,OAAQ,CAAA,IAAM,CAC9DyB,CAAAA,EAAUA,CAAkB,YAAA,iBAAA,GAC9BA,CAAO,CAAA,QAAA,CAAW,KAEtB,EAAA,CAAC,CACD,CAAA,OAEF,KAAK,YAAA,CACH,IAAK,CAAA,YAAA,CAAazB,CAAW,CAAA,QAAA,CAAU,CAAC,CAAA,CACxC,UAAW,CAAA,IAAM,CACf,IAAA,CAAK,WAAYY,CAAAA,CAAAA,CAAsBZ,CAAW,CAAA,IAAI,EACxD,CAAA,CAAG,CAAC,CAAA,CACJ,MAEF,KAAK,WACH,CAAA,IAAMyG,CAAiB,CAAA,IAAA,CAAK,GAAI,CAAA,CAAA,CAAG,IAAK,CAAA,KAAA,CAAA,CAAOvG,CAAM,CAAA,UAAA,CAAa,CAAMA,GAAAA,CAAAA,CAAM,OAAQ,CAAA,KAAA,EAAS,EAAG,CAAA,CAAA,EAAKA,CAAM,CAAA,OAAA,CAAQ,KAAS,EAAA,EAAA,CAAG,CACjI,CAAA,IAAA,CAAK,YAAaF,CAAAA,CAAAA,CAAW,QAAUyG,CAAAA,CAAc,CACrD,CAAA,UAAA,CAAW,IAAM,CACf,IAAK,CAAA,WAAA,CAAY7F,CAAsBZ,CAAAA,CAAAA,CAAW,IAAI,EACxD,CAAG,CAAA,CAAC,CACJ,CAAA,MAEF,KAAK,eAAA,CAEH,IAAK,CAAA,KAAA,CAAM,WAAYA,CAAAA,CAAAA,CAAW,CAChC,OAAA,CAAS,CAAE,KAAA,CAAOE,CAAM,CAAA,OAAA,CAAQ,KAAM,CAAA,CACtC,WAAa,CAAA,CAAA,CACb,WAAa,CAAA,IAAI,GACnB,CAAC,CACG,CAAA,IAAA,CAAK,MAAO,CAAA,UAAA,EACd,IAAK,CAAA,eAAA,CAAgB,GAAIF,CAAAA,CAAS,CAAI,IAAA,CAExC,MAEF,KAAK,QAEH,CAAA,IAAA,CAAK,KAAM,CAAA,WAAA,CAAYA,CAAW,CAAA,CAAE,WAAa,CAAA,IAAI,GAAM,CAAC,CAC5D,CAAA,IAAA,CAAK,MAAO,CAAA,UAAA,CAAW,CAAWA,QAAAA,EAAAA,CAAS,CAAE,CAAA,CAAA,CACzC,IAAK,CAAA,MAAA,CAAO,UACd,EAAA,IAAA,CAAK,eAAgB,CAAA,GAAA,CAAIA,CAAS,CAAA,IAEpC,CAAA,KACJ,CAGIyB,CAAAA,EAAUA,CAAkB,YAAA,iBAAA,EAAqBM,CAAW,GAAA,WAAA,EAC9D,UAAW,CAAA,IAAM,CACfN,CAAAA,CAAO,QAAW,CAAA,MACpB,CAAG,CAAA,GAAG,EAEV,CAKA,MAAc,eAAA,CAAgBb,CAAoBZ,CAAAA,CAAAA,CAAkC,CAClF,IAAME,CAAQ,CAAA,IAAA,CAAK,KAAM,CAAA,QAAA,CAASF,CAAS,CAAA,CACrCsC,CAAQpC,CAAAA,CAAAA,CAAM,OAAQ,CAAA,KAAA,EAAS,EAG/BwG,CAAAA,CAAAA,CAAgBxG,CAAM,CAAA,OAAA,CAAQ,MAEpC,CAAA,IAAA,CAAK,GAAI,CAAA,CAAA,oCAAA,EAAuCwG,CAAa,CAAA,QAAA,EAAWpE,CAAK,CAAA,CAAE,CAE/E,CAAA,GAAI,CACF,IAAA,CAAK,KAAM,CAAA,WAAA,CAAYtC,CAAW,CAAA,CAAE,iBAAmB,CAAA,CAAA,CAAK,CAAC,CAAA,CAC7D,IAAK,CAAA,yBAAA,CAA0BY,CAAWZ,CAAAA,CAAAA,CAAW,EAAI,CAGzD,CAAA,IAAMqC,CAAW,CAAA,MAAM,IAAK,CAAA,MAAA,CAAO,WAAYrC,CAAAA,CAAAA,CAAW,CACxD,GAAGE,CAAM,CAAA,OAAA,CACT,MAAQwG,CAAAA,CAAAA,CACR,KAAOpE,CAAAA,CACT,CAAC,CAAA,CAED,IAAK,CAAA,GAAA,CAAI,CAAUD,OAAAA,EAAAA,CAAAA,CAAS,IAAK,CAAA,MAAM,CAA6BqE,0BAAAA,EAAAA,CAAa,CAAE,CAAA,CAAA,CAGnF,IAAMC,CAAAA,CAAa,CAAC,GAAGzG,CAAM,CAAA,OAAA,CAAS,GAAGmC,CAAAA,CAAS,IAAI,CAAA,CAGhDK,CAAcL,CAAAA,CAAAA,CAAS,IAAK,CAAA,MAAA,GAAWC,CAE7C,CAAA,IAAA,CAAK,KAAM,CAAA,WAAA,CAAYtC,CAAW,CAAA,CAChC,OAAS2G,CAAAA,CAAAA,CACT,UAAYtE,CAAAA,CAAAA,CAAS,UACrB,CAAA,WAAA,CAAaK,CACb,CAAA,iBAAA,CAAmB,CACrB,CAAA,CAAC,CAGD,CAAA,IAAA,CAAK,gBAAiB9B,CAAAA,CAAAA,CAAWyB,CAAS,CAAA,IAAI,CAG9C,CAAA,IAAA,CAAK,wBAAyBzB,CAAAA,CAAAA,CAAWZ,CAAS,CAAA,CAGlD,IAAK,CAAA,aAAA,CAAcY,CAAW,CAAA,eAAA,CAAiB,CAC7C,OAAA,CAASyB,CAAS,CAAA,IAAA,CAClB,YAAcsE,CAAAA,CAAAA,CACd,UAAYtE,CAAAA,CAAAA,CAAS,UACrB,CAAA,UAAA,CAAY,CACd,CAAA,CAAC,EAEH,CAAA,MAASxB,CAAO,CAAA,CACd,IAAK,CAAA,GAAA,CAAI,6BAA+BA,CAAAA,CAAK,CAC7C,CAAA,IAAA,CAAK,KAAM,CAAA,WAAA,CAAYb,CAAW,CAAA,CAAE,iBAAmB,CAAA,KAAM,CAAC,CAAA,CAG9D,IAAK,CAAA,yBAAA,CAA0BY,CAAWZ,CAAAA,CAAAA,CAAW,KAAO,CAAA,oBAAoB,CAEhF,CAAA,UAAA,CAAW,IAAM,CACf,IAAK,CAAA,yBAAA,CAA0BY,CAAWZ,CAAAA,CAAAA,CAAW,KAAK,EAC5D,CAAG,CAAA,GAAI,EACT,CAAA,OAAE,CACA,IAAA,CAAK,yBAA0BY,CAAAA,CAAAA,CAAWZ,CAAW,CAAA,KAAK,EAC5D,CACF,CAKQ,yBAAA,CAA0BY,CAAoBZ,CAAAA,CAAAA,CAAmBM,CAAkBsG,CAAAA,CAAAA,CAA0B,CACnH,IAAMC,CAAkB,CAAA,IAAA,CAAK,gBAAiBjG,CAAAA,CAAAA,CAAW,kCAAkC,CAAA,CACrFV,CAAQ,CAAA,IAAA,CAAK,KAAM,CAAA,QAAA,CAASF,CAAS,CAAA,CAE3C6G,CAAgB,CAAA,OAAA,CAAQpF,CAAU,EAAA,CAChC,IAAMqF,CAAAA,CAAarF,CAEnB,CAAA,GAAImF,CAAW,CAAA,CACbE,CAAW,CAAA,WAAA,CAAcF,CACzBE,CAAAA,CAAAA,CAAW,QAAW,CAAA,IAAA,CACtBA,CAAW,CAAA,SAAA,CAAU,GAAI,CAAA,OAAO,CAChC,CAAA,MACF,CAEAA,CAAAA,CAAW,SAAU,CAAA,MAAA,CAAO,OAAO,CAAA,CAE/BxG,CACFwG,EAAAA,CAAAA,CAAW,WAAc,CAAA,YAAA,CACzBA,CAAW,CAAA,QAAA,CAAW,IACtBA,CAAAA,CAAAA,CAAW,SAAU,CAAA,GAAA,CAAI,SAAS,CAAA,GAElCA,CAAW,CAAA,SAAA,CAAU,MAAO,CAAA,SAAS,CACrB5G,CAAAA,CAAAA,CAAM,WAGpB4G,EAAAA,CAAAA,CAAW,WAAc,CAAA,IAAA,CAAK,MAAO,CAAA,YAAA,CACrCA,CAAW,CAAA,QAAA,CAAW,KAEtBA,GAAAA,CAAAA,CAAW,WAAc,CAAA,oBAAA,CACzBA,CAAW,CAAA,QAAA,CAAW,IACtBA,CAAAA,CAAAA,CAAW,SAAU,CAAA,GAAA,CAAI,UAAU,CAAA,CAAA,EAGzC,CAAC,EACH,CAKA,MAAc,oBAAqBlG,CAAAA,CAAAA,CAAoBZ,CAAkC,CAAA,CAEvF,OAAO,IAAA,CAAK,eAAgBY,CAAAA,CAAAA,CAAWZ,CAAS,CAClD,CAKQ,wBAAA,CAAyBY,CAAoBZ,CAAAA,CAAAA,CAAyB,CAC5E,IAAME,CAAQ,CAAA,IAAA,CAAK,KAAM,CAAA,QAAA,CAASF,CAAS,CAAA,CACrCsC,CAAQpC,CAAAA,CAAAA,CAAM,OAAQ,CAAA,KAAA,EAAS,EAC/BuC,CAAAA,CAAAA,CAAa,IAAK,CAAA,IAAA,CAAKvC,CAAM,CAAA,UAAA,CAAaoC,CAAK,CAAA,CAG/CyE,EAAc,IAAK,CAAA,gBAAA,CAAiBnG,CAAW,CAAA,kCAAkC,CACjFoG,CAAAA,CAAAA,CAAc,IAAK,CAAA,gBAAA,CAAiBpG,CAAW,CAAA,kCAAkC,CAGvFmG,CAAAA,CAAAA,CAAY,OAAQtF,CAAAA,CAAAA,EAAU,CAC5B,IAAMqF,CAAarF,CAAAA,CAAAA,CACnBqF,CAAW,CAAA,QAAA,CAAW5G,CAAM,CAAA,WAAA,EAAe,CAC3C4G,CAAAA,CAAAA,CAAW,SAAU,CAAA,MAAA,CAAO,UAAY5G,CAAAA,CAAAA,CAAM,WAAe,EAAA,CAAC,EAChE,CAAC,CAGD8G,CAAAA,CAAAA,CAAY,OAAQvF,CAAAA,CAAAA,EAAU,CAC5B,IAAMqF,CAAarF,CAAAA,CAAAA,CACnBqF,CAAW,CAAA,QAAA,CAAW5G,CAAM,CAAA,WAAA,EAAeuC,CAC3CqE,CAAAA,CAAAA,CAAW,SAAU,CAAA,MAAA,CAAO,UAAY5G,CAAAA,CAAAA,CAAM,WAAeuC,EAAAA,CAAU,EACzE,CAAC,CAGD,CAAA,IAAA,CAAK,yBAA0B7B,CAAAA,CAAAA,CAAWZ,CAAWE,CAAAA,CAAAA,CAAM,iBAAiB,CAAA,CAG7C,IAAK,CAAA,gBAAA,CAAiBU,CAAW,CAAA,+BAA+B,CACxE,CAAA,OAAA,CAAQE,CAAW,EAAA,CACxC,IAAMmG,CAAAA,CAAc/G,CAAM,CAAA,OAAA,CAAQ,MAC5B+F,CAAAA,CAAAA,CAAa/F,CAAM,CAAA,UAAA,CAGrBA,CAAM,CAAA,cAAA,GAAmB,UAAcA,EAAAA,CAAAA,CAAM,cAAmB,GAAA,QAAA,CAClEY,CAAQ,CAAA,WAAA,CAAc,CAAWmG,QAAAA,EAAAA,CAAW,CAAOhB,IAAAA,EAAAA,CAAU,CAE7DnF,QAAAA,CAAAA,CAAAA,CAAAA,CAAQ,WAAc,CAAA,CAAA,KAAA,EAAQZ,CAAM,CAAA,WAAW,CAAOuC,IAAAA,EAAAA,CAAU,CAAKwD,EAAAA,EAAAA,CAAU,CAEnF,OAAA,EAAA,CAAC,CAED,CAAA,IAAA,CAAK,GAAI,CAAA,CAAA,oCAAA,EAAuC/F,CAAM,CAAA,OAAA,CAAQ,MAAM,CAAA,CAAA,EAAIA,CAAM,CAAA,UAAU,CAAcA,WAAAA,EAAAA,CAAAA,CAAM,WAAW,CAAA,CAAE,EAC3H,CAKQ,0BAA2BU,CAAAA,CAAAA,CAAoBN,CAAwB,CAAA,CACnD,IAAK,CAAA,gBAAA,CAAiBM,CAAW,CAAA,gCAAgC,CAEzE,CAAA,OAAA,CAAQsG,CAAa,EAAA,CACpCA,CAA0B,CAAA,KAAA,CAAM,OAAU5G,CAAAA,CAAAA,CAAU,EAAK,CAAA,OAC5D,CAAC,EACH,CAKQ,gBAAA,CAAiBM,CAAoBuG,CAAAA,CAAAA,CAAmC,CAC9E,IAAMvE,CAAW,CAAA,IAAA,CAAK,aAAchC,CAAAA,CAAAA,CAAW,CAAIf,CAAAA,EAAAA,CAAW,CAAGC,EAAAA,CAAAA,CAAM,QAAQ,CAAA,CAAA,CAAG,CAClF,CAAA,GAAI,CAAC8C,CAAAA,CAAU,CACb,IAAA,CAAK,GAAI,CAAA,6CAAA,CAA+ChC,CAAS,CAAA,CACjE,MACF,CAGA,IAAMwG,CAAAA,CAAW,QAAS,CAAA,sBAAA,EAE1BD,CAAAA,CAAAA,CAAW,OAAQrE,CAAAA,CAAAA,EAAU,CAC3B,IAAMC,CAAa,CAAA,IAAA,CAAK,kBAAmBH,CAAAA,CAAAA,CAAUE,CAAM,CAAA,CAC3DsE,CAAS,CAAA,WAAA,CAAYrE,CAAU,EACjC,CAAC,CAAA,CAGDnC,CAAU,CAAA,WAAA,CAAYwG,CAAQ,CAAA,CAE9B,IAAK,CAAA,GAAA,CAAI,CAAYD,SAAAA,EAAAA,CAAAA,CAAW,MAAM,CAAA,+BAAA,CAAiC,EACzE,CAOQ,OAAQrG,CAAAA,CAAAA,CAAkBuG,CAA6B,CAAA,CAC7D,OAAOvG,CAAAA,CAAQ,YAAa,CAAA,CAAA,EAAGjB,CAAW,CAAA,EAAGwH,CAAI,CAAA,CAAE,CACrD,CAEQ,aAAcvG,CAAAA,CAAAA,CAAkBwG,CAAkC,CAAA,CACxE,OAAOxG,CAAAA,CAAQ,aAAcwG,CAAAA,CAAQ,CACvC,CAEQ,gBAAiBxG,CAAAA,CAAAA,CAAkBwG,CAA6B,CAAA,CACtE,OAAO,KAAA,CAAM,IAAKxG,CAAAA,CAAAA,CAAQ,gBAAiBwG,CAAAA,CAAQ,CAAC,CACtD,CAEQ,oBAAA,EAAkC,CACxC,IAAA,CAAK,GAAI,CAAA,kCAAkC,CAI3C,CAAA,IAAM3G,CAAa,CAAA,KAAA,CAAM,IAAK,CAAA,QAAA,CAAS,gBAAiB,CAAA,CAAA,CAAA,EAAId,CAAW,CAAA,EAAGC,CAAM,CAAA,OAAO,CAAG,CAAA,CAAA,CAAC,EAE3F,OAAK,IAAA,CAAA,GAAA,CAAI,CAASa,MAAAA,EAAAA,CAAAA,CAAW,MAAM,CAAA,kBAAA,EAAqBd,CAAW,CAAA,EAAGC,CAAM,CAAA,OAAO,CAAKa,CAAAA,CAAAA,CAAAA,CAAU,CAG9FA,CAAAA,CAAAA,CAAW,MAAW,GAAA,CAAA,GACxB,IAAK,CAAA,GAAA,CAAI,wFAAmF,CAAA,CAC5F,IAAK,CAAA,GAAA,CAAI,uBAAyB,CAAA,QAAA,CAAS,IAAM,EAAA,SAAA,EAAW,SAAU,CAAA,CAAA,CAAG,GAAG,CAAA,CAAI,KAAK,CAAA,CAAA,CAGhFA,CACT,CAEQ,uBAAwBG,CAAAA,CAAAA,CAAiC,CAC/D,IAAMyG,CAAyB,CAAA,EAc/B,CAAA,OAAA,MAAA,CAAO,OAXW,CAAA,CAChB,SAAa,CAAA,WAAA,CACb,SAAa,CAAA,WAAA,CACb,QAAY,CAAA,UAAA,CACZ,UAAY,CAAA,SAAA,CACZ,UAAY,CAAA,SAAA,CACZ,IAAQ,CAAA,QAAA,CACR,KAAS,CAAA,OAAA,CACT,MAAU,CAAA,QACZ,CAEwB,CAAA,CAAE,OAAQ,CAAA,CAAC,CAAC3C,CAAAA,CAAMhD,CAAS,CAAA,GAAM,CACvD,IAAMsB,CAAQ,CAAA,IAAA,CAAK,OAAQpC,CAAAA,CAAAA,CAAS8D,CAAI,CAAA,CACpC1B,CAAS,EAAA,IAAA,GACPtB,CAAc,GAAA,WAAA,CACf2F,CAAgB3F,CAAAA,CAAS,CAAIsB,CAAAA,CAAAA,GAAU,MAC/BtB,CAAAA,CAAAA,GAAc,WACtB2F,CAAAA,CAAAA,CAAgB3F,CAAS,CAAA,CAAIsB,CAAM,CAAA,KAAA,CAAM,GAAG,CAAA,CAAE,GAAIsE,CAAAA,CAAAA,EAAKA,CAAE,CAAA,IAAA,EAAM,CAAA,CACvD,CAAC,SAAA,CAAW,SAAW,CAAA,OAAA,CAAS,QAAQ,CAAA,CAAE,QAAS5F,CAAAA,CAAS,CACpE2F,CAAAA,CAAAA,CAAgB3F,CAAS,CAAA,CAAI,QAASsB,CAAAA,CAAK,CAE3CqE,CAAAA,CAAAA,CAAgB3F,CAAS,CAAA,CAAIsB,CAGpC,EAAA,CAAC,CAGGqE,CAAAA,CAAAA,CAAQ,MAAW,GAAA,MAAA,GACrBA,CAAQ,CAAA,MAAA,CAAS,CAGZA,CAAAA,CAAAA,CACT,CAEQ,eAAA,CAAgB5F,CAAoD,CAAA,CAC1E,GAAIA,CAAAA,YAAmB,gBACrB,CAAA,OAAQA,CAAQ,CAAA,IAAA,EACd,KAAK,UACH,CAAA,OAAOA,CAAQ,CAAA,OAAA,CACjB,KAAK,QAAA,CACL,KAAK,OAAA,CACH,OAAOA,CAAAA,CAAQ,aACjB,CAAA,QACE,OAAOA,CAAAA,CAAQ,KACnB,CAAA,KAAA,GACSA,CAAmB,YAAA,iBAAA,CAC5B,OAAIA,CAAAA,CAAQ,QACH,CAAA,KAAA,CAAM,IAAKA,CAAAA,CAAAA,CAAQ,eAAe,CAAA,CAAE,GAAI8F,CAAAA,CAAAA,EAAUA,CAAO,CAAA,KAAK,CAEhE9F,CAAAA,CAAAA,CAAQ,KAEjB,CAAA,OAAO,IACT,CAEQ,YAAa3B,CAAAA,CAAAA,CAAmB4B,CAAmBsB,CAAAA,CAAAA,CAAYwE,CAAe,CAAA,SAAA,CAAiB,CAErG,IAAMC,CAAa,CAAA,CAAE,GADP,IAAA,CAAK,KAAM,CAAA,QAAA,CAAS3H,CAAS,CAAA,CACb,OAAQ,CAAA,CAGlC4H,CAAiB1E,CAAAA,CAAAA,CAsBrB,GApBItB,CAAAA,GAAc,WAEZ,CAAA,OAAOsB,CAAU,EAAA,QAAA,GACfA,CAAU,GAAA,MAAA,CACZ0E,CAAiB,CAAA,IAAA,CACR1E,CAAU,GAAA,OAAA,CACnB0E,CAAiB,CAAA,KAAA,CAAA,CACR1E,CAAU,GAAA,EAAA,EAAMA,CAAU,GAAA,IAAA,IACnC0E,CAAiB,CAAA,MAAA,CAAA,CAAA,CAAA,CAGZhG,CAAc,GAAA,SAAA,EAAaA,CAAc,GAAA,SAAA,IAE9CsB,CAAU,GAAA,EAAA,EAAMA,CAAU,GAAA,IAAA,CAC5B0E,CAAiB,CAAA,MAAA,CAEjBA,CAAiB,CAAA,MAAA,CAAO1E,CAAK,CAAA,CAAA,CAI7BwE,CAAS,GAAA,QAAA,EAAY,KAAM,CAAA,OAAA,CAAQC,CAAW/F,CAAAA,CAAgC,CAAC,CAAA,CAAG,CACpF,IAAMiG,CAAeF,CAAAA,CAAAA,CAAW/F,CAAgC,CAAA,CAChE+F,CAAW/F,CAAAA,CAAgC,CAAI,CAAA,CAAC,GAAGiG,CAAAA,CAAcD,CAAc,EACjF,CACGD,KAAAA,CAAAA,CAAmB/F,CAAS,CAAA,CAAIgG,EAK/BhG,CAAc,GAAA,QAAA,GAChB+F,CAAW,CAAA,MAAA,CAAS,CAGtB,CAAA,CAAA,IAAA,CAAK,KAAM,CAAA,WAAA,CAAY3H,CAAW,CAAA,CAAE,OAAS2H,CAAAA,CAAW,CAAC,CAAA,CAEzD,IAAK,CAAA,GAAA,CAAI,CAAmB/F,gBAAAA,EAAAA,CAAS,CAAMgG,GAAAA,EAAAA,CAAc,CAAe1E,YAAAA,EAAAA,CAAK,CAAG,CAAA,CAAA,CAAA,CAGhF,IAAM4E,CAAAA,CAA2B,CAC/B,OAAA,CAASH,CACT,CAAA,OAAA,CAAS,QAAS,CAAA,aAAA,CAAc,CAAqB3H,kBAAAA,EAAAA,CAAS,CAAI,EAAA,CAAA,CACpE,CAEA,CAAA,IAAA,CAAK,aAAc,CAAA,QAAA,CAAiB,cAAgB8H,CAAAA,CAAK,EAC3D,CAEQ,WAAYlH,CAAAA,CAAAA,CAAoBmH,CAAqB,CAAA,CAC3D,IAAMC,CAAAA,CAAiB,IAAK,CAAA,aAAA,CAAcpH,CAAW,CAAA,CAAA,CAAA,EAAIf,CAAW,CAAA,EAAGC,CAAM,CAAA,OAAO,CAAG,CAAA,CAAA,CAAA,CACnFkI,CACDA,GAAAA,CAAAA,CAA+B,KAAM,CAAA,OAAA,CAAUD,CAAO,CAAA,EAAA,CAAK,MAG7DnH,CAAAA,CAAAA,CAAAA,CAA0B,SAAU,CAAA,MAAA,CAAO,IAAK,CAAA,MAAA,CAAO,YAAcmH,CAAAA,CAAI,EAC5E,CAEQ,SAAUnH,CAAAA,CAAAA,CAAoBC,CAAoB,CAAA,CACxD,IAAMoH,CAAAA,CAAe,IAAK,CAAA,aAAA,CAAcrH,CAAW,CAAA,CAAA,CAAA,EAAIf,CAAW,CAAA,EAAGC,CAAM,CAAA,KAAK,CAAG,CAAA,CAAA,CAAA,CAC/EmI,CACFA,GAAAA,CAAAA,CAAa,WAAcpH,CAAAA,CAAAA,CAAM,OAChCoH,CAAAA,CAAAA,CAA6B,KAAM,CAAA,OAAA,CAAU,EAG/CrH,CAAAA,CAAAA,CAAAA,CAA0B,SAAU,CAAA,GAAA,CAAI,IAAK,CAAA,MAAA,CAAO,UAAU,CAAA,CAC/D,IAAK,CAAA,GAAA,CAAI,iBAAmBC,CAAAA,CAAK,EACnC,CAEQ,aAAcmB,CAAAA,CAAAA,CAA4BkG,CAAmBC,CAAAA,CAAAA,CAAmB,CACtF,IAAML,CAAQ,CAAA,IAAI,WAAY,CAAA,CAAA,OAAA,EAAUI,CAAS,CAAA,CAAA,CAAI,CAAE,MAAA,CAAAC,CAAO,CAAC,CAC/DnG,CAAAA,CAAAA,CAAO,aAAc8F,CAAAA,CAAK,EAC5B,CAEQ,GAAIM,CAAAA,CAAAA,CAAAA,GAAoBC,CAAmB,CAAA,CAC7C,IAAK,CAAA,MAAA,CAAO,KACd,EAAA,OAAA,CAAQ,GAAI,CAAA,CAAA,gBAAA,EAAmBD,CAAO,CAAA,CAAA,CAAI,GAAGC,CAAI,EAErD,CACF,EAKA,SAASC,CAAiB,EAAA,CACxB,IAAMC,CAAAA,CAAgB,QAAS,CAAA,cAAA,CAAe,eAAe,CAAA,CAC7D,GAAI,CAACA,CAAe,CAAA,CAClB,OAAQ,CAAA,IAAA,CAAK,mEAAmE,CAAA,CAChF,MACF,CAEA,GAAI,CACF,IAAM/H,CAAAA,CAAS,IAAK,CAAA,KAAA,CAAM+H,CAAc,CAAA,WAAA,EAAe,IAAI,CAAA,CAG3D,GAAI,CAAC/H,CAAO,CAAA,MAAA,CAAQ,CAClB,OAAA,CAAQ,KAAM,CAAA,gDAAgD,CAC9D,CAAA,MACF,CAEA,GAAI,CAACA,CAAAA,CAAO,OAAS,CAAA,CACnB,OAAQ,CAAA,KAAA,CAAM,mDAAmD,CAAA,CACjE,MACF,CAeA,UAZ0B,CAAA,IAAM,CAC9B,IAAMgI,CAAU,CAAA,IAAIjI,CAAqBC,CAAAA,CAAM,CAG9C,CAAA,MAAA,CAAe,aAAgBgI,CAAAA,CAAAA,CAEhCA,CAAQ,CAAA,IAAA,EAAO,CAAA,KAAA,CAAM3H,CAAS,EAAA,CAC5B,OAAQ,CAAA,KAAA,CAAM,gDAAkDA,CAAAA,CAAK,EACvE,CAAC,EACH,CAAA,CAG8B,GAAG,EAEnC,CAASA,MAAAA,CAAAA,CAAO,CACd,OAAA,CAAQ,KAAM,CAAA,yCAAA,CAA2CA,CAAK,EAChE,CACF,CAGI,QAAS,CAAA,UAAA,GAAe,SAC1B,CAAA,QAAA,CAAS,gBAAiB,CAAA,kBAAA,CAAoByH,CAAQ,CAAA,CAC7C,QAAS,CAAA,UAAA,GAAe,aAEjC,CAAA,UAAA,CAAWA,CAAU,CAAA,EAAE,EAGvBA,CAAS,EAAA","file":"index.mjs","sourcesContent":["import { ContraClient, utils } from '@contra/client';\nimport type {\n  ExpertProfile,\n  ExpertFilters,\n  FilterChangeEvent,\n  ExpertLoadEvent,\n  ErrorEvent,\n  ExpertField\n} from '@contra/types';\n\n/**\n * Webflow Runtime for Contra Experts\n * Features: Performance optimization, filtering, error handling, loading states\n */\n\n// Configuration interface\ninterface RuntimeConfig {\n  apiKey: string;\n  program?: string;  // Program ID from config\n  debug?: boolean;\n  loadingClass?: string;\n  errorClass?: string;\n  emptyClass?: string;\n  autoReload?: boolean;\n  debounceDelay?: number;\n  maxRetries?: number;\n  \n  // Pagination Configuration\n  paginationMode?: 'traditional' | 'infinite' | 'hybrid';\n  infiniteScrollThreshold?: number;        // Pixels from bottom to trigger load\n  preloadNextPage?: boolean;              // Preload next page for performance\n  maxCachedPages?: number;                // Max pages to keep in memory\n  smoothScrollBehavior?: 'auto' | 'smooth';\n  loadMoreText?: string;                  // Custom \"Load More\" button text\n  \n  // Video configuration\n  videoAutoplay?: boolean;\n  videoHoverPlay?: boolean;\n  videoMuted?: boolean;\n  videoLoop?: boolean;\n  videoControls?: boolean;\n}\n\n// Attribute constants\nconst ATTR_PREFIX = 'data-contra-';\nconst ATTRS = {\n  // Core attributes\n  program: 'program',\n  template: 'template',\n  loading: 'loading',\n  error: 'error',\n  empty: 'empty',\n  \n  // Field binding\n  field: 'field',\n  format: 'format',\n  \n  // Repeating elements\n  repeat: 'repeat',\n  max: 'max',\n  \n  // Filter controls\n  filter: 'filter',\n  filterType: 'filter-type',\n  \n  // Filter attributes\n  available: 'available',\n  \n  // Sorting and pagination\n  sort: 'sort',\n  page: 'page',\n  limit: 'limit',\n  \n  // Pagination mode and controls\n  paginationMode: 'pagination-mode',\n  infiniteLoading: 'infinite-loading',\n  paginationInfo: 'pagination-info',\n  \n  // UI states\n  showWhen: 'show-when',\n  hideWhen: 'hide-when',\n  \n  // Actions\n  action: 'action',\n  target: 'target'\n} as const;\n\n// State management\nclass RuntimeState {\n  private states = new Map<string, {\n    filters: ExpertFilters;\n    experts: ExpertProfile[];\n    loading: boolean;\n    error: Error | null;\n    currentPage: number;\n    totalCount: number;\n    // Advanced pagination state\n    cachedPages: Map<number, ExpertProfile[]>;\n    loadingPages: Set<number>;\n    hasNextPage: boolean;\n    hasPreviousPage: boolean;\n    isInfiniteLoading: boolean;\n    lastScrollPosition: number;\n    paginationMode: 'traditional' | 'infinite' | 'hybrid';\n  }>();\n\n  getState(programId: string) {\n    if (!this.states.has(programId)) {\n      this.states.set(programId, {\n        filters: {},\n        experts: [],\n        loading: false,\n        error: null,\n        currentPage: 1,\n        totalCount: 0,\n        // Advanced pagination defaults\n        cachedPages: new Map(),\n        loadingPages: new Set(),\n        hasNextPage: false,\n        hasPreviousPage: false,\n        isInfiniteLoading: false,\n        lastScrollPosition: 0,\n        paginationMode: 'traditional'\n      });\n    }\n    return this.states.get(programId)!;\n  }\n\n  updateState(programId: string, updates: Partial<ReturnType<RuntimeState['getState']>>) {\n    const state = this.getState(programId);\n    Object.assign(state, updates);\n    this.states.set(programId, state);\n  }\n\n  // Advanced pagination helpers\n  cachePage(programId: string, pageNumber: number, experts: ExpertProfile[]) {\n    const state = this.getState(programId);\n    state.cachedPages.set(pageNumber, experts);\n    \n    // Implement LRU cache cleanup\n    if (state.cachedPages.size > 5) { // maxCachedPages from config\n      const oldestPage = Math.min(...state.cachedPages.keys());\n      state.cachedPages.delete(oldestPage);\n    }\n  }\n\n  getCachedPage(programId: string, pageNumber: number): ExpertProfile[] | null {\n    const state = this.getState(programId);\n    return state.cachedPages.get(pageNumber) || null;\n  }\n\n  setPageLoading(programId: string, pageNumber: number, loading: boolean) {\n    const state = this.getState(programId);\n    if (loading) {\n      state.loadingPages.add(pageNumber);\n    } else {\n      state.loadingPages.delete(pageNumber);\n    }\n  }\n\n  isPageLoading(programId: string, pageNumber: number): boolean {\n    const state = this.getState(programId);\n    return state.loadingPages.has(pageNumber);\n  }\n}\n\n/**\n * Main Runtime Class\n */\nexport class ContraWebflowRuntime {\n  private client: ContraClient;\n  private config: Required<RuntimeConfig>;\n  private state = new RuntimeState();\n  private debouncedReload: Map<string, () => void> = new Map();\n\n  constructor(config: RuntimeConfig) {\n    this.config = {\n      debug: false,\n      program: '',  // Default empty program\n      loadingClass: 'loading',\n      errorClass: 'error',\n      emptyClass: 'empty',\n      autoReload: true,\n      debounceDelay: 300,\n      maxRetries: 3,\n      // Pagination Configuration defaults\n      paginationMode: 'traditional',\n      infiniteScrollThreshold: 500,\n      preloadNextPage: true,\n      maxCachedPages: 5,\n      smoothScrollBehavior: 'auto',\n      loadMoreText: 'Load More',\n      // Video configuration defaults\n      videoAutoplay: false,      // No autoplay by default (better UX)\n      videoHoverPlay: true,       // Hover to play by default\n      videoMuted: true,           // Muted for autoplay compatibility\n      videoLoop: true,            // Loop videos\n      videoControls: false,       // No controls for cleaner look\n      ...config\n    };\n\n    this.client = new ContraClient({\n      apiKey: this.config.apiKey,\n      debug: this.config.debug\n    });\n\n    this.log('Runtime initialized', this.config);\n  }\n\n  /**\n   * Initialize the runtime and find all expert containers\n   */\n  async init(): Promise<void> {\n    this.log('Initializing runtime...');\n\n    try {\n      // Find all expert containers\n      const allContainers = this.findExpertContainers();\n      // Filter out already initialized containers\n      const containers = allContainers.filter(container => \n        !container.hasAttribute('data-contra-initialized')\n      );\n      \n      this.log(`Found ${containers.length} uninitialised expert containers (${allContainers.length} total)`);\n\n      // Initialize each container\n      for (const container of containers) {\n        await this.initContainer(container);\n      }\n\n      this.log('Runtime initialization complete');\n    } catch (error) {\n      this.log('Runtime initialization failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize a single expert container\n   */\n  private async initContainer(container: Element): Promise<void> {\n    // Get program ID from config instead of element attribute\n    const programId = this.config.program;\n    if (!programId) {\n      this.log('No program ID found in config', container);\n      return;\n    }\n\n    this.log(`Initializing container for program: ${programId}`);\n\n    try {\n      // Setup container state\n      this.setupContainer(container, programId);\n      \n      // Wire up filter controls\n      this.wireFilterControls(container, programId);\n      \n      // Wire up action buttons\n      this.wireActionButtons(container, programId);\n      \n      // Load initial data\n      await this.loadExperts(container, programId);\n\n    } catch (error) {\n      this.log(`Failed to initialize container for program ${programId}`, error);\n      this.showError(container, error as Error);\n    }\n  }\n\n  /**\n   * Setup container with initial state and classes\n   */\n  private setupContainer(container: Element, programId: string): void {\n    const element = container as HTMLElement;\n    \n    // Add runtime classes and unique identifier\n    element.classList.add('contra-runtime');\n    element.setAttribute('data-contra-initialized', 'true');\n    element.setAttribute('data-program-id', programId); // Still set this for internal use\n    \n    // Parse initial filters from attributes\n    const initialFilters = this.parseFiltersFromElement(container);\n    \n    // Determine pagination mode\n    const paginationMode = this.determinePaginationMode(container);\n    \n    this.state.updateState(programId, { \n      filters: initialFilters,\n      paginationMode: paginationMode\n    });\n    \n    // Setup pagination\n    this.setupPagination(container, programId, paginationMode);\n    \n    // Create debounced reload function\n    const debouncedReload = utils.debounce(() => {\n      this.loadExperts(container, programId);\n    }, this.config.debounceDelay);\n    \n    this.debouncedReload.set(programId, debouncedReload);\n    \n    this.log(`Container setup complete for program: ${programId}`, { initialFilters, paginationMode });\n  }\n\n  /**\n   * Determine pagination mode from container attributes or config\n   */\n  private determinePaginationMode(container: Element): 'traditional' | 'infinite' | 'hybrid' {\n    const explicitMode = this.getAttr(container, 'pagination-mode') as 'traditional' | 'infinite' | 'hybrid';\n    return explicitMode || this.config.paginationMode;\n  }\n\n  /**\n   * Setup pagination system based on mode\n   */\n  private setupPagination(container: Element, programId: string, mode: 'traditional' | 'infinite' | 'hybrid'): void {\n    this.log(`Setting up ${mode} pagination for program: ${programId}`);\n    \n    if (mode === 'infinite' || mode === 'hybrid') {\n      this.setupInfiniteScroll(container, programId);\n    }\n    \n    if (mode === 'traditional' || mode === 'hybrid') {\n      this.setupTraditionalPagination(container, programId);\n    }\n    \n    // Setup load more button for hybrid/infinite modes\n    if (mode === 'infinite' || mode === 'hybrid') {\n      this.setupLoadMoreButton(container, programId);\n    }\n  }\n\n  /**\n   * Setup infinite scroll functionality\n   */\n  private setupInfiniteScroll(container: Element, programId: string): void {\n    let isScrolling = false;\n    \n    const handleScroll = utils.throttle(() => {\n      if (isScrolling) return;\n      \n      const state = this.state.getState(programId);\n      if (state.isInfiniteLoading || !state.hasNextPage) return;\n      \n      const scrollPosition = window.scrollY + window.innerHeight;\n      const documentHeight = document.documentElement.scrollHeight;\n      const threshold = this.config.infiniteScrollThreshold;\n      \n      if (scrollPosition >= documentHeight - threshold) {\n        isScrolling = true;\n        this.loadNextPageInfinite(container, programId).finally(() => {\n          isScrolling = false;\n        });\n      }\n    }, 100);\n    \n    window.addEventListener('scroll', handleScroll);\n    \n    // Store cleanup function\n    (container as any).__infiniteScrollCleanup = () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }\n\n  /**\n   * Setup traditional pagination button states\n   */\n  private setupTraditionalPagination(container: Element, programId: string): void {\n    // Will be handled in updatePaginationControls\n    this.updatePaginationControls(container, programId);\n  }\n\n  /**\n   * Setup load more button for infinite scroll\n   */\n  private setupLoadMoreButton(container: Element, programId: string): void {\n    const loadMoreButtons = this.querySelectorAll(container, '[data-contra-action=\"load-more\"]');\n    \n    loadMoreButtons.forEach(button => {\n      if (!button.textContent?.trim()) {\n        button.textContent = this.config.loadMoreText;\n      }\n    });\n  }\n\n  /**\n   * Wire up filter controls to auto-update\n   */\n  private wireFilterControls(container: Element, programId: string): void {\n    const filterControls = this.querySelectorAll(container, `[${ATTR_PREFIX}${ATTRS.filter}]`);\n    \n    this.log(`Found ${filterControls.length} filter controls for program: ${programId}`);\n\n    filterControls.forEach(control => {\n      const filterKey = this.getAttr(control, ATTRS.filter);\n      const filterType = this.getAttr(control, ATTRS.filterType) || 'replace';\n      \n      if (!filterKey) return;\n\n      // Add event listeners based on control type\n      if (control instanceof HTMLInputElement) {\n        const eventType = control.type === 'range' || control.type === 'number' ? 'input' : 'change';\n        \n        control.addEventListener(eventType, () => {\n          this.updateFilter(programId, filterKey, this.getControlValue(control), filterType);\n          if (this.config.autoReload) {\n            this.debouncedReload.get(programId)?.();\n          }\n        });\n        \n      } else if (control instanceof HTMLSelectElement) {\n        control.addEventListener('change', () => {\n          this.updateFilter(programId, filterKey, this.getControlValue(control), filterType);\n          if (this.config.autoReload) {\n            this.debouncedReload.get(programId)?.();\n          }\n        });\n      }\n      \n      this.log(`Wired filter control: ${filterKey} (${filterType})`, control);\n    });\n  }\n\n  /**\n   * Wire up action buttons (pagination, sorting, etc.)\n   */\n  private wireActionButtons(container: Element, programId: string): void {\n    const actionButtons = this.querySelectorAll(container, `[${ATTR_PREFIX}${ATTRS.action}]`);\n    \n    actionButtons.forEach(button => {\n      const action = this.getAttr(button, ATTRS.action);\n      const target = this.getAttr(button, ATTRS.target);\n      \n      if (!action) return;\n\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.handleAction(programId, action, target, button);\n      });\n    });\n  }\n\n  /**\n   * Load experts for a program\n   */\n  private async loadExperts(container: Element, programId: string, isPageNavigation = false): Promise<void> {\n    const state = this.state.getState(programId);\n    \n    this.log(`Loading experts for program: ${programId}`, state.filters);\n\n    try {\n      // Show loading state\n      this.showLoading(container, true);\n      this.state.updateState(programId, { loading: true, error: null });\n\n      // Check cache first for page navigation\n      const currentPage = Math.floor((state.filters.offset || 0) / (state.filters.limit || 20)) + 1;\n      if (isPageNavigation && state.paginationMode === 'traditional') {\n        const cachedExperts = this.state.getCachedPage(programId, currentPage);\n        if (cachedExperts) {\n          this.log(`Using cached page ${currentPage}`);\n          this.renderExperts(container, cachedExperts);\n          this.state.updateState(programId, { \n            experts: cachedExperts, \n            currentPage: currentPage,\n            loading: false \n          });\n          this.updatePaginationControls(container, programId);\n          this.showLoading(container, false);\n          return;\n        }\n      }\n\n      // Fetch experts\n      const response = await this.client.listExperts(programId, state.filters);\n      \n      this.log(`Loaded ${response.data.length} experts`, response);\n\n      // Calculate pagination state - simplified to match React implementation\n      const limit = state.filters.limit || 20;\n      const offset = state.filters.offset || 0;\n      const page = Math.floor(offset / limit) + 1;\n      const totalPages = Math.ceil(response.totalCount / limit);\n      \n      // Simple pagination logic like React: if we got a full page, there might be more\n      const hasNextPage = response.data.length === limit;\n      const hasPreviousPage = page > 1;\n\n      // Update state with pagination info\n      this.state.updateState(programId, {\n        experts: response.data,\n        totalCount: response.totalCount,\n        currentPage: page,\n        hasNextPage: hasNextPage,\n        hasPreviousPage: hasPreviousPage,\n        loading: false\n      });\n\n      // Cache the page\n      this.state.cachePage(programId, page, response.data);\n\n      // Render experts\n      this.renderExperts(container, response.data);\n      \n      // Update UI states including pagination\n      this.updateUIStates(container, programId);\n      this.updatePaginationControls(container, programId);\n      \n      // Dispatch event\n      this.dispatchEvent(container, 'expertsLoaded', {\n        experts: response.data,\n        totalCount: response.totalCount,\n        filters: state.filters,\n        page: page,\n        totalPages: totalPages,\n        hasNextPage: hasNextPage,\n        hasPreviousPage: hasPreviousPage\n      } as ExpertLoadEvent);\n\n    } catch (error) {\n      this.log(`Failed to load experts for program: ${programId}`, error);\n      \n      this.state.updateState(programId, { \n        loading: false, \n        error: error as Error \n      });\n      \n      this.showError(container, error as Error);\n      \n      // Dispatch error event\n      this.dispatchEvent(container, 'expertsError', {\n        error: error as Error,\n        context: `Loading experts for program ${programId}`\n      } as ErrorEvent);\n    } finally {\n      this.showLoading(container, false);\n    }\n  }\n\n  /**\n   * Render experts into the container\n   */\n  private renderExperts(container: Element, experts: ExpertProfile[]): void {\n    const template = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    if (!template) {\n      this.log('No template found in container', container);\n      return;\n    }\n\n    // Clear only previously rendered expert cards\n    const existingCards = this.querySelectorAll(container, '.contra-rendered-item');\n    existingCards.forEach(card => card.remove());\n\n    // Render expert cards\n    experts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert);\n      container.appendChild(expertCard);\n    });\n\n    this.log(`Rendered ${experts.length} expert cards`);\n  }\n\n  /**\n   * Populate expert card from template\n   */\n  private populateExpertCard(template: Element, expert: ExpertProfile): Element {\n    const card = template.cloneNode(true) as Element;\n    \n    // Add a marker class to identify this as a rendered card\n    card.classList.add('contra-rendered-item');\n    \n    // Remove template attribute and show the card\n    card.removeAttribute(`${ATTR_PREFIX}${ATTRS.template}`);\n    (card as HTMLElement).style.display = '';\n\n    // Populate field bindings\n    this.populateFields(card, expert);\n    \n    // Handle repeating elements (projects, social links)\n    this.populateRepeatingElements(card, expert);\n    \n    // Handle conditional display\n    this.handleConditionalDisplay(card, expert);\n\n    return card;\n  }\n\n  /**\n   * Populate data fields in the card\n   */\n  private populateFields(card: Element, expert: ExpertProfile): void {\n    const fieldElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.field}]`);\n    \n    fieldElements.forEach(element => {\n      const fieldName = this.getAttr(element, ATTRS.field) as ExpertField;\n      const format = this.getAttr(element, ATTRS.format);\n      \n      if (!fieldName || !(fieldName in expert)) return;\n\n      const value = expert[fieldName];\n      this.setElementValue(element, value, format);\n    });\n\n    // Handle star ratings\n    const starsElements = this.querySelectorAll(card, '[data-contra-stars]');\n    starsElements.forEach(element => {\n      if (expert.averageReviewScore) {\n        this.renderStarRating(element, expert.averageReviewScore);\n      }\n    });\n  }\n\n  /**\n   * Set element value with proper formatting\n   */\n  private setElementValue(element: Element, value: any, format?: string | null): void {\n    if (value == null || value === '') return;\n\n    // Media type detection and handling\n    if (this.isMediaField(element) && typeof value === 'string' && value.trim()) {\n      this.setMediaValue(element, value);\n      return;\n    }\n\n    if (element instanceof HTMLAnchorElement) {\n      element.href = String(value);\n      if (!element.textContent?.trim()) {\n        element.textContent = String(value);\n      }\n    } else if (element instanceof HTMLInputElement) {\n      element.value = String(value);\n    } else if (element instanceof HTMLImageElement) {\n      // Regular image handling for avatars and other images\n      element.src = String(value);\n      element.alt = element.alt || 'Image';\n    } else {\n      // Text content with formatting\n      let displayValue = String(value);\n      \n      if (format) {\n        switch (format) {\n          case 'currency':\n            displayValue = typeof value === 'number' ? `$${value}` : displayValue;\n            break;\n          case 'rate':\n            displayValue = utils.formatRate(typeof value === 'number' ? value : null);\n            break;\n          case 'rating':\n            // Format rating to one decimal place (5.0, 4.9, etc.)\n            displayValue = typeof value === 'number' ? value.toFixed(1) : displayValue;\n            break;\n          case 'earnings':\n            // Format earnings like $25k+\n            if (typeof value === 'number') {\n              if (value >= 1000000) {\n                displayValue = `$${Math.floor(value / 1000000)}M+`;\n              } else if (value >= 1000) {\n                displayValue = `$${Math.floor(value / 1000)}k+`;\n              } else {\n                displayValue = `$${value}`;\n              }\n            }\n            break;\n          case 'number':\n            displayValue = typeof value === 'number' ? value.toLocaleString() : displayValue;\n            break;\n          case 'truncate':\n            displayValue = displayValue.length > 100 ? displayValue.substring(0, 97) + '...' : displayValue;\n            break;\n          case 'boolean':\n            displayValue = value ? 'Yes' : 'No';\n            break;\n          case 'availability':\n            displayValue = value ? 'Available' : 'Not Available';\n            break;\n        }\n      }\n      \n      element.textContent = displayValue;\n    }\n  }\n\n  /**\n   * Star rating rendering with optional text display\n   */\n  private renderStarRating(element: Element, rating: number): void {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    let starsHtml = '';\n    \n    // Full stars\n    for (let i = 0; i < fullStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-full\">★</span>';\n    }\n    \n    // Half star\n    if (hasHalfStar) {\n      starsHtml += '<span class=\"contra-star contra-star-half\">★</span>';\n    }\n    \n    // Empty stars\n    for (let i = 0; i < emptyStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-empty\">☆</span>';\n    }\n    \n    element.innerHTML = starsHtml;\n    \n    // Also update any rating text elements in the same card\n    const card = element.closest('[data-contra-template]') || element.closest('.expert-card');\n    if (card) {\n      const ratingTextElements = this.querySelectorAll(card, '[data-contra-rating-text]');\n      ratingTextElements.forEach(textElement => {\n        textElement.textContent = rating.toFixed(1);\n      });\n    }\n  }\n\n  /**\n   * Media type detection and element handling\n   */\n  private isMediaField(element: Element): boolean {\n    const field = this.getAttr(element, ATTRS.field);\n    // Only apply advanced media handling to project cover URLs, not avatars\n    return field === 'coverUrl';\n  }\n\n  /**\n   * Media value setting with automatic type detection\n   */\n  private setMediaValue(element: Element, url: string): void {\n    const mediaType = this.detectMediaType(url);\n    const parent = element.parentElement;\n    \n    if (!parent) {\n      this.log('Media element has no parent for replacement', element);\n      return;\n    }\n\n    // Remove existing media element\n    element.remove();\n\n    // Create appropriate media element\n    let mediaElement: HTMLElement;\n    \n    switch (mediaType) {\n      case 'video':\n        mediaElement = this.createVideoElement(url, element);\n        break;\n      case 'image':\n      default:\n        mediaElement = this.createImageElement(url, element);\n        break;\n    }\n\n    // Preserve classes and attributes from original element\n    this.transferAttributes(element, mediaElement);\n    \n    // Insert new media element\n    parent.appendChild(mediaElement);\n    \n    this.log(`Created ${mediaType} element for URL: ${url}`);\n  }\n\n  /**\n   * Detect media type from URL\n   */\n  private detectMediaType(url: string): 'image' | 'video' {\n    if (!url || typeof url !== 'string') {\n      this.log('Invalid URL provided to detectMediaType:', url);\n      return 'image';\n    }\n    \n    const urlLower = url.toLowerCase();\n    \n    // Video formats\n    const videoExtensions = ['.mp4', '.webm', '.mov', '.avi', '.mkv', '.ogg'];\n    const isVideo = videoExtensions.some(ext => urlLower.includes(ext));\n    \n    // Special handling for Cloudinary video URLs\n    const isCloudinaryVideo = urlLower.includes('cloudinary.com/') && urlLower.includes('/video/');\n    \n    return (isVideo || isCloudinaryVideo) ? 'video' : 'image';\n  }\n\n  /**\n   * Create video element with fallback\n   */\n  private createVideoElement(url: string, originalElement: Element): HTMLVideoElement {\n    const video = document.createElement('video');\n    \n    // Video attributes\n    video.src = url;\n    video.muted = this.config.videoMuted;\n    video.loop = this.config.videoLoop;\n    video.playsInline = true;\n    video.preload = 'metadata';\n    video.controls = this.config.videoControls;\n    \n    // Maintain aspect ratio and object-fit from original\n    video.style.width = '100%';\n    video.style.height = '100%';\n    video.style.objectFit = 'cover';\n    video.style.borderRadius = 'inherit';\n    \n    // Autoplay configuration\n    if (this.config.videoAutoplay) {\n      video.autoplay = true;\n      video.setAttribute('autoplay', '');\n    }\n    \n    // Error handling with fallback to poster or placeholder\n    video.onerror = () => {\n      this.log(`Video failed to load: ${url}`);\n      // Try to extract a thumbnail from Cloudinary video URL\n      const posterUrl = this.extractVideoThumbnail(url);\n      if (posterUrl) {\n        const fallbackImg = this.createImageElement(posterUrl, originalElement);\n        video.parentElement?.replaceChild(fallbackImg, video);\n      } else {\n        // Show placeholder\n        video.style.background = '#f3f4f6';\n        video.style.position = 'relative';\n        video.innerHTML = '<div style=\"position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);color:#9ca3af;font-size:12px;\">Video unavailable</div>';\n      }\n    };\n\n    // Hover-to-play functionality (if enabled and not autoplay)\n    if (this.config.videoHoverPlay && !this.config.videoAutoplay) {\n      video.addEventListener('mouseenter', () => {\n        video.currentTime = 0;\n        video.play().catch(() => {\n          // Ignore play errors (browser policies)\n        });\n      });\n\n      video.addEventListener('mouseleave', () => {\n        video.pause();\n        video.currentTime = 0;\n      });\n    }\n\n    return video;\n  }\n\n  /**\n   * Create image element with error handling\n   */\n  private createImageElement(url: string, originalElement: Element): HTMLImageElement {\n    const img = document.createElement('img');\n    \n    img.src = url;\n    img.alt = originalElement.getAttribute('alt') || 'Media content';\n    img.loading = 'lazy';\n    \n    // Maintain styling\n    img.style.width = '100%';\n    img.style.height = '100%';\n    img.style.objectFit = 'cover';\n    img.style.borderRadius = 'inherit';\n    \n    // Error handling\n    img.onerror = () => {\n      this.log(`Image failed to load: ${url}`);\n      img.style.background = '#f3f4f6';\n      img.style.opacity = '0.5';\n      img.alt = 'Image unavailable';\n      \n      // Add broken image icon\n      img.style.position = 'relative';\n      const placeholder = document.createElement('div');\n      placeholder.style.cssText = `\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        color: #9ca3af;\n        font-size: 12px;\n        text-align: center;\n      `;\n      placeholder.textContent = '🖼️ Image unavailable';\n      img.parentElement?.appendChild(placeholder);\n    };\n\n    return img;\n  }\n\n  /**\n   * Extract video thumbnail from Cloudinary URL\n   */\n  private extractVideoThumbnail(videoUrl: string): string | null {\n    if (videoUrl.includes('cloudinary.com/') && videoUrl.includes('/video/')) {\n      // Convert video URL to image thumbnail\n      return videoUrl\n        .replace('/video/', '/image/')\n        .replace(/\\.(mp4|webm|mov|avi|mkv)$/i, '.jpg')\n        .replace('fl_progressive', 'f_auto,q_auto,c_fill');\n    }\n    return null;\n  }\n\n  /**\n   * Transfer attributes and classes from old element to new\n   */\n  private transferAttributes(from: Element, to: HTMLElement): void {\n    // Transfer classes\n    if (from.className) {\n      to.className = from.className;\n    }\n    \n    // Transfer data attributes (except contra-field)\n    Array.from(from.attributes).forEach(attr => {\n      if (attr.name.startsWith('data-') && attr.name !== `${ATTR_PREFIX}${ATTRS.field}`) {\n        to.setAttribute(attr.name, attr.value);\n      }\n    });\n    \n    // Transfer style\n    if (from.getAttribute('style')) {\n      const existingStyle = to.getAttribute('style') || '';\n      to.setAttribute('style', existingStyle + '; ' + from.getAttribute('style'));\n    }\n  }\n\n  /**\n   * Handle repeating elements (projects, social links)\n   */\n  private populateRepeatingElements(card: Element, expert: ExpertProfile): void {\n    const repeatElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.repeat}]`);\n    \n    repeatElements.forEach(container => {\n      const repeatType = this.getAttr(container, ATTRS.repeat);\n      const maxItems = parseInt(this.getAttr(container, ATTRS.max) || '10');\n      \n      if (repeatType === 'projects' && expert.projects) {\n        this.populateRepeatingContainer(container, expert.projects.slice(0, maxItems));\n      } else if (repeatType === 'socialLinks' && expert.socialLinks) {\n        this.populateRepeatingContainer(container, expert.socialLinks.slice(0, maxItems));\n      } else if (repeatType === 'skillTags' && expert.skillTags) {\n        this.populateRepeatingContainer(container, expert.skillTags.slice(0, maxItems).map((tag: string) => ({ name: tag })));\n      }\n    });\n  }\n\n  /**\n   * Populate a repeating container with items\n   */\n  private populateRepeatingContainer(container: Element, items: any[]): void {\n    const template = container.firstElementChild;\n    if (!template) return;\n\n    // Clear existing items\n    container.innerHTML = '';\n    \n    // Create items from template\n    items.forEach(item => {\n      const itemElement = template.cloneNode(true) as Element;\n      this.populateFields(itemElement, item);\n      container.appendChild(itemElement);\n    });\n    \n    // Hide container if no items\n    if (items.length === 0) {\n      (container as HTMLElement).style.display = 'none';\n    }\n  }\n\n  /**\n   * Handle conditional display based on data\n   */\n  private handleConditionalDisplay(card: Element, expert: ExpertProfile): void {\n    const conditionalElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.showWhen}], [${ATTR_PREFIX}${ATTRS.hideWhen}]`);\n    \n    conditionalElements.forEach(element => {\n      const showWhen = this.getAttr(element, ATTRS.showWhen);\n      const hideWhen = this.getAttr(element, ATTRS.hideWhen);\n      \n      let shouldShow = true;\n      \n      if (showWhen) {\n        shouldShow = this.evaluateCondition(expert, showWhen);\n      }\n      \n      if (hideWhen) {\n        shouldShow = shouldShow && !this.evaluateCondition(expert, hideWhen);\n      }\n      \n      (element as HTMLElement).style.display = shouldShow ? '' : 'none';\n    });\n  }\n\n  /**\n   * Evaluate a condition against expert data\n   */\n  private evaluateCondition(expert: ExpertProfile, condition: string): boolean {\n    if (!condition || typeof condition !== 'string') {\n      this.log('Invalid condition provided:', condition);\n      return false;\n    }\n    \n    // Parse condition: \"field:value\" or \"field:>value\" etc.\n    const parts = condition.split(':');\n    if (parts.length < 2) {\n      this.log('Invalid condition format:', condition);\n      return false;\n    }\n    \n    const field = parts[0];\n    const restOfCondition = parts.slice(1).join(':'); // Handle colons in values\n    const expertValue = (expert as any)[field];\n    \n    this.log(`Evaluating condition: ${field} (${expertValue}, type: ${typeof expertValue}) against ${restOfCondition}`);\n    \n    if (expertValue == null) {\n      this.log(`Field '${field}' is null/undefined, condition fails`);\n      return false;\n    }\n    \n    // Check for comparison operators\n    if (restOfCondition.startsWith('>=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) >= Number(value);\n      this.log(`Comparison: ${expertValue} >= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) <= Number(value);\n      this.log(`Comparison: ${expertValue} <= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('>')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) > Number(value);\n      this.log(`Comparison: ${expertValue} > ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) < Number(value);\n      this.log(`Comparison: ${expertValue} < ${value} = ${result}`);\n      return result;\n    } else {\n      // Direct value comparison with type-aware handling\n      let result = false;\n      \n      // Handle boolean fields specially\n      if (typeof expertValue === 'boolean') {\n        // Convert string condition to boolean for comparison\n        if (restOfCondition.toLowerCase() === 'true') {\n          result = expertValue === true;\n        } else if (restOfCondition.toLowerCase() === 'false') {\n          result = expertValue === false;\n        } else {\n          result = false;\n        }\n        this.log(`Boolean comparison: ${expertValue} === ${restOfCondition.toLowerCase() === 'true'} = ${result}`);\n      } else if (typeof expertValue === 'number') {\n        // Handle numeric comparisons\n        const numValue = Number(restOfCondition);\n        result = !isNaN(numValue) && expertValue === numValue;\n        this.log(`Number comparison: ${expertValue} === ${numValue} = ${result}`);\n      } else {\n        // String comparison (case-insensitive)\n        const expertStr = String(expertValue);\n        const valueStr = String(restOfCondition);\n        result = expertStr.toLowerCase() === valueStr.toLowerCase();\n        this.log(`String comparison: '${expertStr}' === '${valueStr}' = ${result}`);\n      }\n      \n      return result;\n    }\n  }\n\n  /**\n   * Update UI states based on current data\n   */\n  private updateUIStates(container: Element, programId: string): void {\n    const state = this.state.getState(programId);\n    \n    // Show/hide empty state\n    const emptyElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (emptyElement) {\n      (emptyElement as HTMLElement).style.display = state.experts.length === 0 ? '' : 'none';\n    }\n    \n    // Update pagination info\n    const paginationElements = this.querySelectorAll(container, '[data-contra-pagination-info]');\n    paginationElements.forEach(element => {\n      const { currentPage, totalCount } = state;\n      const pageSize = state.filters.limit || 20;\n      const totalPages = Math.ceil(totalCount / pageSize);\n      \n      element.textContent = `Page ${currentPage} of ${totalPages} (${totalCount} total)`;\n    });\n    \n    // Update filter summaries\n    const filterSummaries = this.querySelectorAll(container, '[data-contra-filter-summary]');\n    filterSummaries.forEach(element => {\n      const activeFilters = Object.entries(state.filters)\n        .filter(([_key, value]) => value != null && value !== '')\n        .map(([key, value]) => `${key}: ${value}`)\n        .join(', ');\n      \n      element.textContent = activeFilters || 'No filters applied';\n    });\n  }\n\n  /**\n   * Handle action buttons (pagination, sorting, etc.)\n   */\n  private handleAction(programId: string, action: string, _target?: string | null, button?: Element): void {\n    const state = this.state.getState(programId);\n    const container = document.querySelector(`[data-program-id=\"${programId}\"]`);\n    \n    if (!container) {\n      this.log(`Container not found for program: ${programId}`);\n      return;\n    }\n\n    // Show button feedback\n    if (button && button instanceof HTMLButtonElement) {\n      const originalText = button.textContent;\n      button.disabled = true;\n    }\n    \n    switch (action) {\n      case 'next-page':\n        const limit = state.filters.limit || 20;\n        const nextOffset = (state.filters.offset || 0) + limit;\n        \n        if (nextOffset < state.totalCount) {\n          this.updateFilter(programId, 'offset', nextOffset);\n          // Use page navigation mode for caching\n          setTimeout(() => {\n            this.loadExperts(container as Element, programId, true);\n          }, 0);\n        }\n        break;\n        \n      case 'prev-page':\n        const prevOffset = Math.max(0, (state.filters.offset || 0) - (state.filters.limit || 20));\n        this.updateFilter(programId, 'offset', prevOffset);\n        // Use page navigation mode for caching\n        setTimeout(() => {\n          this.loadExperts(container as Element, programId, true);\n        }, 0);\n        break;\n        \n      case 'load-more':\n        // Handle load more for all pagination modes\n        this.loadMoreExperts(container as Element, programId).finally(() => {\n          if (button && button instanceof HTMLButtonElement) {\n            button.disabled = false;\n          }\n        });\n        return; // Exit early to avoid re-enabling button\n        \n      case 'first-page':\n        this.updateFilter(programId, 'offset', 0);\n        setTimeout(() => {\n          this.loadExperts(container as Element, programId, true);\n        }, 0);\n        break;\n        \n      case 'last-page':\n        const lastPageOffset = Math.max(0, Math.floor((state.totalCount - 1) / (state.filters.limit || 20)) * (state.filters.limit || 20));\n        this.updateFilter(programId, 'offset', lastPageOffset);\n        setTimeout(() => {\n          this.loadExperts(container as Element, programId, true);\n        }, 0);\n        break;\n        \n      case 'clear-filters':\n        // Reset pagination when clearing filters\n        this.state.updateState(programId, { \n          filters: { limit: state.filters.limit }, // Keep limit\n          currentPage: 1,\n          cachedPages: new Map() // Clear cache\n        });\n        if (this.config.autoReload) {\n          this.debouncedReload.get(programId)?.();\n        }\n        break;\n        \n      case 'reload':\n        // Clear cache and reload\n        this.state.updateState(programId, { cachedPages: new Map() });\n        this.client.clearCache(`experts:${programId}`);\n        if (this.config.autoReload) {\n          this.debouncedReload.get(programId)?.();\n        }\n        break;\n    }\n    \n    // Re-enable button after action completes\n    if (button && button instanceof HTMLButtonElement && action !== 'load-more') {\n      setTimeout(() => {\n        button.disabled = false;\n      }, 100);\n    }\n  }\n\n  /**\n   * Load more experts - unified method for all pagination modes\n   */\n  private async loadMoreExperts(container: Element, programId: string): Promise<void> {\n    const state = this.state.getState(programId);\n    const limit = state.filters.limit || 20;\n    \n    // Calculate next offset based on currently loaded experts\n    const currentOffset = state.experts.length;\n    \n    this.log(`Loading more experts: currentOffset=${currentOffset}, limit=${limit}`);\n\n    try {\n      this.state.updateState(programId, { isInfiniteLoading: true });\n      this.updateLoadMoreButtonState(container, programId, true);\n\n      // Fetch next batch - use current expert count as offset\n      const response = await this.client.listExperts(programId, {\n        ...state.filters,\n        offset: currentOffset,\n        limit: limit\n      });\n\n      this.log(`Loaded ${response.data.length} more experts from offset ${currentOffset}`);\n\n      // Append new experts to existing ones (like React implementation)\n      const allExperts = [...state.experts, ...response.data];\n      \n      // Simple pagination logic: if we got a full page, there might be more\n      const hasNextPage = response.data.length === limit;\n      \n      this.state.updateState(programId, {\n        experts: allExperts,\n        totalCount: response.totalCount,\n        hasNextPage: hasNextPage,\n        isInfiniteLoading: false\n      });\n\n      // Render only the new experts (append mode)\n      this.renderNewExperts(container, response.data);\n      \n      // Update pagination controls\n      this.updatePaginationControls(container, programId);\n\n      // Dispatch event\n      this.dispatchEvent(container, 'expertsLoaded', {\n        experts: response.data,\n        totalExperts: allExperts,\n        totalCount: response.totalCount,\n        isLoadMore: true\n      });\n\n    } catch (error) {\n      this.log(`Failed to load more experts`, error);\n      this.state.updateState(programId, { isInfiniteLoading: false });\n      \n      // Show error in load more button\n      this.updateLoadMoreButtonState(container, programId, false, 'Error loading more');\n      \n      setTimeout(() => {\n        this.updateLoadMoreButtonState(container, programId, false);\n      }, 3000);\n    } finally {\n      this.updateLoadMoreButtonState(container, programId, false);\n    }\n  }\n\n  /**\n   * Update load more button state\n   */\n  private updateLoadMoreButtonState(container: Element, programId: string, loading: boolean, errorText?: string): void {\n    const loadMoreButtons = this.querySelectorAll(container, '[data-contra-action=\"load-more\"]');\n    const state = this.state.getState(programId);\n    \n    loadMoreButtons.forEach(button => {\n      const btnElement = button as HTMLButtonElement;\n      \n      if (errorText) {\n        btnElement.textContent = errorText;\n        btnElement.disabled = true;\n        btnElement.classList.add('error');\n        return;\n      }\n      \n      btnElement.classList.remove('error');\n      \n      if (loading) {\n        btnElement.textContent = 'Loading...';\n        btnElement.disabled = true;\n        btnElement.classList.add('loading');\n      } else {\n        btnElement.classList.remove('loading');\n        const hasMore = state.hasNextPage;\n        \n        if (hasMore) {\n          btnElement.textContent = this.config.loadMoreText;\n          btnElement.disabled = false;\n        } else {\n          btnElement.textContent = 'All experts loaded';\n          btnElement.disabled = true;\n          btnElement.classList.add('disabled');\n        }\n      }\n    });\n  }\n\n  /**\n   * Load next page for infinite scroll\n   */\n  private async loadNextPageInfinite(container: Element, programId: string): Promise<void> {\n    // Use the unified loadMoreExperts method\n    return this.loadMoreExperts(container, programId);\n  }\n\n  /**\n   * Update pagination control states\n   */\n  private updatePaginationControls(container: Element, programId: string): void {\n    const state = this.state.getState(programId);\n    const limit = state.filters.limit || 20;\n    const totalPages = Math.ceil(state.totalCount / limit);\n    \n    // Update button states\n    const prevButtons = this.querySelectorAll(container, '[data-contra-action=\"prev-page\"]');\n    const nextButtons = this.querySelectorAll(container, '[data-contra-action=\"next-page\"]');\n\n    // Previous page buttons\n    prevButtons.forEach(button => {\n      const btnElement = button as HTMLButtonElement;\n      btnElement.disabled = state.currentPage <= 1;\n      btnElement.classList.toggle('disabled', state.currentPage <= 1);\n    });\n\n    // Next page buttons\n    nextButtons.forEach(button => {\n      const btnElement = button as HTMLButtonElement;\n      btnElement.disabled = state.currentPage >= totalPages;\n      btnElement.classList.toggle('disabled', state.currentPage >= totalPages);\n    });\n\n    // Update load more buttons\n    this.updateLoadMoreButtonState(container, programId, state.isInfiniteLoading);\n\n    // Update pagination info elements\n    const paginationInfoElements = this.querySelectorAll(container, '[data-contra-pagination-info]');\n    paginationInfoElements.forEach(element => {\n      const loadedCount = state.experts.length;\n      const totalCount = state.totalCount;\n      \n      // Different info based on pagination mode\n      if (state.paginationMode === 'infinite' || state.paginationMode === 'hybrid') {\n        element.textContent = `Showing ${loadedCount} of ${totalCount} experts`;\n      } else {\n        element.textContent = `Page ${state.currentPage} of ${totalPages} (${totalCount} total)`;\n      }\n    });\n\n    this.log(`Pagination controls updated: loaded ${state.experts.length}/${state.totalCount}, hasNext: ${state.hasNextPage}`);\n  }\n\n  /**\n   * Update infinite loading state\n   */\n  private updateInfiniteLoadingState(container: Element, loading: boolean): void {\n    const loadingIndicators = this.querySelectorAll(container, '[data-contra-infinite-loading]');\n    \n    loadingIndicators.forEach(indicator => {\n      (indicator as HTMLElement).style.display = loading ? '' : 'none';\n    });\n  }\n\n  /**\n   * Render new experts for infinite scroll (append mode)\n   */\n  private renderNewExperts(container: Element, newExperts: ExpertProfile[]): void {\n    const template = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    if (!template) {\n      this.log('No template found for rendering new experts', container);\n      return;\n    }\n\n    // Create a document fragment for efficient DOM manipulation\n    const fragment = document.createDocumentFragment();\n\n    newExperts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert);\n      fragment.appendChild(expertCard);\n    });\n\n    // Append all new cards at once\n    container.appendChild(fragment);\n\n    this.log(`Rendered ${newExperts.length} new expert cards for load more`);\n  }\n\n  // ... (utility methods continue below)\n\n  /**\n   * Utility Methods\n   */\n  private getAttr(element: Element, name: string): string | null {\n    return element.getAttribute(`${ATTR_PREFIX}${name}`);\n  }\n\n  private querySelector(element: Element, selector: string): Element | null {\n    return element.querySelector(selector);\n  }\n\n  private querySelectorAll(element: Element, selector: string): Element[] {\n    return Array.from(element.querySelectorAll(selector));\n  }\n\n  private findExpertContainers(): Element[] {\n    this.log('Looking for expert containers...');\n    \n    // A container is now STRICTLY defined as an element with a `data-contra-program` attribute.\n    // This provides a single, reliable source of truth and prevents accidental detection.\n    const containers = Array.from(document.querySelectorAll(`[${ATTR_PREFIX}${ATTRS.program}]`));\n    \n    this.log(`Found ${containers.length} containers with [${ATTR_PREFIX}${ATTRS.program}]`, containers);\n    \n    // If still no containers found, log detailed debugging info\n    if (containers.length === 0) {\n      this.log('❌ No containers found! A container must have the \"data-contra-program\" attribute.');\n      this.log('- Document body HTML:', document.body?.innerHTML?.substring(0, 500) + '...');\n    }\n    \n    return containers;\n  }\n\n  private parseFiltersFromElement(element: Element): ExpertFilters {\n    const filters: ExpertFilters = {};\n    \n    // Parse filter attributes\n    const filterMap = {\n      'available': 'available',\n      'languages': 'languages', \n      'location': 'location',\n      'min-rate': 'minRate',\n      'max-rate': 'maxRate',\n      'sort': 'sortBy',\n      'limit': 'limit',\n      'offset': 'offset'\n    };\n\n    Object.entries(filterMap).forEach(([attr, filterKey]) => {\n      const value = this.getAttr(element, attr);\n      if (value != null) {\n        if (filterKey === 'available') {\n          (filters as any)[filterKey] = value === 'true';\n        } else if (filterKey === 'languages') {\n          (filters as any)[filterKey] = value.split(',').map(v => v.trim());\n        } else if (['minRate', 'maxRate', 'limit', 'offset'].includes(filterKey)) {\n          (filters as any)[filterKey] = parseInt(value);\n        } else {\n          (filters as any)[filterKey] = value;\n        }\n      }\n    });\n\n    // Ensure offset defaults to 0 if not specified\n    if (filters.offset === undefined) {\n      filters.offset = 0;\n    }\n\n    return filters;\n  }\n\n  private getControlValue(control: HTMLInputElement | HTMLSelectElement): any {\n    if (control instanceof HTMLInputElement) {\n      switch (control.type) {\n        case 'checkbox':\n          return control.checked;\n        case 'number':\n        case 'range':\n          return control.valueAsNumber;\n        default:\n          return control.value;\n      }\n    } else if (control instanceof HTMLSelectElement) {\n      if (control.multiple) {\n        return Array.from(control.selectedOptions).map(option => option.value);\n      }\n      return control.value;\n    }\n    return null;\n  }\n\n  private updateFilter(programId: string, filterKey: string, value: any, type: string = 'replace'): void {\n    const state = this.state.getState(programId);\n    const newFilters = { ...state.filters };\n\n    // Handle special cases for filter value conversion\n    let processedValue = value;\n    \n    if (filterKey === 'available') {\n      // Convert string values to boolean for availability filter\n      if (typeof value === 'string') {\n        if (value === 'true') {\n          processedValue = true;\n        } else if (value === 'false') {\n          processedValue = false;\n        } else if (value === '' || value === null) {\n          processedValue = undefined; // No filter\n        }\n      }\n    } else if (filterKey === 'minRate' || filterKey === 'maxRate') {\n      // Convert empty strings to undefined for rate filters\n      if (value === '' || value === null) {\n        processedValue = undefined;\n      } else {\n        processedValue = Number(value);\n      }\n    }\n\n    if (type === 'append' && Array.isArray(newFilters[filterKey as keyof ExpertFilters])) {\n      const currentArray = newFilters[filterKey as keyof ExpertFilters] as any[];\n      newFilters[filterKey as keyof ExpertFilters] = [...currentArray, processedValue] as any;\n    } else {\n      (newFilters as any)[filterKey] = processedValue;\n    }\n\n    // Reset offset to 0 when any filter changes (except offset itself)\n    // This ensures we start from the beginning when filters change\n    if (filterKey !== 'offset') {\n      newFilters.offset = 0;\n    }\n\n    this.state.updateState(programId, { filters: newFilters });\n    \n    this.log(`Filter updated: ${filterKey} = ${processedValue} (original: ${value})`);\n    \n    // Dispatch filter change event\n    const event: FilterChangeEvent = {\n      filters: newFilters,\n      element: document.querySelector(`[data-program-id=\"${programId}\"]`) as HTMLElement\n    };\n    \n    this.dispatchEvent(document as any, 'filterChange', event);\n  }\n\n  private showLoading(container: Element, show: boolean): void {\n    const loadingElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n    if (loadingElement) {\n      (loadingElement as HTMLElement).style.display = show ? '' : 'none';\n    }\n    \n    (container as HTMLElement).classList.toggle(this.config.loadingClass, show);\n  }\n\n  private showError(container: Element, error: Error): void {\n    const errorElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.error}]`);\n    if (errorElement) {\n      errorElement.textContent = error.message;\n      (errorElement as HTMLElement).style.display = '';\n    }\n    \n    (container as HTMLElement).classList.add(this.config.errorClass);\n    this.log('Error displayed', error);\n  }\n\n  private dispatchEvent(target: Element | Document, eventName: string, detail: any): void {\n    const event = new CustomEvent(`contra:${eventName}`, { detail });\n    target.dispatchEvent(event);\n  }\n\n  private log(message: string, ...args: any[]): void {\n    if (this.config.debug) {\n      console.log(`[ContraWebflow] ${message}`, ...args);\n    }\n  }\n}\n\n/**\n * Auto-initialize runtime when DOM is ready\n */\nfunction autoInit(): void {\n  const configElement = document.getElementById('contra-config');\n  if (!configElement) {\n    console.warn('[ContraWebflow] No config element found. Runtime not initialized.');\n    return;\n  }\n\n  try {\n    const config = JSON.parse(configElement.textContent || '{}');\n    \n    // Validate required config\n    if (!config.apiKey) {\n      console.error('[ContraWebflow] API key is required in config.');\n      return;\n    }\n    \n    if (!config.program) {\n      console.error('[ContraWebflow] Program ID is required in config.');\n      return;\n    }\n    \n    // Add a small delay to ensure all DOM elements are ready\n    const initializeRuntime = () => {\n      const runtime = new ContraWebflowRuntime(config);\n      \n      // Expose runtime globally for debugging\n      (window as any).contraRuntime = runtime;\n      \n      runtime.init().catch(error => {\n        console.error('[ContraWebflow] Runtime initialization failed:', error);\n      });\n    };\n    \n    // Use setTimeout to ensure DOM is fully ready\n    setTimeout(initializeRuntime, 100);\n    \n  } catch (error) {\n    console.error('[ContraWebflow] Failed to parse config:', error);\n  }\n}\n\n// Auto-initialize when DOM is ready with multiple fallbacks\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', autoInit);\n} else if (document.readyState === 'interactive') {\n  // DOM is ready but resources might still be loading\n  setTimeout(autoInit, 50);\n} else {\n  // DOM and resources are ready\n  autoInit();\n}\n\n// Export runtime class for manual initialization\nexport { ContraWebflowRuntime as default }; "]}
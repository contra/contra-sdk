{"version":3,"sources":["../src/runtime.ts"],"names":["ATTR_PREFIX","ATTRS","RuntimeState","listId","updates","state","ContraWebflowRuntime","config","ContraClient","listElements","listElement","error","programId","initialFilters","limit","button","action","targetListId","e","append","filters","response","newExperts","allExperts","experts","template","card","fragment","expert","expertCard","element","fieldName","format","value","displayValue","utils","rating","fullStars","hasHalfStar","emptyStars","starsHtml","i","textElement","url","mediaType","parent","mediaElement","urlLower","isVideo","ext","isCloudinaryVideo","originalElement","video","posterUrl","fallbackImg","img","placeholder","videoUrl","from","to","attr","existingStyle","container","repeatType","maxItems","tag","items","item","itemElement","showWhen","hideWhen","shouldShow","condition","parts","field","restOfCondition","expertValue","result","numValue","expertStr","valueStr","emptyElement","loadMoreButton","btn","hasMore","filterKey","newFilters","processedValue","v","filterControls","control","debounceTime","handler","debouncedHandler","eventType","func","delay","timeoutId","args","name","selector","option","show","loadingElement","errorElement","target","eventName","detail","event","message","autoInit","configElement","runtime"],"mappings":"oDA+BMA,CAAc,CAAA,cAAA,CACdC,CAAQ,CAAA,CAEZ,OAAQ,SACR,CAAA,OAAA,CAAS,UACT,QAAU,CAAA,UAAA,CAGV,QAAS,SACT,CAAA,KAAA,CAAO,OACP,CAAA,KAAA,CAAO,QAGP,KAAO,CAAA,OAAA,CACP,OAAQ,QAGR,CAAA,MAAA,CAAQ,SACR,GAAK,CAAA,KAAA,CAGL,KAAO,CAAA,OAAA,CAGP,OAAQ,QACR,CAAA,UAAA,CAAY,cAGZ,QAAU,CAAA,WAAA,CACV,SAAU,WACZ,CAAA,CAGMC,CAAN,CAAA,KAAmB,CAAnB,WACE,EAAA,CAAA,IAAA,CAAQ,OAAS,IAAI,IAAA,CAWrB,SAASC,CAAgB,CAAA,CACvB,OAAK,IAAA,CAAK,OAAO,GAAIA,CAAAA,CAAM,GACzB,IAAK,CAAA,MAAA,CAAO,IAAIA,CAAQ,CAAA,CACtB,OAAS,CAAA,GACT,OAAS,CAAA,GACT,OAAS,CAAA,KAAA,CACT,MAAO,IACP,CAAA,MAAA,CAAQ,CACR,CAAA,KAAA,CAAO,GACP,UAAY,CAAA,CAAA,CACZ,YAAa,KACf,CAAC,EAEI,IAAK,CAAA,MAAA,CAAO,GAAIA,CAAAA,CAAM,CAC/B,CAEA,WAAA,CAAYA,EAAgBC,CAAwD,CAAA,CAClF,IAAMC,CAAQ,CAAA,IAAA,CAAK,QAASF,CAAAA,CAAM,EAClC,MAAO,CAAA,MAAA,CAAOE,EAAOD,CAAO,CAAA,CAC5B,KAAK,MAAO,CAAA,GAAA,CAAID,CAAQE,CAAAA,CAAK,EAC/B,CACF,CAAA,CAKaC,EAAN,KAA2B,CAMhC,YAAYC,CAAuB,CAAA,CAHnC,IAAQ,CAAA,KAAA,CAAQ,IAAIL,CACpB,CAAA,IAAA,CAAQ,gBAA2C,IAAI,GAAA,CAGrD,KAAK,MAAS,CAAA,CACZ,KAAO,CAAA,KAAA,CACP,aAAc,SACd,CAAA,UAAA,CAAY,QACZ,UAAY,CAAA,OAAA,CAEZ,cAAe,KACf,CAAA,cAAA,CAAgB,IAChB,CAAA,UAAA,CAAY,KACZ,SAAW,CAAA,IAAA,CACX,cAAe,KACf,CAAA,GAAGK,CACL,CAEA,CAAA,IAAA,CAAK,MAAS,CAAA,IAAIC,aAAa,CAC7B,MAAA,CAAQ,KAAK,MAAO,CAAA,MAAA,CACpB,MAAO,IAAK,CAAA,MAAA,CAAO,KACrB,CAAC,EAED,IAAK,CAAA,GAAA,CAAI,sBAAuB,IAAK,CAAA,MAAM,EAC7C,CAKA,MAAM,IAAsB,EAAA,CAC1B,KAAK,GAAI,CAAA,yBAAyB,CAElC,CAAA,GAAI,CAEF,IAAMC,CAAAA,CAAe,IAAK,CAAA,gBAAA,CAAiB,SAAS,IAAM,CAAA,CAAA,CAAA,EAAIT,CAAW,CAAGC,EAAAA,CAAAA,CAAM,MAAM,CAAG,CAAA,CAAA,CAAA,CAC3F,IAAK,CAAA,GAAA,CAAI,SAASQ,CAAa,CAAA,MAAM,uBAAuB,CAG5D,CAAA,IAAA,IAAWC,KAAeD,CACxB,CAAA,MAAM,IAAK,CAAA,QAAA,CAASC,CAAW,CAIjC,CAAA,IAAA,CAAK,mBAGL,CAAA,IAAA,CAAK,oBAEL,CAAA,IAAA,CAAK,GAAI,CAAA,iCAAiC,EAC5C,CAASC,MAAAA,CAAAA,CAAO,CACd,MAAK,IAAA,CAAA,GAAA,CAAI,gCAAiCA,CAAK,CAAA,CACzCA,CACR,CACF,CAKA,MAAc,QAAA,CAASD,EAAqC,CAC1D,IAAMP,EAAS,IAAK,CAAA,OAAA,CAAQO,CAAaT,CAAAA,CAAAA,CAAM,MAAM,CAC/CW,CAAAA,CAAAA,CAAY,KAAK,OAAQF,CAAAA,CAAAA,CAAaT,EAAM,OAAO,CAAA,CAEzD,GAAI,CAACE,GAAU,CAACS,CAAAA,CAAW,CACzB,IAAK,CAAA,GAAA,CAAI,8FAA+FF,CAAW,CAAA,CACnH,MACF,CAEA,KAAK,GAAI,CAAA,CAAA,mBAAA,EAAsBP,CAAM,CAAiBS,cAAAA,EAAAA,CAAS,EAAE,CAEjE,CAAA,GAAI,CAEDF,CAAAA,CAA4B,aAAa,yBAA2B,CAAA,MAAM,EAG3E,IAAMG,CAAAA,CAAiB,KAAK,uBAAwBH,CAAAA,CAAW,CACzDI,CAAAA,CAAAA,CAAQ,SAAS,IAAK,CAAA,OAAA,CAAQJ,EAAaT,CAAM,CAAA,KAAK,GAAK,IAAM,CAAA,EAAE,CAGzE,CAAA,IAAA,CAAK,MAAM,WAAYE,CAAAA,CAAAA,CAAQ,CAC/B,OAASU,CAAAA,CAAAA,CACP,MAAOC,CACP,CAAA,MAAA,CAAQD,CAAe,CAAA,MAAA,EAAU,CACnC,CAAC,CAAA,CAED,KAAK,GAAI,CAAA,CAAA,yBAAA,EAA4BV,CAAM,CAAI,CAAA,CAAA,CAAE,cAAAU,CAAAA,CAAAA,CAAgB,MAAAC,CAAM,CAAC,EAGxE,MAAM,IAAA,CAAK,YAAYX,CAAQS,CAAAA,CAAS,EAE1C,CAAA,MAASD,EAAO,CACd,IAAA,CAAK,IAAI,CAA6BR,0BAAAA,EAAAA,CAAM,GAAIQ,CAAK,CAAA,CACrD,IAAK,CAAA,SAAA,CAAUD,EAAaC,CAAc,EAC5C,CACF,CAKQ,iBAAA,EAA0B,CACV,IAAK,CAAA,gBAAA,CAAiB,QAAS,CAAA,IAAA,CAAM,IAAIX,CAAW,CAAA,EAAGC,CAAM,CAAA,MAAM,GAAG,CAE9E,CAAA,OAAA,CAAQc,CAAU,EAAA,CAC9B,IAAMC,CAAS,CAAA,IAAA,CAAK,QAAQD,CAAQd,CAAAA,CAAAA,CAAM,MAAM,CAC1CgB,CAAAA,CAAAA,CAAe,IAAK,CAAA,OAAA,CAAQF,EAAQd,CAAM,CAAA,UAAU,EAE1D,GAAI,CAACe,GAAU,CAACC,CAAAA,CAAc,CAC5B,IAAA,CAAK,IAAI,iGAAmGF,CAAAA,CAAM,EAClH,MACF,CAEAA,EAAO,gBAAiB,CAAA,OAAA,CAAUG,CAAM,EAAA,CACtCA,EAAE,cAAe,EAAA,CACjB,KAAK,YAAaF,CAAAA,CAAAA,CAAQC,EAAcF,CAAM,EAChD,CAAC,EACH,CAAC,EACH,CAKA,MAAc,WAAYZ,CAAAA,CAAAA,CAAgBS,EAAmBO,CAAS,CAAA,KAAA,CAAsB,CAC1F,IAAMT,EAAc,IAAK,CAAA,aAAA,CAAc,SAAS,IAAM,CAAA,CAAA,CAAA,EAAIV,CAAW,CAAGC,EAAAA,CAAAA,CAAM,MAAM,CAAA,EAAA,EAAKE,CAAM,CAAI,EAAA,CAAA,CAAA,CACnG,GAAI,CAACO,CAAAA,CAAa,CAChB,IAAK,CAAA,GAAA,CAAI,CAAqCP,kCAAAA,EAAAA,CAAM,EAAE,CACtD,CAAA,MACF,CAEA,IAAME,CAAAA,CAAQ,KAAK,KAAM,CAAA,QAAA,CAASF,CAAM,CAAA,CAClCiB,EAAU,CACd,GAAGf,EAAM,OACT,CAAA,KAAA,CAAOA,EAAM,KACb,CAAA,MAAA,CAAQA,CAAM,CAAA,MAChB,EAEA,IAAK,CAAA,GAAA,CAAI,6BAA6BF,CAAM,CAAA,CAAA,CAAIiB,CAAO,CAEvD,CAAA,GAAI,CACF,IAAA,CAAK,YAAYV,CAAa,CAAA,CAAA,CAAI,EAClC,IAAK,CAAA,KAAA,CAAM,YAAYP,CAAQ,CAAA,CAAE,OAAS,CAAA,CAAA,CAAA,CAAM,MAAO,IAAK,CAAC,EAE7D,IAAMkB,CAAAA,CAAW,MAAM,IAAK,CAAA,MAAA,CAAO,WAAYT,CAAAA,CAAAA,CAAWQ,CAAO,CAEjE,CAAA,IAAA,CAAK,IAAI,CAAUC,OAAAA,EAAAA,CAAAA,CAAS,KAAK,MAAM,CAAA,kBAAA,EAAqBlB,CAAM,CAAA,CAAA,CAAIkB,CAAQ,CAE9E,CAAA,IAAMC,EAAaD,CAAS,CAAA,IAAA,CACtBE,EAAaJ,CAAS,CAAA,CAAC,GAAGd,CAAAA,CAAM,QAAS,GAAGiB,CAAU,EAAIA,CAGhE,CAAA,IAAA,CAAK,MAAM,WAAYnB,CAAAA,CAAAA,CAAQ,CAC7B,OAAA,CAASoB,EACT,UAAYF,CAAAA,CAAAA,CAAS,WACrB,MAAQhB,CAAAA,CAAAA,CAAM,OAASiB,CAAW,CAAA,MAAA,CAClC,WAAaA,CAAAA,CAAAA,CAAW,SAAWjB,CAAM,CAAA,KAAA,CACzC,QAAS,CACX,CAAA,CAAC,EAGD,IAAK,CAAA,aAAA,CAAcK,CAAaY,CAAAA,CAAAA,CAAYH,CAAM,CAGlD,CAAA,IAAA,CAAK,eAAeT,CAAaP,CAAAA,CAAM,EAEzC,CAASQ,MAAAA,CAAAA,CAAO,CACd,IAAA,CAAK,IAAI,CAAoCR,iCAAAA,EAAAA,CAAM,GAAIQ,CAAK,CAAA,CAE5D,KAAK,KAAM,CAAA,WAAA,CAAYR,CAAQ,CAAA,CAC7B,QAAS,KACT,CAAA,KAAA,CAAOQ,CACT,CAAC,CAAA,CAED,KAAK,SAAUD,CAAAA,CAAAA,CAAaC,CAAc,EAE5C,QAAE,CACA,IAAA,CAAK,YAAYD,CAAa,CAAA,KAAK,EACrC,CACF,CAKQ,aAAcA,CAAAA,CAAAA,CAAsBc,EAA0BL,CAAuB,CAAA,CAC3F,IAAMM,CAAW,CAAA,IAAA,CAAK,cAAcf,CAAa,CAAA,CAAA,CAAA,EAAIV,CAAW,CAAA,EAAGC,EAAM,QAAQ,CAAA,CAAA,CAAG,EACpF,GAAI,CAACwB,EAAU,CACb,IAAA,CAAK,GAAI,CAAA,2BAAA,CAA6Bf,CAAW,CACjD,CAAA,MACF,CAEKS,CAEmB,EAAA,IAAA,CAAK,iBAAiBT,CAAa,CAAA,uBAAuB,CACpE,CAAA,OAAA,CAAQgB,GAAQA,CAAK,CAAA,MAAA,EAAQ,CAG3C,CAAA,IAAMC,EAAW,QAAS,CAAA,sBAAA,EAC1BH,CAAAA,CAAAA,CAAQ,QAAQI,CAAU,EAAA,CACxB,IAAMC,CAAa,CAAA,IAAA,CAAK,mBAAmBJ,CAAUG,CAAAA,CAAM,CAC3DD,CAAAA,CAAAA,CAAS,YAAYE,CAAU,EACjC,CAAC,CACDnB,CAAAA,CAAAA,CAAY,YAAYiB,CAAQ,CAAA,CAEhC,IAAK,CAAA,GAAA,CAAI,YAAYH,CAAQ,CAAA,MAAM,0BAA2Bd,CAAW,EAC3E,CAKQ,kBAAmBe,CAAAA,CAAAA,CAAmBG,CAAgC,CAAA,CAC5E,IAAMF,CAAOD,CAAAA,CAAAA,CAAS,UAAU,IAAI,CAAA,CAGpC,OAAAC,CAAK,CAAA,SAAA,CAAU,GAAI,CAAA,sBAAsB,EAGzCA,CAAK,CAAA,eAAA,CAAgB,GAAG1B,CAAW,CAAA,EAAGC,EAAM,QAAQ,CAAA,CAAE,CACrDyB,CAAAA,CAAAA,CAAqB,MAAM,OAAU,CAAA,EAAA,CAGtC,KAAK,cAAeA,CAAAA,CAAAA,CAAME,CAAM,CAGhC,CAAA,IAAA,CAAK,yBAA0BF,CAAAA,CAAAA,CAAME,CAAM,CAG3C,CAAA,IAAA,CAAK,wBAAyBF,CAAAA,CAAAA,CAAME,CAAM,CAEnCF,CAAAA,CACT,CAKQ,cAAA,CAAeA,EAAeE,CAA6B,CAAA,CAC3C,KAAK,gBAAiBF,CAAAA,CAAAA,CAAM,IAAI1B,CAAW,CAAA,EAAGC,CAAM,CAAA,KAAK,GAAG,CAEpE,CAAA,OAAA,CAAQ6B,GAAW,CAC/B,IAAMC,EAAY,IAAK,CAAA,OAAA,CAAQD,CAAS7B,CAAAA,CAAAA,CAAM,KAAK,CAC7C+B,CAAAA,CAAAA,CAAS,KAAK,OAAQF,CAAAA,CAAAA,CAAS7B,EAAM,MAAM,CAAA,CAEjD,GAAI,CAAC8B,GAAa,EAAEA,CAAAA,IAAaH,GAAS,OAE1C,IAAMK,EAAQL,CAAOG,CAAAA,CAAS,CAC9B,CAAA,IAAA,CAAK,gBAAgBD,CAASG,CAAAA,CAAAA,CAAOD,CAAM,EAC7C,CAAC,EAGqB,IAAK,CAAA,gBAAA,CAAiBN,CAAM,CAAA,qBAAqB,EACzD,OAAQI,CAAAA,CAAAA,EAAW,CAC3BF,CAAO,CAAA,kBAAA,EACT,KAAK,gBAAiBE,CAAAA,CAAAA,CAASF,CAAO,CAAA,kBAAkB,EAE5D,CAAC,EACH,CAKQ,eAAgBE,CAAAA,CAAAA,CAAkBG,EAAYD,CAA8B,CAAA,CAClF,GAAI,EAAAC,GAAS,IAAQA,EAAAA,CAAAA,GAAU,IAG/B,CAAI,GAAA,IAAA,CAAK,aAAaH,CAAO,CAAA,EAAK,OAAOG,CAAAA,EAAU,UAAYA,CAAM,CAAA,IAAA,GAAQ,CAC3E,IAAA,CAAK,cAAcH,CAASG,CAAAA,CAAK,CACjC,CAAA,MACF,CAEA,GAAIH,CAAAA,YAAmB,kBACrBA,CAAQ,CAAA,IAAA,CAAO,OAAOG,CAAK,CAAA,CACvBH,CAAQ,CAAA,QAAA,CAAS,SAAW,CAAK,EAAA,CAACA,EAAQ,WAAa,EAAA,IAAA,KACzDA,CAAQ,CAAA,WAAA,CAAc,MAAOG,CAAAA,CAAK,WAE3BH,CAAmB,YAAA,gBAAA,CAC5BA,EAAQ,KAAQ,CAAA,MAAA,CAAOG,CAAK,CACnBH,CAAAA,KAAAA,GAAAA,CAAAA,YAAmB,gBAE5BA,CAAAA,CAAAA,CAAQ,IAAM,MAAOG,CAAAA,CAAK,EAC1BH,CAAQ,CAAA,GAAA,CAAMA,EAAQ,GAAO,EAAA,OAAA,CAAA,KACxB,CAEL,IAAII,EAAe,MAAOD,CAAAA,CAAK,EAE/B,GAAID,CAAAA,CACF,OAAQA,CAAQ,EACd,KAAK,UAAA,CACHE,EAAe,OAAOD,CAAAA,EAAU,SAAW,CAAIA,CAAAA,EAAAA,CAAK,GAAKC,CACzD,CAAA,MACF,KAAK,MAAA,CACHA,EAAeC,KAAM,CAAA,UAAA,CAAW,OAAOF,CAAAA,EAAU,SAAWA,CAAQ,CAAA,IAAI,CACxE,CAAA,MACF,KAAK,QAEHC,CAAAA,CAAAA,CAAe,OAAOD,CAAU,EAAA,QAAA,CAAWA,EAAM,OAAQ,CAAA,CAAC,CAAIC,CAAAA,CAAAA,CAC9D,MACF,KAAK,UAAA,CAEC,OAAOD,CAAU,EAAA,QAAA,GACfA,GAAS,GACXC,CAAAA,CAAAA,CAAe,CAAI,CAAA,EAAA,IAAA,CAAK,MAAMD,CAAQ,CAAA,GAAO,CAAC,CACrCA,EAAAA,CAAAA,CAAAA,CAAAA,EAAS,IAClBC,CAAe,CAAA,CAAA,CAAA,EAAI,IAAK,CAAA,KAAA,CAAMD,EAAQ,GAAI,CAAC,KAE3CC,CAAe,CAAA,CAAA,CAAA,EAAID,CAAK,CAG5B,CAAA,CAAA,CAAA,MACF,KAAK,QAAA,CACHC,EAAe,OAAOD,CAAAA,EAAU,SAAWA,CAAM,CAAA,cAAA,GAAmBC,CACpE,CAAA,MACF,KAAK,UAAA,CACHA,EAAeA,CAAa,CAAA,MAAA,CAAS,IAAMA,CAAa,CAAA,SAAA,CAAU,EAAG,EAAE,CAAA,CAAI,KAAQA,CAAAA,CAAAA,CACnF,MACF,KAAK,SAAA,CACHA,EAAeD,CAAQ,CAAA,KAAA,CAAQ,KAC/B,MACF,KAAK,cACHC,CAAAA,CAAAA,CAAeD,EAAQ,WAAc,CAAA,eAAA,CACrC,KACJ,CAGFH,CAAAA,CAAQ,YAAcI,EACxB,CAAA,CACF,CAKQ,gBAAA,CAAiBJ,EAAkBM,CAAsB,CAAA,CAC/D,IAAMC,CAAY,CAAA,IAAA,CAAK,MAAMD,CAAM,CAAA,CAC7BE,CAAcF,CAAAA,CAAAA,CAAS,GAAK,EAC5BG,CAAAA,CAAAA,CAAa,EAAIF,CAAaC,EAAAA,CAAAA,CAAc,EAAI,CAElDE,CAAAA,CAAAA,CAAAA,CAAY,EAGhB,CAAA,IAAA,IAASC,EAAI,CAAGA,CAAAA,CAAAA,CAAIJ,EAAWI,CAC7BD,EAAAA,CAAAA,CAAAA,EAAa,2DAIXF,CACFE,GAAAA,CAAAA,EAAa,0DAIf,CAAA,CAAA,IAAA,IAASC,EAAI,CAAGA,CAAAA,CAAAA,CAAIF,EAAYE,CAC9BD,EAAAA,CAAAA,CAAAA,EAAa,4DAGfV,CAAQ,CAAA,SAAA,CAAYU,CAGpB,CAAA,IAAMd,EAAOI,CAAQ,CAAA,OAAA,CAAQ,wBAAwB,CAAKA,EAAAA,CAAAA,CAAQ,QAAQ,cAAc,CAAA,CACpFJ,CACyB,EAAA,IAAA,CAAK,iBAAiBA,CAAM,CAAA,2BAA2B,EAC/D,OAAQgB,CAAAA,CAAAA,EAAe,CACxCA,CAAY,CAAA,WAAA,CAAcN,CAAO,CAAA,OAAA,CAAQ,CAAC,EAC5C,CAAC,EAEL,CAKQ,YAAA,CAAaN,EAA2B,CAG9C,OAFc,IAAK,CAAA,OAAA,CAAQA,EAAS7B,CAAM,CAAA,KAAK,CAE9B,GAAA,UACnB,CAKQ,aAAc6B,CAAAA,CAAAA,CAAkBa,CAAmB,CAAA,CACzD,IAAMC,CAAY,CAAA,IAAA,CAAK,gBAAgBD,CAAG,CAAA,CACpCE,EAASf,CAAQ,CAAA,aAAA,CAEvB,GAAI,CAACe,EAAQ,CACX,IAAA,CAAK,IAAI,6CAA+Cf,CAAAA,CAAO,EAC/D,MACF,CAGAA,CAAQ,CAAA,MAAA,GAGR,IAAIgB,CAAAA,CAEJ,OAAQF,CAAW,EACjB,KAAK,OACHE,CAAAA,CAAAA,CAAe,IAAK,CAAA,kBAAA,CAAmBH,EAAKb,CAAO,CAAA,CACnD,MACF,KAAK,OAAA,CACL,QACEgB,CAAe,CAAA,IAAA,CAAK,kBAAmBH,CAAAA,CAAAA,CAAKb,CAAO,CACnD,CAAA,KACJ,CAGA,IAAK,CAAA,kBAAA,CAAmBA,EAASgB,CAAY,CAAA,CAG7CD,CAAO,CAAA,WAAA,CAAYC,CAAY,CAE/B,CAAA,IAAA,CAAK,IAAI,CAAWF,QAAAA,EAAAA,CAAS,qBAAqBD,CAAG,CAAA,CAAE,EACzD,CAKQ,gBAAgBA,CAAgC,CAAA,CACtD,GAAI,CAACA,CAAAA,EAAO,OAAOA,CAAQ,EAAA,QAAA,CACzB,OAAK,IAAA,CAAA,GAAA,CAAI,2CAA4CA,CAAG,CAAA,CACjD,QAGT,IAAMI,CAAAA,CAAWJ,EAAI,WAAY,EAAA,CAI3BK,CADkB,CAAA,CAAC,OAAQ,OAAS,CAAA,MAAA,CAAQ,OAAQ,MAAQ,CAAA,MAAM,EACxC,IAAKC,CAAAA,CAAAA,EAAOF,CAAS,CAAA,QAAA,CAASE,CAAG,CAAC,CAAA,CAG5DC,EAAoBH,CAAS,CAAA,QAAA,CAAS,iBAAiB,CAAKA,EAAAA,CAAAA,CAAS,QAAS,CAAA,SAAS,EAE7F,OAAQC,CAAAA,EAAWE,EAAqB,OAAU,CAAA,OACpD,CAKQ,kBAAmBP,CAAAA,CAAAA,CAAaQ,CAA4C,CAAA,CAClF,IAAMC,CAAQ,CAAA,QAAA,CAAS,cAAc,OAAO,CAAA,CAG5C,OAAAA,CAAM,CAAA,GAAA,CAAMT,CACZS,CAAAA,CAAAA,CAAM,MAAQ,IAAK,CAAA,MAAA,CAAO,WAC1BA,CAAM,CAAA,IAAA,CAAO,KAAK,MAAO,CAAA,SAAA,CACzBA,CAAM,CAAA,WAAA,CAAc,KACpBA,CAAM,CAAA,OAAA,CAAU,WAChBA,CAAM,CAAA,QAAA,CAAW,KAAK,MAAO,CAAA,aAAA,CAG7BA,CAAM,CAAA,KAAA,CAAM,MAAQ,MACpBA,CAAAA,CAAAA,CAAM,MAAM,MAAS,CAAA,MAAA,CACrBA,EAAM,KAAM,CAAA,SAAA,CAAY,OACxBA,CAAAA,CAAAA,CAAM,MAAM,YAAe,CAAA,SAAA,CAGvB,KAAK,MAAO,CAAA,aAAA,GACdA,EAAM,QAAW,CAAA,IAAA,CACjBA,CAAM,CAAA,YAAA,CAAa,WAAY,EAAE,CAAA,CAAA,CAInCA,EAAM,OAAU,CAAA,IAAM,CACpB,IAAK,CAAA,GAAA,CAAI,CAAyBT,sBAAAA,EAAAA,CAAG,EAAE,CAEvC,CAAA,IAAMU,EAAY,IAAK,CAAA,qBAAA,CAAsBV,CAAG,CAChD,CAAA,GAAIU,CAAW,CAAA,CACb,IAAMC,CAAc,CAAA,IAAA,CAAK,mBAAmBD,CAAWF,CAAAA,CAAe,EACtEC,CAAM,CAAA,aAAA,EAAe,YAAaE,CAAAA,CAAAA,CAAaF,CAAK,EACtD,CAAA,KAEEA,EAAM,KAAM,CAAA,UAAA,CAAa,UACzBA,CAAM,CAAA,KAAA,CAAM,QAAW,CAAA,UAAA,CACvBA,EAAM,SAAY,CAAA,uIAEtB,EAGI,IAAK,CAAA,MAAA,CAAO,gBAAkB,CAAC,IAAA,CAAK,MAAO,CAAA,aAAA,GAC7CA,EAAM,gBAAiB,CAAA,YAAA,CAAc,IAAM,CACzCA,CAAAA,CAAM,YAAc,CACpBA,CAAAA,CAAAA,CAAM,IAAK,EAAA,CAAE,MAAM,IAAM,EAExB,EACH,CAAC,EAEDA,CAAM,CAAA,gBAAA,CAAiB,YAAc,CAAA,IAAM,CACzCA,CAAM,CAAA,KAAA,GACNA,CAAM,CAAA,WAAA,CAAc,EACtB,CAAC,CAAA,CAAA,CAGIA,CACT,CAKQ,mBAAmBT,CAAaQ,CAAAA,CAAAA,CAA4C,CAClF,IAAMI,CAAAA,CAAM,SAAS,aAAc,CAAA,KAAK,CAExC,CAAA,OAAAA,EAAI,GAAMZ,CAAAA,CAAAA,CACVY,EAAI,GAAMJ,CAAAA,CAAAA,CAAgB,aAAa,KAAK,CAAA,EAAK,eACjDI,CAAAA,CAAAA,CAAI,QAAU,MAGdA,CAAAA,CAAAA,CAAI,MAAM,KAAQ,CAAA,MAAA,CAClBA,EAAI,KAAM,CAAA,MAAA,CAAS,MACnBA,CAAAA,CAAAA,CAAI,MAAM,SAAY,CAAA,OAAA,CACtBA,EAAI,KAAM,CAAA,YAAA,CAAe,UAGzBA,CAAI,CAAA,OAAA,CAAU,IAAM,CAClB,KAAK,GAAI,CAAA,CAAA,sBAAA,EAAyBZ,CAAG,CAAE,CAAA,CAAA,CACvCY,EAAI,KAAM,CAAA,UAAA,CAAa,SACvBA,CAAAA,CAAAA,CAAI,MAAM,OAAU,CAAA,KAAA,CACpBA,EAAI,GAAM,CAAA,mBAAA,CAGVA,EAAI,KAAM,CAAA,QAAA,CAAW,UACrB,CAAA,IAAMC,EAAc,QAAS,CAAA,aAAA,CAAc,KAAK,CAChDA,CAAAA,CAAAA,CAAY,MAAM,OAAU,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAA,CAAA,CAS5BA,EAAY,WAAc,CAAA,mCAAA,CAC1BD,CAAI,CAAA,aAAA,EAAe,YAAYC,CAAW,EAC5C,CAEOD,CAAAA,CACT,CAKQ,qBAAsBE,CAAAA,CAAAA,CAAiC,CAC7D,OAAIA,CAAAA,CAAS,SAAS,iBAAiB,CAAA,EAAKA,CAAS,CAAA,QAAA,CAAS,SAAS,CAE9DA,CAAAA,CAAAA,CACJ,OAAQ,CAAA,SAAA,CAAW,SAAS,CAC5B,CAAA,OAAA,CAAQ,4BAA8B,CAAA,MAAM,EAC5C,OAAQ,CAAA,gBAAA,CAAkB,sBAAsB,CAE9C,CAAA,IACT,CAKQ,kBAAmBC,CAAAA,CAAAA,CAAeC,CAAuB,CAAA,CAc/D,GAZID,CAAK,CAAA,SAAA,GACPC,CAAG,CAAA,SAAA,CAAYD,EAAK,SAItB,CAAA,CAAA,KAAA,CAAM,IAAKA,CAAAA,CAAAA,CAAK,UAAU,CAAE,CAAA,OAAA,CAAQE,GAAQ,CACtCA,CAAAA,CAAK,KAAK,UAAW,CAAA,OAAO,CAAKA,EAAAA,CAAAA,CAAK,OAAS,CAAG5D,EAAAA,CAAW,GAAGC,CAAM,CAAA,KAAK,IAC7E0D,CAAG,CAAA,YAAA,CAAaC,CAAK,CAAA,IAAA,CAAMA,EAAK,KAAK,EAEzC,CAAC,CAGGF,CAAAA,CAAAA,CAAK,aAAa,OAAO,CAAA,CAAG,CAC9B,IAAMG,EAAgBF,CAAG,CAAA,YAAA,CAAa,OAAO,CAAA,EAAK,GAClDA,CAAG,CAAA,YAAA,CAAa,OAASE,CAAAA,CAAAA,CAAgB,KAAOH,CAAK,CAAA,YAAA,CAAa,OAAO,CAAC,EAC5E,CACF,CAKQ,yBAAA,CAA0BhC,CAAeE,CAAAA,CAAAA,CAA6B,CACrD,IAAK,CAAA,gBAAA,CAAiBF,CAAM,CAAA,CAAA,CAAA,EAAI1B,CAAW,CAAGC,EAAAA,CAAAA,CAAM,MAAM,CAAA,CAAA,CAAG,EAErE,OAAQ6D,CAAAA,CAAAA,EAAa,CAClC,IAAMC,CAAAA,CAAa,KAAK,OAAQD,CAAAA,CAAAA,CAAW7D,CAAM,CAAA,MAAM,EACjD+D,CAAW,CAAA,QAAA,CAAS,IAAK,CAAA,OAAA,CAAQF,EAAW7D,CAAM,CAAA,GAAG,CAAK,EAAA,IAAI,EAEhE8D,CAAe,GAAA,UAAA,EAAcnC,EAAO,QACtC,CAAA,IAAA,CAAK,2BAA2BkC,CAAWlC,CAAAA,CAAAA,CAAO,QAAS,CAAA,KAAA,CAAM,EAAGoC,CAAQ,CAAC,EACpED,CAAe,GAAA,aAAA,EAAiBnC,EAAO,WAChD,CAAA,IAAA,CAAK,0BAA2BkC,CAAAA,CAAAA,CAAWlC,EAAO,WAAY,CAAA,KAAA,CAAM,EAAGoC,CAAQ,CAAC,EACvED,CAAe,GAAA,WAAA,EAAenC,CAAO,CAAA,SAAA,EAC9C,KAAK,0BAA2BkC,CAAAA,CAAAA,CAAWlC,CAAO,CAAA,SAAA,CAAU,MAAM,CAAGoC,CAAAA,CAAQ,CAAE,CAAA,GAAA,CAAKC,IAAiB,CAAE,IAAA,CAAMA,CAAI,CAAE,CAAA,CAAC,EAExH,CAAC,EACH,CAKQ,0BAAA,CAA2BH,EAAoBI,CAAoB,CAAA,CACzE,IAAMzC,CAAAA,CAAWqC,EAAU,iBACtBrC,CAAAA,CAAAA,GAGLqC,CAAU,CAAA,SAAA,CAAY,GAGtBI,CAAM,CAAA,OAAA,CAAQC,GAAQ,CACpB,IAAMC,EAAc3C,CAAS,CAAA,SAAA,CAAU,IAAI,CAAA,CAC3C,KAAK,cAAe2C,CAAAA,CAAAA,CAAaD,CAAI,CAAA,CACrCL,EAAU,WAAYM,CAAAA,CAAW,EACnC,CAAC,EAGGF,CAAM,CAAA,MAAA,GAAW,IAClBJ,CAA0B,CAAA,KAAA,CAAM,QAAU,MAE/C,CAAA,EAAA,CAKQ,wBAAyBpC,CAAAA,CAAAA,CAAeE,EAA6B,CAC/C,IAAA,CAAK,iBAAiBF,CAAM,CAAA,CAAA,CAAA,EAAI1B,CAAW,CAAGC,EAAAA,CAAAA,CAAM,QAAQ,CAAA,IAAA,EAAOD,CAAW,CAAGC,EAAAA,CAAAA,CAAM,QAAQ,CAAG,CAAA,CAAA,CAAA,CAE1G,QAAQ6B,CAAW,EAAA,CACrC,IAAMuC,CAAAA,CAAW,KAAK,OAAQvC,CAAAA,CAAAA,CAAS7B,CAAM,CAAA,QAAQ,EAC/CqE,CAAW,CAAA,IAAA,CAAK,OAAQxC,CAAAA,CAAAA,CAAS7B,EAAM,QAAQ,CAAA,CAEjDsE,EAAa,IAEbF,CAAAA,CAAAA,GACFE,EAAa,IAAK,CAAA,iBAAA,CAAkB3C,CAAQyC,CAAAA,CAAQ,GAGlDC,CACFC,GAAAA,CAAAA,CAAaA,CAAc,EAAA,CAAC,KAAK,iBAAkB3C,CAAAA,CAAAA,CAAQ0C,CAAQ,CAAA,CAAA,CAGpExC,EAAwB,KAAM,CAAA,OAAA,CAAUyC,EAAa,EAAK,CAAA,OAC7D,CAAC,EACH,CAKQ,iBAAkB3C,CAAAA,CAAAA,CAAuB4C,EAA4B,CAC3E,GAAI,CAACA,CAAAA,EAAa,OAAOA,CAAc,EAAA,QAAA,CACrC,OAAK,IAAA,CAAA,GAAA,CAAI,8BAA+BA,CAAS,CAAA,CAC1C,MAIT,IAAMC,CAAAA,CAAQD,EAAU,KAAM,CAAA,GAAG,CACjC,CAAA,GAAIC,EAAM,MAAS,CAAA,CAAA,CACjB,YAAK,GAAI,CAAA,2BAAA,CAA6BD,CAAS,CACxC,CAAA,KAAA,CAGT,IAAME,CAAAA,CAAQD,EAAM,CAAC,CAAA,CACfE,EAAkBF,CAAM,CAAA,KAAA,CAAM,CAAC,CAAE,CAAA,IAAA,CAAK,GAAG,CAAA,CACzCG,EAAehD,CAAe8C,CAAAA,CAAK,CAIzC,CAAA,GAFA,KAAK,GAAI,CAAA,CAAA,sBAAA,EAAyBA,CAAK,CAAA,EAAA,EAAKE,CAAW,CAAW,QAAA,EAAA,OAAOA,CAAW,CAAaD,UAAAA,EAAAA,CAAe,EAAE,CAE9GC,CAAAA,CAAAA,EAAe,IACjB,CAAA,OAAA,IAAA,CAAK,IAAI,CAAUF,OAAAA,EAAAA,CAAK,CAAsC,oCAAA,CAAA,CAAA,CACvD,MAIT,GAAIC,CAAAA,CAAgB,UAAW,CAAA,IAAI,EAAG,CACpC,IAAM1C,EAAQ0C,CAAgB,CAAA,SAAA,CAAU,CAAC,CACnCE,CAAAA,CAAAA,CAAS,MAAOD,CAAAA,CAAW,GAAK,MAAO3C,CAAAA,CAAK,CAClD,CAAA,OAAA,IAAA,CAAK,IAAI,CAAe2C,YAAAA,EAAAA,CAAW,CAAO3C,IAAAA,EAAAA,CAAK,MAAM4C,CAAM,CAAA,CAAE,EACtDA,CACT,CAAA,KAAA,GAAWF,EAAgB,UAAW,CAAA,IAAI,CAAG,CAAA,CAC3C,IAAM1C,CAAQ0C,CAAAA,CAAAA,CAAgB,UAAU,CAAC,CAAA,CACnCE,EAAS,MAAOD,CAAAA,CAAW,CAAK,EAAA,MAAA,CAAO3C,CAAK,CAClD,CAAA,OAAA,IAAA,CAAK,IAAI,CAAe2C,YAAAA,EAAAA,CAAW,OAAO3C,CAAK,CAAA,GAAA,EAAM4C,CAAM,CAAA,CAAE,EACtDA,CACT,CAAA,KAAA,GAAWF,CAAgB,CAAA,UAAA,CAAW,GAAG,CAAG,CAAA,CAC1C,IAAM1C,CAAAA,CAAQ0C,EAAgB,SAAU,CAAA,CAAC,EACnCE,CAAS,CAAA,MAAA,CAAOD,CAAW,CAAI,CAAA,MAAA,CAAO3C,CAAK,CAAA,CACjD,YAAK,GAAI,CAAA,CAAA,YAAA,EAAe2C,CAAW,CAAA,GAAA,EAAM3C,CAAK,CAAM4C,GAAAA,EAAAA,CAAM,CAAE,CAAA,CAAA,CACrDA,CACT,CAAWF,KAAAA,GAAAA,CAAAA,CAAgB,WAAW,GAAG,CAAA,CAAG,CAC1C,IAAM1C,CAAAA,CAAQ0C,CAAgB,CAAA,SAAA,CAAU,CAAC,CACnCE,CAAAA,CAAAA,CAAS,MAAOD,CAAAA,CAAW,EAAI,MAAO3C,CAAAA,CAAK,CACjD,CAAA,OAAA,IAAA,CAAK,IAAI,CAAe2C,YAAAA,EAAAA,CAAW,MAAM3C,CAAK,CAAA,GAAA,EAAM4C,CAAM,CAAE,CAAA,CAAA,CACrDA,CACT,CAAA,KAAO,CAEL,IAAIA,CAAAA,CAAS,MAGb,GAAI,OAAOD,GAAgB,SAErBD,CAAAA,CAAAA,CAAgB,WAAY,EAAA,GAAM,OACpCE,CAASD,CAAAA,CAAAA,GAAgB,KAChBD,CAAgB,CAAA,WAAA,KAAkB,OAC3CE,CAAAA,CAAAA,CAASD,CAAgB,GAAA,KAAA,CAEzBC,EAAS,KAEX,CAAA,IAAA,CAAK,GAAI,CAAA,CAAA,oBAAA,EAAuBD,CAAW,CAAQD,KAAAA,EAAAA,CAAAA,CAAgB,WAAY,EAAA,GAAM,MAAM,CAAME,GAAAA,EAAAA,CAAM,EAAE,CAChG,CAAA,KAAA,GAAA,OAAOD,GAAgB,QAAU,CAAA,CAE1C,IAAME,CAAAA,CAAW,OAAOH,CAAe,CAAA,CACvCE,CAAS,CAAA,CAAC,MAAMC,CAAQ,CAAA,EAAKF,CAAgBE,GAAAA,CAAAA,CAC7C,KAAK,GAAI,CAAA,CAAA,mBAAA,EAAsBF,CAAW,CAAQE,KAAAA,EAAAA,CAAQ,MAAMD,CAAM,CAAA,CAAE,EAC1E,CAAA,KAAO,CAEL,IAAME,CAAAA,CAAY,MAAOH,CAAAA,CAAW,EAC9BI,CAAW,CAAA,MAAA,CAAOL,CAAe,CAAA,CACvCE,EAASE,CAAU,CAAA,WAAA,KAAkBC,CAAS,CAAA,WAAA,GAC9C,IAAK,CAAA,GAAA,CAAI,CAAuBD,oBAAAA,EAAAA,CAAS,UAAUC,CAAQ,CAAA,IAAA,EAAOH,CAAM,CAAE,CAAA,EAC5E,CAEA,OAAOA,CACT,CACF,CAKQ,eAAenE,CAAsBP,CAAAA,CAAAA,CAAsB,CACjE,IAAME,CAAAA,CAAQ,KAAK,KAAM,CAAA,QAAA,CAASF,CAAM,CAAA,CAGlC8E,EAAe,IAAK,CAAA,aAAA,CAAcvE,CAAa,CAAA,CAAA,CAAA,EAAIV,CAAW,CAAGC,EAAAA,CAAAA,CAAM,KAAK,CAAA,CAAA,CAAG,EACjFgF,CACDA,GAAAA,CAAAA,CAA6B,MAAM,OAAU5E,CAAAA,CAAAA,CAAM,QAAQ,MAAW,GAAA,CAAA,EAAK,CAACA,CAAAA,CAAM,QAAU,EAAK,CAAA,MAAA,CAAA,CAIpG,IAAM6E,CAAAA,CAAiB,KAAK,aAAc,CAAA,QAAA,CAAS,IAAM,CAAA,CAAA,CAAA,EAAIlF,CAAW,CAAGC,EAAAA,CAAAA,CAAM,UAAU,CAAKE,EAAAA,EAAAA,CAAM,IAAI,CAC1G,CAAA,GAAI+E,CAAgB,CAAA,CAClB,IAAMC,CAAMD,CAAAA,CAAAA,CACNE,CAAU/E,CAAAA,CAAAA,CAAM,YAEtB8E,CAAI,CAAA,KAAA,CAAM,OAAUC,CAAAA,CAAAA,CAAU,GAAK,MACnCD,CAAAA,CAAAA,CAAI,SAAW9E,CAAM,CAAA,OAAA,CACrB8E,EAAI,WAAc9E,CAAAA,CAAAA,CAAM,OAAU,CAAA,YAAA,CAAe,YACnD,CACF,CAKQ,aAAaW,CAAgBC,CAAAA,CAAAA,CAAsBF,EAAuB,CAChF,GAAIC,CAAW,GAAA,WAAA,CAAa,CAC1B,IAAMN,CAAAA,CAAc,KAAK,aAAc,CAAA,QAAA,CAAS,KAAM,CAAIV,CAAAA,EAAAA,CAAW,CAAGC,EAAAA,CAAAA,CAAM,MAAM,CAAKgB,EAAAA,EAAAA,CAAY,CAAI,EAAA,CAAA,CAAA,CACnGL,EAAY,IAAK,CAAA,OAAA,CAAQF,CAAcT,CAAAA,CAAAA,CAAM,OAAO,CACtDS,CAAAA,CAAAA,EAAeE,EACjB,IAAK,CAAA,WAAA,CAAYK,EAAcL,CAAW,CAAA,IAAI,CAE9C,CAAA,IAAA,CAAK,IAAI,CAA8CK,2CAAAA,EAAAA,CAAY,CAAE,CAAA,EAEzE,CACF,CAEQ,qBAAA,CAAsBd,CAAgBS,CAAAA,CAAAA,CAAmByE,EAAmBpD,CAAkB,CAAA,CAEpG,IAAMqD,CAAa,CAAA,CAAE,GADP,IAAK,CAAA,KAAA,CAAM,QAASnF,CAAAA,CAAM,EACV,OAAQ,CAAA,CAGlCoF,CAAiBtD,CAAAA,CAAAA,CACjBoD,IAAc,WAGhBE,CAAAA,CAAAA,CAAiBtD,CAAQ,CAAA,IAAA,CAAO,OACvB,CAAC,SAAA,CAAW,SAAS,CAAE,CAAA,QAAA,CAASoD,CAAS,CAClDE,CAAAA,CAAAA,CAAkBtD,CAAU,GAAA,EAAA,EAAMA,IAAU,IAAQ,CAAA,MAAA,CAAY,OAAOA,CAAK,CAAA,CACnEoD,IAAc,WAAe,EAAA,OAAOpD,CAAU,EAAA,QAAA,GACrDsD,EAAiBtD,CAAM,CAAA,KAAA,CAAM,GAAG,CAAE,CAAA,GAAA,CAAIuD,GAAKA,CAAE,CAAA,IAAA,EAAM,CAAA,CAAE,OAAOA,CAAKA,EAAAA,CAAC,CAC9DD,CAAAA,CAAAA,CAAe,SAAW,CAC1BA,GAAAA,CAAAA,CAAiB,MAIrBA,CAAAA,CAAAA,CAAAA,CAAAA,GAAmB,QAAaA,CAAmB,GAAA,EAAA,CAClDD,EAAmBD,CAAS,CAAA,CAAIE,EAEjC,OAAQD,CAAAA,CAAmBD,CAAS,CAAA,CAIxC,KAAK,KAAM,CAAA,WAAA,CAAYlF,CAAQ,CAAA,CAAE,QAASmF,CAAY,CAAA,MAAA,CAAQ,CAAE,CAAC,EAEjE,IAAK,CAAA,GAAA,CAAI,2BAA2BnF,CAAM,CAAA,yBAAA,CAAA,CAA6BmF,CAAU,CAGjF,CAAA,IAAA,CAAK,WAAYnF,CAAAA,CAAAA,CAAQS,EAAW,KAAK,EAC3C,CAEQ,kBAAA,EAA2B,CACjC,IAAM6E,CAAAA,CAAiB,IAAK,CAAA,gBAAA,CAAiB,SAAS,IAAM,CAAA,sBAAsB,EAClF,IAAK,CAAA,GAAA,CAAI,SAASA,CAAe,CAAA,MAAM,CAA2B,yBAAA,CAAA,CAAA,CAElEA,EAAe,OAAQC,CAAAA,CAAAA,EAAW,CAC9B,IAAML,CAAAA,CAAYK,EAAQ,YAAa,CAAA,oBAAoB,CACrDzE,CAAAA,CAAAA,CAAeyE,EAAQ,YAAa,CAAA,yBAAyB,EAEnE,GAAI,CAACL,GAAa,CAACpE,CAAAA,CAAc,CAC7B,IAAA,CAAK,IAAI,2FAA6FyE,CAAAA,CAAO,CAC7G,CAAA,MACJ,CAEA,IAAMhF,CAAAA,CAAc,IAAK,CAAA,aAAA,CAAc,SAAS,IAAM,CAAA,CAAA,CAAA,EAAIV,CAAW,CAAYiB,SAAAA,EAAAA,CAAY,IAAI,CACjG,CAAA,GAAI,CAACP,CAAAA,CAAa,OAClB,IAAME,CAAAA,CAAY,IAAK,CAAA,OAAA,CAAQF,EAAaT,CAAM,CAAA,OAAO,CACzD,CAAA,GAAI,CAACW,CAAW,CAAA,OAEhB,IAAM+E,CAAgBD,CAAAA,CAAAA,YAAmB,kBAAoB,CAAC,MAAA,CAAQ,QAAQ,CAAA,CAAE,SAASA,CAAQ,CAAA,IAAI,CAAK,CAAA,GAAA,CAAM,EAE1GE,CAAU,CAAA,IAAM,CAClB,IAAM3D,EAAQ,IAAK,CAAA,eAAA,CAAgByD,CAA+C,CAClF,CAAA,IAAA,CAAK,sBAAsBzE,CAAcL,CAAAA,CAAAA,CAAWyE,CAAWpD,CAAAA,CAAK,EACxE,CAEM4D,CAAAA,CAAAA,CAAmB,KAAK,QAASD,CAAAA,CAAAA,CAASD,CAAY,CAEtDG,CAAAA,CAAAA,CAAaJ,CAAmB,YAAA,gBAAA,EAAoB,CAAC,MAAQ,CAAA,QAAQ,EAAE,QAASA,CAAAA,CAAAA,CAAQ,IAAI,CAAK,CAAA,OAAA,CAAU,QACjHA,CAAAA,CAAAA,CAAQ,iBAAiBI,CAAWD,CAAAA,CAAgB,EACxD,CAAC,EACH,CAEQ,QAAA,CAASE,CAAgCC,CAAAA,CAAAA,CAAyC,CACxF,IAAIC,CAAAA,CACJ,OAAO,CAAIC,GAAAA,CAAAA,GAAgB,CACvB,YAAaD,CAAAA,CAAS,CAClBD,CAAAA,CAAAA,CAAQ,EACRC,CAAY,CAAA,MAAA,CAAO,UAAW,CAAA,IAAMF,EAAK,KAAM,CAAA,IAAA,CAAMG,CAAI,CAAA,CAAGF,CAAK,CAEjED,CAAAA,CAAAA,CAAK,MAAM,IAAMG,CAAAA,CAAI,EAE7B,CACF,CAKQ,OAAQpE,CAAAA,CAAAA,CAAkBqE,EAA6B,CAC7D,OAAOrE,CAAQ,CAAA,YAAA,CAAa,GAAG9B,CAAW,CAAA,EAAGmG,CAAI,CAAA,CAAE,CACrD,CAEQ,aAAA,CAAcrE,EAAkBsE,CAAkC,CAAA,CACxE,OAAOtE,CAAQ,CAAA,aAAA,CAAcsE,CAAQ,CACvC,CAEQ,gBAAiBtE,CAAAA,CAAAA,CAAkBsE,EAA6B,CACtE,OAAO,MAAM,IAAKtE,CAAAA,CAAAA,CAAQ,gBAAiBsE,CAAAA,CAAQ,CAAC,CACtD,CAEQ,wBAAwBtE,CAAiC,CAAA,CAC/D,IAAMV,CAAyB,CAAA,EAc/B,CAAA,OAAA,MAAA,CAAO,QAXW,CAChB,SAAA,CAAa,WACb,CAAA,SAAA,CAAa,YACb,QAAY,CAAA,UAAA,CACZ,UAAY,CAAA,SAAA,CACZ,WAAY,SACZ,CAAA,IAAA,CAAQ,SACR,KAAS,CAAA,OAAA,CACT,OAAU,QACZ,CAEwB,CAAE,CAAA,OAAA,CAAQ,CAAC,CAACwC,CAAAA,CAAMyB,CAAS,CAAA,GAAM,CACvD,IAAMpD,CAAAA,CAAQ,IAAK,CAAA,OAAA,CAAQH,EAAS8B,CAAI,CAAA,CACpC3B,GAAS,IACPoD,GAAAA,CAAAA,GAAc,YACfjE,CAAgBiE,CAAAA,CAAS,CAAIpD,CAAAA,CAAAA,GAAU,OAC/BoD,CAAc,GAAA,WAAA,CACtBjE,CAAgBiE,CAAAA,CAAS,EAAIpD,CAAM,CAAA,KAAA,CAAM,GAAG,CAAA,CAAE,IAAIuD,CAAKA,EAAAA,CAAAA,CAAE,MAAM,CAAA,CACvD,CAAC,SAAW,CAAA,SAAA,CAAW,OAAS,CAAA,QAAQ,EAAE,QAASH,CAAAA,CAAS,EACpEjE,CAAgBiE,CAAAA,CAAS,EAAI,QAASpD,CAAAA,CAAK,CAE3Cb,CAAAA,CAAAA,CAAgBiE,CAAS,CAAIpD,CAAAA,CAAAA,EAGpC,CAAC,CAGGb,CAAAA,CAAAA,CAAQ,SAAW,MACrBA,GAAAA,CAAAA,CAAQ,MAAS,CAAA,CAAA,CAAA,CAGZA,CACT,CAEQ,eAAA,CAAgBsE,CAAoD,CAAA,CAC1E,GAAIA,CAAmB,YAAA,gBAAA,CACrB,OAAQA,CAAAA,CAAQ,MACd,KAAK,WACH,OAAOA,CAAAA,CAAQ,QACjB,KAAK,QAAA,CACL,KAAK,OAAA,CACH,OAAOA,CAAQ,CAAA,aAAA,CACjB,QACE,OAAOA,EAAQ,KACnB,CAAA,KAAA,GACSA,CAAmB,YAAA,iBAAA,CAC5B,OAAIA,CAAQ,CAAA,QAAA,CACH,MAAM,IAAKA,CAAAA,CAAAA,CAAQ,eAAe,CAAE,CAAA,GAAA,CAAIW,CAAUA,EAAAA,CAAAA,CAAO,KAAK,CAEhEX,CAAAA,CAAAA,CAAQ,KAEjB,CAAA,OAAO,IACT,CAEQ,WAAA,CAAY5B,CAAoBwC,CAAAA,CAAAA,CAAqB,CAC3D,IAAMC,CAAAA,CAAiB,KAAK,aAAczC,CAAAA,CAAAA,CAAW,IAAI9D,CAAW,CAAA,EAAGC,CAAM,CAAA,OAAO,GAAG,CACnFsG,CAAAA,CAAAA,GACDA,EAA+B,KAAM,CAAA,OAAA,CAAUD,EAAO,EAAK,CAAA,MAAA,CAAA,CAG7DxC,CAA0B,CAAA,SAAA,CAAU,OAAO,IAAK,CAAA,MAAA,CAAO,aAAcwC,CAAI,EAC5E,CAEQ,SAAUxC,CAAAA,CAAAA,CAAoBnD,CAAoB,CAAA,CACxD,IAAM6F,CAAe,CAAA,IAAA,CAAK,aAAc1C,CAAAA,CAAAA,CAAW,IAAI9D,CAAW,CAAA,EAAGC,CAAM,CAAA,KAAK,GAAG,CAC/EuG,CAAAA,CAAAA,GACFA,EAAa,WAAc7F,CAAAA,CAAAA,CAAM,QAChC6F,CAA6B,CAAA,KAAA,CAAM,OAAU,CAAA,EAAA,CAAA,CAG/C1C,EAA0B,SAAU,CAAA,GAAA,CAAI,IAAK,CAAA,MAAA,CAAO,UAAU,CAC/D,CAAA,IAAA,CAAK,GAAI,CAAA,iBAAA,CAAmBnD,CAAK,EACnC,CAEQ,cAAc8F,CAA4BC,CAAAA,CAAAA,CAAmBC,EAAmB,CACtF,IAAMC,CAAQ,CAAA,IAAI,YAAY,CAAUF,OAAAA,EAAAA,CAAS,CAAI,CAAA,CAAA,CAAE,OAAAC,CAAO,CAAC,CAC/DF,CAAAA,CAAAA,CAAO,cAAcG,CAAK,EAC5B,CAEQ,GAAIC,CAAAA,CAAAA,CAAAA,GAAoBX,EAAmB,CAC7C,IAAA,CAAK,MAAO,CAAA,KAAA,EACd,QAAQ,GAAI,CAAA,CAAA,gBAAA,EAAmBW,CAAO,CAAI,CAAA,CAAA,GAAGX,CAAI,EAErD,CACF,EAKA,SAASY,GAAiB,CACxB,IAAMC,EAAgB,QAAS,CAAA,cAAA,CAAe,eAAe,CAC7D,CAAA,GAAI,CAACA,CAAAA,CAAe,CAClB,OAAQ,CAAA,IAAA,CAAK,mEAAmE,CAAA,CAChF,MACF,CAEA,GAAI,CACF,IAAMxG,EAAS,IAAK,CAAA,KAAA,CAAMwG,EAAc,WAAe,EAAA,IAAI,EAG3D,GAAI,CAACxG,CAAO,CAAA,MAAA,CAAQ,CAClB,OAAQ,CAAA,KAAA,CAAM,gDAAgD,CAAA,CAC9D,MACF,CAcA,UAAA,CAZ0B,IAAM,CAChC,IAAMyG,CAAU,CAAA,IAAI1G,EAAqBC,CAAM,CAAA,CAG9C,OAAe,aAAgByG,CAAAA,CAAAA,CAEhCA,CAAQ,CAAA,IAAA,GAAO,KAAMrG,CAAAA,CAAAA,EAAS,CAC5B,OAAA,CAAQ,MAAM,gDAAkDA,CAAAA,CAAK,EACvE,CAAC,EACD,CAG8B,CAAA,GAAG,EAEnC,CAASA,MAAAA,CAAAA,CAAO,CACd,OAAQ,CAAA,KAAA,CAAM,yCAA2CA,CAAAA,CAAK,EAChE,CACF,CAGI,SAAS,UAAe,GAAA,SAAA,CAC1B,SAAS,gBAAiB,CAAA,kBAAA,CAAoBmG,CAAQ,CAAA,CAC7C,SAAS,UAAe,GAAA,aAAA,CAEjC,WAAWA,CAAU,CAAA,EAAE,EAGvBA,CAAS,EAAA","file":"index.mjs","sourcesContent":["import { ContraClient, utils } from '@contra/client';\nimport type {\n  ExpertProfile,\n  ExpertFilters,\n  FilterChangeEvent,\n  ExpertLoadEvent,\n  ErrorEvent,\n  ExpertField\n} from '@contra/types';\n\n/**\n * Webflow Runtime for Contra Experts\n * Simplified for flexibility and predictability.\n */\n\n// Simplified configuration\ninterface RuntimeConfig {\n  apiKey: string;\n  debug?: boolean;\n  loadingClass?: string;\n  errorClass?: string;\n  emptyClass?: string;\n  // Video configuration\n  videoAutoplay?: boolean;\n  videoHoverPlay?: boolean;\n  videoMuted?: boolean;\n  videoLoop?: boolean;\n  videoControls?: boolean;\n}\n\n// Attribute constants\nconst ATTR_PREFIX = 'data-contra-';\nconst ATTRS = {\n  // Core list attributes\n  listId: 'list-id',\n  program: 'program',\n  template: 'template',\n  \n  // States\n  loading: 'loading',\n  error: 'error',\n  empty: 'empty',\n  \n  // Field binding\n  field: 'field',\n  format: 'format',\n  \n  // Repeating elements\n  repeat: 'repeat',\n  max: 'max',\n  \n  // Sorting and pagination\n  limit: 'limit',\n  \n  // Actions\n  action: 'action',\n  listTarget: 'list-target',\n\n  // Conditional display\n  showWhen: 'show-when',\n  hideWhen: 'hide-when'\n} as const;\n\n// State management is now keyed by the list's unique ID\nclass RuntimeState {\n  private states = new Map<string, {\n    filters: ExpertFilters;\n    experts: ExpertProfile[];\n    loading: boolean;\n    error: Error | null;\n    offset: number;\n    limit: number;\n    totalCount: number;\n    hasNextPage: boolean;\n  }>();\n\n  getState(listId: string) {\n    if (!this.states.has(listId)) {\n      this.states.set(listId, {\n        filters: {},\n        experts: [],\n        loading: false,\n        error: null,\n        offset: 0,\n        limit: 20, // Default limit\n        totalCount: 0,\n        hasNextPage: false\n      });\n    }\n    return this.states.get(listId)!;\n  }\n\n  updateState(listId: string, updates: Partial<ReturnType<RuntimeState['getState']>>) {\n    const state = this.getState(listId);\n    Object.assign(state, updates);\n    this.states.set(listId, state);\n  }\n}\n\n/**\n * Main Runtime Class\n */\nexport class ContraWebflowRuntime {\n  private client: ContraClient;\n  private config: Required<RuntimeConfig>;\n  private state = new RuntimeState();\n  private debouncedReload: Map<string, () => void> = new Map();\n\n  constructor(config: RuntimeConfig) {\n    this.config = {\n      debug: false,\n      loadingClass: 'loading',\n      errorClass: 'error',\n      emptyClass: 'empty',\n      // Video configuration defaults\n      videoAutoplay: false,\n      videoHoverPlay: true,\n      videoMuted: true,\n      videoLoop: true,\n      videoControls: false,\n      ...config\n    };\n\n    this.client = new ContraClient({\n      apiKey: this.config.apiKey,\n      debug: this.config.debug\n    });\n\n    this.log('Runtime initialized', this.config);\n  }\n\n  /**\n   * Initialize the runtime by finding and setting up all lists.\n   */\n  async init(): Promise<void> {\n    this.log('Initializing runtime...');\n\n    try {\n      // 1. Discover all lists on the page\n      const listElements = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.listId}]`);\n      this.log(`Found ${listElements.length} lists to initialize.`);\n\n      // 2. Initialize each list\n      for (const listElement of listElements) {\n        await this.initList(listElement);\n      }\n\n      // 3. Wire up all action buttons\n      this.wireActionButtons();\n\n      // 4. Wire up all filter controls\n      this.wireFilterControls();\n\n      this.log('Runtime initialization complete');\n    } catch (error) {\n      this.log('Runtime initialization failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize a single expert list.\n   */\n  private async initList(listElement: Element): Promise<void> {\n    const listId = this.getAttr(listElement, ATTRS.listId);\n    const programId = this.getAttr(listElement, ATTRS.program);\n\n    if (!listId || !programId) {\n      this.log('List element is missing required attributes `data-contra-list-id` or `data-contra-program`.', listElement);\n      return;\n    }\n\n    this.log(`Initializing list: ${listId} for program: ${programId}`);\n\n    try {\n      // Mark as initialized\n      (listElement as HTMLElement).setAttribute('data-contra-initialized', 'true');\n    \n      // Parse initial filters from the list element itself\n      const initialFilters = this.parseFiltersFromElement(listElement);\n      const limit = parseInt(this.getAttr(listElement, ATTRS.limit) || '20', 10);\n      \n      // Update state with these initial settings\n      this.state.updateState(listId, { \n      filters: initialFilters,\n        limit: limit,\n        offset: initialFilters.offset || 0,\n      });\n      \n      this.log(`List setup complete for: ${listId}`, { initialFilters, limit });\n      \n      // Load initial data for the list\n      await this.loadExperts(listId, programId);\n\n    } catch (error) {\n      this.log(`Failed to initialize list ${listId}`, error);\n      this.showError(listElement, error as Error);\n    }\n  }\n\n  /**\n   * Wire up all action buttons on the page.\n   */\n  private wireActionButtons(): void {\n    const actionButtons = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.action}]`);\n    \n    actionButtons.forEach(button => {\n      const action = this.getAttr(button, ATTRS.action);\n      const targetListId = this.getAttr(button, ATTRS.listTarget);\n      \n      if (!action || !targetListId) {\n        this.log('Action button is missing required `data-contra-action` or `data-contra-list-target` attributes.', button);\n        return;\n      }\n\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.handleAction(action, targetListId, button);\n      });\n    });\n  }\n\n  /**\n   * Load experts for a given list.\n   */\n  private async loadExperts(listId: string, programId: string, append = false): Promise<void> {\n    const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${listId}\"]`);\n    if (!listElement) {\n      this.log(`Cannot find list element with ID: ${listId}`);\n      return;\n    }\n\n    const state = this.state.getState(listId);\n    const filters = {\n      ...state.filters,\n      limit: state.limit,\n      offset: state.offset,\n    };\n    \n    this.log(`Loading experts for list: ${listId}`, filters);\n\n    try {\n      this.showLoading(listElement, true);\n      this.state.updateState(listId, { loading: true, error: null });\n\n      const response = await this.client.listExperts(programId, filters);\n      \n      this.log(`Loaded ${response.data.length} experts for list ${listId}`, response);\n\n      const newExperts = response.data;\n      const allExperts = append ? [...state.experts, ...newExperts] : newExperts;\n\n      // Update state\n      this.state.updateState(listId, {\n        experts: allExperts,\n        totalCount: response.totalCount,\n        offset: state.offset + newExperts.length,\n        hasNextPage: newExperts.length === state.limit,\n        loading: false\n      });\n\n      // Render experts\n      this.renderExperts(listElement, newExperts, append);\n      \n      // Update UI states\n      this.updateUIStates(listElement, listId);\n\n    } catch (error) {\n      this.log(`Failed to load experts for list: ${listId}`, error);\n      \n      this.state.updateState(listId, { \n        loading: false, \n        error: error as Error \n      });\n      \n      this.showError(listElement, error as Error);\n      \n    } finally {\n      this.showLoading(listElement, false);\n    }\n  }\n\n  /**\n   * Render experts into the container. Can clear or append.\n   */\n  private renderExperts(listElement: Element, experts: ExpertProfile[], append: boolean): void {\n    const template = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    if (!template) {\n      this.log('No template found in list', listElement);\n      return;\n    }\n\n    if (!append) {\n      // Clear only previously rendered expert cards\n      const existingCards = this.querySelectorAll(listElement, '.contra-rendered-item');\n    existingCards.forEach(card => card.remove());\n    }\n\n    const fragment = document.createDocumentFragment();\n    experts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert);\n      fragment.appendChild(expertCard);\n    });\n    listElement.appendChild(fragment);\n\n    this.log(`Rendered ${experts.length} expert cards into list`, listElement);\n  }\n\n  /**\n   * Populate expert card from template\n   */\n  private populateExpertCard(template: Element, expert: ExpertProfile): Element {\n    const card = template.cloneNode(true) as Element;\n    \n    // Add a marker class to identify this as a rendered card\n    card.classList.add('contra-rendered-item');\n    \n    // Remove template attribute and show the card\n    card.removeAttribute(`${ATTR_PREFIX}${ATTRS.template}`);\n    (card as HTMLElement).style.display = '';\n\n    // Populate field bindings\n    this.populateFields(card, expert);\n    \n    // Handle repeating elements (projects, social links)\n    this.populateRepeatingElements(card, expert);\n    \n    // Handle conditional display\n    this.handleConditionalDisplay(card, expert);\n\n    return card;\n  }\n\n  /**\n   * Populate data fields in the card\n   */\n  private populateFields(card: Element, expert: ExpertProfile): void {\n    const fieldElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.field}]`);\n    \n    fieldElements.forEach(element => {\n      const fieldName = this.getAttr(element, ATTRS.field) as ExpertField;\n      const format = this.getAttr(element, ATTRS.format);\n      \n      if (!fieldName || !(fieldName in expert)) return;\n\n      const value = expert[fieldName];\n      this.setElementValue(element, value, format);\n    });\n\n    // Handle star ratings\n    const starsElements = this.querySelectorAll(card, '[data-contra-stars]');\n    starsElements.forEach(element => {\n      if (expert.averageReviewScore) {\n        this.renderStarRating(element, expert.averageReviewScore);\n      }\n    });\n  }\n\n  /**\n   * Set element value with proper formatting\n   */\n  private setElementValue(element: Element, value: any, format?: string | null): void {\n    if (value == null || value === '') return;\n\n    // Media type detection and handling\n    if (this.isMediaField(element) && typeof value === 'string' && value.trim()) {\n      this.setMediaValue(element, value);\n      return;\n    }\n\n    if (element instanceof HTMLAnchorElement) {\n      element.href = String(value);\n      if (element.children.length === 0 && !element.textContent?.trim()) {\n        element.textContent = String(value);\n      }\n    } else if (element instanceof HTMLInputElement) {\n      element.value = String(value);\n    } else if (element instanceof HTMLImageElement) {\n      // Regular image handling for avatars and other images\n      element.src = String(value);\n      element.alt = element.alt || 'Image';\n    } else {\n      // Text content with formatting\n      let displayValue = String(value);\n      \n      if (format) {\n        switch (format) {\n          case 'currency':\n            displayValue = typeof value === 'number' ? `$${value}` : displayValue;\n            break;\n          case 'rate':\n            displayValue = utils.formatRate(typeof value === 'number' ? value : null);\n            break;\n          case 'rating':\n            // Format rating to one decimal place (5.0, 4.9, etc.)\n            displayValue = typeof value === 'number' ? value.toFixed(1) : displayValue;\n            break;\n          case 'earnings':\n            // Format earnings like $25k+\n            if (typeof value === 'number') {\n              if (value >= 1000000) {\n                displayValue = `$${Math.floor(value / 1000000)}M+`;\n              } else if (value >= 1000) {\n                displayValue = `$${Math.floor(value / 1000)}k+`;\n              } else {\n                displayValue = `$${value}`;\n              }\n            }\n            break;\n          case 'number':\n            displayValue = typeof value === 'number' ? value.toLocaleString() : displayValue;\n            break;\n          case 'truncate':\n            displayValue = displayValue.length > 100 ? displayValue.substring(0, 97) + '...' : displayValue;\n            break;\n          case 'boolean':\n            displayValue = value ? 'Yes' : 'No';\n            break;\n          case 'availability':\n            displayValue = value ? 'Available' : 'Not Available';\n            break;\n        }\n      }\n      \n      element.textContent = displayValue;\n    }\n  }\n\n  /**\n   * Star rating rendering with optional text display\n   */\n  private renderStarRating(element: Element, rating: number): void {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    let starsHtml = '';\n    \n    // Full stars\n    for (let i = 0; i < fullStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-full\">★</span>';\n    }\n    \n    // Half star\n    if (hasHalfStar) {\n      starsHtml += '<span class=\"contra-star contra-star-half\">★</span>';\n    }\n    \n    // Empty stars\n    for (let i = 0; i < emptyStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-empty\">☆</span>';\n    }\n    \n    element.innerHTML = starsHtml;\n    \n    // Also update any rating text elements in the same card\n    const card = element.closest('[data-contra-template]') || element.closest('.expert-card');\n    if (card) {\n      const ratingTextElements = this.querySelectorAll(card, '[data-contra-rating-text]');\n      ratingTextElements.forEach(textElement => {\n        textElement.textContent = rating.toFixed(1);\n      });\n    }\n  }\n\n  /**\n   * Media type detection and element handling\n   */\n  private isMediaField(element: Element): boolean {\n    const field = this.getAttr(element, ATTRS.field);\n    // Only apply advanced media handling to project cover URLs, not avatars\n    return field === 'coverUrl';\n  }\n\n  /**\n   * Media value setting with automatic type detection\n   */\n  private setMediaValue(element: Element, url: string): void {\n    const mediaType = this.detectMediaType(url);\n    const parent = element.parentElement;\n    \n    if (!parent) {\n      this.log('Media element has no parent for replacement', element);\n      return;\n    }\n\n    // Remove existing media element\n    element.remove();\n\n    // Create appropriate media element\n    let mediaElement: HTMLElement;\n    \n    switch (mediaType) {\n      case 'video':\n        mediaElement = this.createVideoElement(url, element);\n        break;\n      case 'image':\n      default:\n        mediaElement = this.createImageElement(url, element);\n        break;\n    }\n\n    // Preserve classes and attributes from original element\n    this.transferAttributes(element, mediaElement);\n    \n    // Insert new media element\n    parent.appendChild(mediaElement);\n    \n    this.log(`Created ${mediaType} element for URL: ${url}`);\n  }\n\n  /**\n   * Detect media type from URL\n   */\n  private detectMediaType(url: string): 'image' | 'video' {\n    if (!url || typeof url !== 'string') {\n      this.log('Invalid URL provided to detectMediaType:', url);\n      return 'image';\n    }\n    \n    const urlLower = url.toLowerCase();\n    \n    // Video formats\n    const videoExtensions = ['.mp4', '.webm', '.mov', '.avi', '.mkv', '.ogg'];\n    const isVideo = videoExtensions.some(ext => urlLower.includes(ext));\n    \n    // Special handling for Cloudinary video URLs\n    const isCloudinaryVideo = urlLower.includes('cloudinary.com/') && urlLower.includes('/video/');\n    \n    return (isVideo || isCloudinaryVideo) ? 'video' : 'image';\n  }\n\n  /**\n   * Create video element with fallback\n   */\n  private createVideoElement(url: string, originalElement: Element): HTMLVideoElement {\n    const video = document.createElement('video');\n    \n    // Video attributes\n    video.src = url;\n    video.muted = this.config.videoMuted;\n    video.loop = this.config.videoLoop;\n    video.playsInline = true;\n    video.preload = 'metadata';\n    video.controls = this.config.videoControls;\n    \n    // Maintain aspect ratio and object-fit from original\n    video.style.width = '100%';\n    video.style.height = '100%';\n    video.style.objectFit = 'cover';\n    video.style.borderRadius = 'inherit';\n    \n    // Autoplay configuration\n    if (this.config.videoAutoplay) {\n      video.autoplay = true;\n      video.setAttribute('autoplay', '');\n    }\n    \n    // Error handling with fallback to poster or placeholder\n    video.onerror = () => {\n      this.log(`Video failed to load: ${url}`);\n      // Try to extract a thumbnail from Cloudinary video URL\n      const posterUrl = this.extractVideoThumbnail(url);\n      if (posterUrl) {\n        const fallbackImg = this.createImageElement(posterUrl, originalElement);\n        video.parentElement?.replaceChild(fallbackImg, video);\n      } else {\n        // Show placeholder\n        video.style.background = '#f3f4f6';\n        video.style.position = 'relative';\n        video.innerHTML = '<div style=\"position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);color:#9ca3af;font-size:12px;\">Video unavailable</div>';\n      }\n    };\n\n    // Hover-to-play functionality (if enabled and not autoplay)\n    if (this.config.videoHoverPlay && !this.config.videoAutoplay) {\n      video.addEventListener('mouseenter', () => {\n        video.currentTime = 0;\n        video.play().catch(() => {\n          // Ignore play errors (browser policies)\n        });\n      });\n\n      video.addEventListener('mouseleave', () => {\n        video.pause();\n        video.currentTime = 0;\n      });\n    }\n\n    return video;\n  }\n\n  /**\n   * Create image element with error handling\n   */\n  private createImageElement(url: string, originalElement: Element): HTMLImageElement {\n    const img = document.createElement('img');\n    \n    img.src = url;\n    img.alt = originalElement.getAttribute('alt') || 'Media content';\n    img.loading = 'lazy';\n    \n    // Maintain styling\n    img.style.width = '100%';\n    img.style.height = '100%';\n    img.style.objectFit = 'cover';\n    img.style.borderRadius = 'inherit';\n    \n    // Error handling\n    img.onerror = () => {\n      this.log(`Image failed to load: ${url}`);\n      img.style.background = '#f3f4f6';\n      img.style.opacity = '0.5';\n      img.alt = 'Image unavailable';\n      \n      // Add broken image icon\n      img.style.position = 'relative';\n      const placeholder = document.createElement('div');\n      placeholder.style.cssText = `\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        color: #9ca3af;\n        font-size: 12px;\n        text-align: center;\n      `;\n      placeholder.textContent = '🖼️ Image unavailable';\n      img.parentElement?.appendChild(placeholder);\n    };\n\n    return img;\n  }\n\n  /**\n   * Extract video thumbnail from Cloudinary URL\n   */\n  private extractVideoThumbnail(videoUrl: string): string | null {\n    if (videoUrl.includes('cloudinary.com/') && videoUrl.includes('/video/')) {\n      // Convert video URL to image thumbnail\n      return videoUrl\n        .replace('/video/', '/image/')\n        .replace(/\\.(mp4|webm|mov|avi|mkv)$/i, '.jpg')\n        .replace('fl_progressive', 'f_auto,q_auto,c_fill');\n    }\n    return null;\n  }\n\n  /**\n   * Transfer attributes and classes from old element to new\n   */\n  private transferAttributes(from: Element, to: HTMLElement): void {\n    // Transfer classes\n    if (from.className) {\n      to.className = from.className;\n    }\n    \n    // Transfer data attributes (except contra-field)\n    Array.from(from.attributes).forEach(attr => {\n      if (attr.name.startsWith('data-') && attr.name !== `${ATTR_PREFIX}${ATTRS.field}`) {\n        to.setAttribute(attr.name, attr.value);\n      }\n    });\n    \n    // Transfer style\n    if (from.getAttribute('style')) {\n      const existingStyle = to.getAttribute('style') || '';\n      to.setAttribute('style', existingStyle + '; ' + from.getAttribute('style'));\n    }\n  }\n\n  /**\n   * Handle repeating elements (projects, social links)\n   */\n  private populateRepeatingElements(card: Element, expert: ExpertProfile): void {\n    const repeatElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.repeat}]`);\n    \n    repeatElements.forEach(container => {\n      const repeatType = this.getAttr(container, ATTRS.repeat);\n      const maxItems = parseInt(this.getAttr(container, ATTRS.max) || '10');\n      \n      if (repeatType === 'projects' && expert.projects) {\n        this.populateRepeatingContainer(container, expert.projects.slice(0, maxItems));\n      } else if (repeatType === 'socialLinks' && expert.socialLinks) {\n        this.populateRepeatingContainer(container, expert.socialLinks.slice(0, maxItems));\n      } else if (repeatType === 'skillTags' && expert.skillTags) {\n        this.populateRepeatingContainer(container, expert.skillTags.slice(0, maxItems).map((tag: string) => ({ name: tag })));\n      }\n    });\n  }\n\n  /**\n   * Populate a repeating container with items\n   */\n  private populateRepeatingContainer(container: Element, items: any[]): void {\n    const template = container.firstElementChild;\n    if (!template) return;\n\n    // Clear existing items\n    container.innerHTML = '';\n    \n    // Create items from template\n    items.forEach(item => {\n      const itemElement = template.cloneNode(true) as Element;\n      this.populateFields(itemElement, item);\n      container.appendChild(itemElement);\n    });\n    \n    // Hide container if no items\n    if (items.length === 0) {\n      (container as HTMLElement).style.display = 'none';\n    }\n  }\n\n  /**\n   * Handle conditional display based on data\n   */\n  private handleConditionalDisplay(card: Element, expert: ExpertProfile): void {\n    const conditionalElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.showWhen}], [${ATTR_PREFIX}${ATTRS.hideWhen}]`);\n    \n    conditionalElements.forEach(element => {\n      const showWhen = this.getAttr(element, ATTRS.showWhen);\n      const hideWhen = this.getAttr(element, ATTRS.hideWhen);\n      \n      let shouldShow = true;\n      \n      if (showWhen) {\n        shouldShow = this.evaluateCondition(expert, showWhen);\n      }\n      \n      if (hideWhen) {\n        shouldShow = shouldShow && !this.evaluateCondition(expert, hideWhen);\n      }\n      \n      (element as HTMLElement).style.display = shouldShow ? '' : 'none';\n    });\n  }\n\n  /**\n   * Evaluate a condition against expert data\n   */\n  private evaluateCondition(expert: ExpertProfile, condition: string): boolean {\n    if (!condition || typeof condition !== 'string') {\n      this.log('Invalid condition provided:', condition);\n      return false;\n    }\n    \n    // Parse condition: \"field:value\" or \"field:>value\" etc.\n    const parts = condition.split(':');\n    if (parts.length < 2) {\n      this.log('Invalid condition format:', condition);\n      return false;\n    }\n    \n    const field = parts[0];\n    const restOfCondition = parts.slice(1).join(':'); // Handle colons in values\n    const expertValue = (expert as any)[field];\n    \n    this.log(`Evaluating condition: ${field} (${expertValue}, type: ${typeof expertValue}) against ${restOfCondition}`);\n    \n    if (expertValue == null) {\n      this.log(`Field '${field}' is null/undefined, condition fails`);\n      return false;\n    }\n    \n    // Check for comparison operators\n    if (restOfCondition.startsWith('>=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) >= Number(value);\n      this.log(`Comparison: ${expertValue} >= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) <= Number(value);\n      this.log(`Comparison: ${expertValue} <= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('>')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) > Number(value);\n      this.log(`Comparison: ${expertValue} > ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) < Number(value);\n      this.log(`Comparison: ${expertValue} < ${value} = ${result}`);\n      return result;\n    } else {\n      // Direct value comparison with type-aware handling\n      let result = false;\n      \n      // Handle boolean fields specially\n      if (typeof expertValue === 'boolean') {\n        // Convert string condition to boolean for comparison\n        if (restOfCondition.toLowerCase() === 'true') {\n          result = expertValue === true;\n        } else if (restOfCondition.toLowerCase() === 'false') {\n          result = expertValue === false;\n        } else {\n          result = false;\n        }\n        this.log(`Boolean comparison: ${expertValue} === ${restOfCondition.toLowerCase() === 'true'} = ${result}`);\n      } else if (typeof expertValue === 'number') {\n        // Handle numeric comparisons\n        const numValue = Number(restOfCondition);\n        result = !isNaN(numValue) && expertValue === numValue;\n        this.log(`Number comparison: ${expertValue} === ${numValue} = ${result}`);\n      } else {\n        // String comparison (case-insensitive)\n        const expertStr = String(expertValue);\n        const valueStr = String(restOfCondition);\n        result = expertStr.toLowerCase() === valueStr.toLowerCase();\n        this.log(`String comparison: '${expertStr}' === '${valueStr}' = ${result}`);\n      }\n      \n      return result;\n    }\n  }\n\n  /**\n   * Update UI states based on current data for a specific list.\n   */\n  private updateUIStates(listElement: Element, listId: string): void {\n    const state = this.state.getState(listId);\n    \n    // Show/hide empty state\n    const emptyElement = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (emptyElement) {\n      (emptyElement as HTMLElement).style.display = state.experts.length === 0 && !state.loading ? '' : 'none';\n    }\n    \n    // Update and control visibility of the load more button\n    const loadMoreButton = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listTarget}=\"${listId}\"]`);\n    if (loadMoreButton) {\n      const btn = loadMoreButton as HTMLButtonElement;\n      const hasMore = state.hasNextPage;\n\n      btn.style.display = hasMore ? '' : 'none';\n      btn.disabled = state.loading;\n      btn.textContent = state.loading ? 'Loading...' : 'Load More';\n    }\n  }\n\n  /**\n   * Handle action buttons (just load-more for now).\n   */\n  private handleAction(action: string, targetListId: string, button: Element): void {\n    if (action === 'load-more') {\n      const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${targetListId}\"]`);\n      const programId = this.getAttr(listElement!, ATTRS.program);\n      if (listElement && programId) {\n        this.loadExperts(targetListId, programId, true); // `true` to append\n      } else {\n        this.log(`Could not find list or program for target: ${targetListId}`);\n  }\n    }\n  }\n\n  private updateFilterAndReload(listId: string, programId: string, filterKey: string, value: any): void {\n    const state = this.state.getState(listId);\n    const newFilters = { ...state.filters };\n\n    // Process and set value\n    let processedValue = value;\n    if (filterKey === 'available') {\n      // If checkbox is checked, value is true. If unchecked, it's false.\n      // We only want to apply the filter when it's true.\n      processedValue = value ? true : undefined;\n    } else if (['minRate', 'maxRate'].includes(filterKey)) {\n      processedValue = (value === '' || value === null) ? undefined : Number(value);\n    } else if (filterKey === 'languages' && typeof value === 'string') {\n        processedValue = value.split(',').map(v => v.trim()).filter(v => v);\n        if (processedValue.length === 0) {\n            processedValue = undefined;\n        }\n    }\n\n    if (processedValue !== undefined && processedValue !== '') {\n        (newFilters as any)[filterKey] = processedValue;\n    } else {\n        delete (newFilters as any)[filterKey];\n    }\n    \n    // Reset offset and update state\n    this.state.updateState(listId, { filters: newFilters, offset: 0 });\n\n    this.log(`Filter updated for list ${listId}, reloading. New filters:`, newFilters);\n    \n    // Reload the list\n    this.loadExperts(listId, programId, false);\n  }\n\n  private wireFilterControls(): void {\n    const filterControls = this.querySelectorAll(document.body, `[data-contra-filter]`);\n    this.log(`Found ${filterControls.length} filter controls to wire.`);\n\n    filterControls.forEach(control => {\n        const filterKey = control.getAttribute('data-contra-filter');\n        const targetListId = control.getAttribute('data-contra-list-target');\n\n        if (!filterKey || !targetListId) {\n            this.log('Filter control missing required attributes: data-contra-filter or data-contra-list-target', control);\n            return;\n        }\n\n        const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}list-id=\"${targetListId}\"]`);\n        if (!listElement) return;\n        const programId = this.getAttr(listElement, ATTRS.program);\n        if (!programId) return;\n\n        const debounceTime = (control instanceof HTMLInputElement && ['text', 'search'].includes(control.type)) ? 300 : 0;\n        \n        const handler = () => {\n            const value = this.getControlValue(control as HTMLInputElement | HTMLSelectElement);\n            this.updateFilterAndReload(targetListId, programId, filterKey, value);\n        };\n        \n        const debouncedHandler = this.debounce(handler, debounceTime);\n        \n        const eventType = (control instanceof HTMLInputElement && ['text', 'search'].includes(control.type)) ? 'input' : 'change';\n        control.addEventListener(eventType, debouncedHandler);\n    });\n  }\n\n  private debounce(func: (...args: any[]) => void, delay: number): (...args: any[]) => void {\n    let timeoutId: number;\n    return (...args: any[]) => {\n        clearTimeout(timeoutId);\n        if (delay > 0) {\n            timeoutId = window.setTimeout(() => func.apply(this, args), delay);\n        } else {\n            func.apply(this, args);\n  }\n    };\n  }\n\n  /**\n   * Utility Methods\n   */\n  private getAttr(element: Element, name: string): string | null {\n    return element.getAttribute(`${ATTR_PREFIX}${name}`);\n  }\n\n  private querySelector(element: Element, selector: string): Element | null {\n    return element.querySelector(selector);\n  }\n\n  private querySelectorAll(element: Element, selector: string): Element[] {\n    return Array.from(element.querySelectorAll(selector));\n  }\n\n  private parseFiltersFromElement(element: Element): ExpertFilters {\n    const filters: ExpertFilters = {};\n    \n    // Parse filter attributes\n    const filterMap = {\n      'available': 'available',\n      'languages': 'languages', \n      'location': 'location',\n      'min-rate': 'minRate',\n      'max-rate': 'maxRate',\n      'sort': 'sortBy',\n      'limit': 'limit',\n      'offset': 'offset'\n    };\n\n    Object.entries(filterMap).forEach(([attr, filterKey]) => {\n      const value = this.getAttr(element, attr);\n      if (value != null) {\n        if (filterKey === 'available') {\n          (filters as any)[filterKey] = value === 'true';\n        } else if (filterKey === 'languages') {\n          (filters as any)[filterKey] = value.split(',').map(v => v.trim());\n        } else if (['minRate', 'maxRate', 'limit', 'offset'].includes(filterKey)) {\n          (filters as any)[filterKey] = parseInt(value);\n        } else {\n          (filters as any)[filterKey] = value;\n        }\n      }\n    });\n\n    // Ensure offset defaults to 0 if not specified\n    if (filters.offset === undefined) {\n      filters.offset = 0;\n    }\n\n    return filters;\n  }\n\n  private getControlValue(control: HTMLInputElement | HTMLSelectElement): any {\n    if (control instanceof HTMLInputElement) {\n      switch (control.type) {\n        case 'checkbox':\n          return control.checked;\n        case 'number':\n        case 'range':\n          return control.valueAsNumber;\n        default:\n          return control.value;\n      }\n    } else if (control instanceof HTMLSelectElement) {\n      if (control.multiple) {\n        return Array.from(control.selectedOptions).map(option => option.value);\n      }\n      return control.value;\n    }\n    return null;\n  }\n\n  private showLoading(container: Element, show: boolean): void {\n    const loadingElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n    if (loadingElement) {\n      (loadingElement as HTMLElement).style.display = show ? '' : 'none';\n    }\n    \n    (container as HTMLElement).classList.toggle(this.config.loadingClass, show);\n  }\n\n  private showError(container: Element, error: Error): void {\n    const errorElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.error}]`);\n    if (errorElement) {\n      errorElement.textContent = error.message;\n      (errorElement as HTMLElement).style.display = '';\n    }\n    \n    (container as HTMLElement).classList.add(this.config.errorClass);\n    this.log('Error displayed', error);\n  }\n\n  private dispatchEvent(target: Element | Document, eventName: string, detail: any): void {\n    const event = new CustomEvent(`contra:${eventName}`, { detail });\n    target.dispatchEvent(event);\n  }\n\n  private log(message: string, ...args: any[]): void {\n    if (this.config.debug) {\n      console.log(`[ContraWebflow] ${message}`, ...args);\n    }\n  }\n}\n\n/**\n * Auto-initialize runtime when DOM is ready\n */\nfunction autoInit(): void {\n  const configElement = document.getElementById('contra-config');\n  if (!configElement) {\n    console.warn('[ContraWebflow] No config element found. Runtime not initialized.');\n    return;\n  }\n\n  try {\n    const config = JSON.parse(configElement.textContent || '{}');\n    \n    // Validate required config\n    if (!config.apiKey) {\n      console.error('[ContraWebflow] API key is required in config.');\n      return;\n    }\n    \n    const initializeRuntime = () => {\n    const runtime = new ContraWebflowRuntime(config);\n    \n    // Expose runtime globally for debugging\n    (window as any).contraRuntime = runtime;\n    \n    runtime.init().catch(error => {\n      console.error('[ContraWebflow] Runtime initialization failed:', error);\n    });\n    };\n    \n    // Use setTimeout to ensure DOM is fully ready\n    setTimeout(initializeRuntime, 100);\n    \n  } catch (error) {\n    console.error('[ContraWebflow] Failed to parse config:', error);\n  }\n}\n\n// Auto-initialize when DOM is ready with multiple fallbacks\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', autoInit);\n} else if (document.readyState === 'interactive') {\n  // DOM is ready but resources might still be loading\n  setTimeout(autoInit, 50);\n} else {\n  // DOM and resources are ready\n  autoInit();\n}\n\n// Export runtime class for manual initialization\nexport { ContraWebflowRuntime as default }; "]}
{"version":3,"sources":["../src/runtime.ts"],"names":["ATTR_PREFIX","ATTRS","RuntimeState","programId","updates","state","pageNumber","experts","oldestPage","loading","ContraWebflowRuntime","config","ContraClient","allContainers","containers","container","error","containerId","element","paginationMode","limit","filterControls","control","filterKey","filterType","eventType","button","action","target","e","isPageNavigation","response","offset","currentPage","totalPages","hasNextPage","hasPreviousPage","isLoadMore","allExperts","filters","totalCount","template","card","expert","expertCard","fieldName","format","value","displayValue","utils","rating","fullStars","hasHalfStar","emptyStars","starsHtml","i","textElement","url","mediaType","parent","mediaElement","urlLower","isVideo","ext","isCloudinaryVideo","originalElement","video","posterUrl","fallbackImg","img","placeholder","videoUrl","from","to","attr","existingStyle","repeatType","maxItems","tag","items","item","itemElement","showWhen","hideWhen","shouldShow","condition","parts","field","restOfCondition","expertValue","result","numValue","expertStr","valueStr","emptyElement","pageSize","activeFilters","_key","key","_target","currentOffset","nextOffset","prevOffset","lastPageOffset","errorText","loadMoreButtons","btnElement","prevButtons","nextButtons","firstButtons","lastButtons","paginationSection","loadedCount","paginationControls","indicator","newExperts","fragment","name","selector","selectors","foundElements","elements","allContraElements","containerCandidates","div","hasLimit","hasTemplate","hasContraClass","uniqueContainers","v","option","type","newFilters","processedValue","currentArray","event","show","loadingElement","errorElement","eventName","detail","message","args","autoInit","configElement","runtime"],"mappings":"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","file":"index.mjs","sourcesContent":["import { ContraClient, utils } from '@contra/client';\nimport type {\n  ExpertProfile,\n  ExpertFilters,\n  FilterChangeEvent,\n  ExpertLoadEvent,\n  ErrorEvent,\n  ExpertField\n} from '@contra/types';\n\n/**\n * Webflow Runtime for Contra Experts\n * Features: Performance optimization, filtering, error handling, loading states\n */\n\n// Configuration interface\ninterface RuntimeConfig {\n  apiKey: string;\n  program?: string;  // Program ID from config\n  debug?: boolean;\n  loadingClass?: string;\n  errorClass?: string;\n  emptyClass?: string;\n  autoReload?: boolean;\n  debounceDelay?: number;\n  maxRetries?: number;\n  \n  // Pagination Configuration\n  paginationMode?: 'traditional' | 'infinite' | 'hybrid';\n  infiniteScrollThreshold?: number;        // Pixels from bottom to trigger load\n  preloadNextPage?: boolean;              // Preload next page for performance\n  maxCachedPages?: number;                // Max pages to keep in memory\n  smoothScrollBehavior?: 'auto' | 'smooth';\n  loadMoreText?: string;                  // Custom \"Load More\" button text\n  \n  // Video configuration\n  videoAutoplay?: boolean;\n  videoHoverPlay?: boolean;\n  videoMuted?: boolean;\n  videoLoop?: boolean;\n  videoControls?: boolean;\n}\n\n// Attribute constants\nconst ATTR_PREFIX = 'data-contra-';\nconst ATTRS = {\n  // Core attributes\n  program: 'program',\n  template: 'template',\n  loading: 'loading',\n  error: 'error',\n  empty: 'empty',\n  \n  // Field binding\n  field: 'field',\n  format: 'format',\n  \n  // Repeating elements\n  repeat: 'repeat',\n  max: 'max',\n  \n  // Filter controls\n  filter: 'filter',\n  filterType: 'filter-type',\n  \n  // Filter attributes\n  available: 'available',\n  \n  // Sorting and pagination\n  sort: 'sort',\n  page: 'page',\n  limit: 'limit',\n  \n  // Pagination mode and controls\n  paginationMode: 'pagination-mode',\n  infiniteLoading: 'infinite-loading',\n  paginationInfo: 'pagination-info',\n  \n  // UI states\n  showWhen: 'show-when',\n  hideWhen: 'hide-when',\n  \n  // Actions\n  action: 'action',\n  target: 'target'\n} as const;\n\n// State management\nclass RuntimeState {\n  private states = new Map<string, {\n    filters: ExpertFilters;\n    experts: ExpertProfile[];\n    loading: boolean;\n    error: Error | null;\n    currentPage: number;\n    totalCount: number;\n    // Advanced pagination state\n    cachedPages: Map<number, ExpertProfile[]>;\n    loadingPages: Set<number>;\n    hasNextPage: boolean;\n    hasPreviousPage: boolean;\n    isInfiniteLoading: boolean;\n    lastScrollPosition: number;\n    paginationMode: 'traditional' | 'infinite' | 'hybrid';\n    programId: string;\n  }>();\n\n  getState(programId: string) {\n    if (!this.states.has(programId)) {\n      this.states.set(programId, {\n        filters: {},\n        experts: [],\n        loading: false,\n        error: null,\n        currentPage: 1,\n        totalCount: 0,\n        // Advanced pagination defaults\n        cachedPages: new Map(),\n        loadingPages: new Set(),\n        hasNextPage: false,\n        hasPreviousPage: false,\n        isInfiniteLoading: false,\n        lastScrollPosition: 0,\n        paginationMode: 'traditional',\n        programId: ''\n      });\n    }\n    return this.states.get(programId)!;\n  }\n\n  updateState(programId: string, updates: Partial<ReturnType<RuntimeState['getState']>>) {\n    const state = this.getState(programId);\n    Object.assign(state, updates);\n    this.states.set(programId, state);\n  }\n\n  // Advanced pagination helpers\n  cachePage(programId: string, pageNumber: number, experts: ExpertProfile[]) {\n    const state = this.getState(programId);\n    state.cachedPages.set(pageNumber, experts);\n    \n    // Implement LRU cache cleanup\n    if (state.cachedPages.size > 5) { // maxCachedPages from config\n      const oldestPage = Math.min(...state.cachedPages.keys());\n      state.cachedPages.delete(oldestPage);\n    }\n  }\n\n  getCachedPage(programId: string, pageNumber: number): ExpertProfile[] | null {\n    const state = this.getState(programId);\n    return state.cachedPages.get(pageNumber) || null;\n  }\n\n  setPageLoading(programId: string, pageNumber: number, loading: boolean) {\n    const state = this.getState(programId);\n    if (loading) {\n      state.loadingPages.add(pageNumber);\n    } else {\n      state.loadingPages.delete(pageNumber);\n    }\n  }\n\n  isPageLoading(programId: string, pageNumber: number): boolean {\n    const state = this.getState(programId);\n    return state.loadingPages.has(pageNumber);\n  }\n}\n\n/**\n * Main Runtime Class\n */\nexport class ContraWebflowRuntime {\n  private client: ContraClient;\n  private config: Required<RuntimeConfig>;\n  private state = new RuntimeState();\n  private debouncedReload: Map<string, () => void> = new Map();\n\n  constructor(config: RuntimeConfig) {\n    this.config = {\n      debug: false,\n      program: '',  // Default empty program\n      loadingClass: 'loading',\n      errorClass: 'error',\n      emptyClass: 'empty',\n      autoReload: true,\n      debounceDelay: 300,\n      maxRetries: 3,\n      // Pagination Configuration defaults\n      paginationMode: 'traditional',\n      infiniteScrollThreshold: 500,\n      preloadNextPage: true,\n      maxCachedPages: 5,\n      smoothScrollBehavior: 'auto',\n      loadMoreText: 'Load More',\n      // Video configuration defaults\n      videoAutoplay: false,      // No autoplay by default (better UX)\n      videoHoverPlay: true,       // Hover to play by default\n      videoMuted: true,           // Muted for autoplay compatibility\n      videoLoop: true,            // Loop videos\n      videoControls: false,       // No controls for cleaner look\n      ...config\n    };\n\n    this.client = new ContraClient({\n      apiKey: this.config.apiKey,\n      debug: this.config.debug\n    });\n\n    this.log('Runtime initialized', this.config);\n  }\n\n  /**\n   * Initialize the runtime and find all expert containers\n   */\n  async init(): Promise<void> {\n    this.log('Initializing runtime...');\n\n    try {\n      // Find all expert containers\n      const allContainers = this.findExpertContainers();\n      // Filter out already initialized containers\n      const containers = allContainers.filter(container => \n        !container.hasAttribute('data-contra-initialized')\n      );\n      \n      this.log(`Found ${containers.length} uninitialised expert containers (${allContainers.length} total)`);\n\n      // Initialize each container\n      for (const container of containers) {\n        await this.initContainer(container);\n      }\n\n      this.log('Runtime initialization complete');\n    } catch (error) {\n      this.log('Runtime initialization failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize a single expert container\n   */\n  private async initContainer(container: Element): Promise<void> {\n    // Get program ID from config\n    const programId = this.config.program;\n    if (!programId) {\n      this.log('No program ID found in config', container);\n      return;\n    }\n\n    // Create simple container identifier\n    const containers = document.querySelectorAll('[data-contra-limit], [data-contra-pagination]');\n    const containerIndex = Array.from(containers).indexOf(container);\n    const containerId = `container-${containerIndex}`;\n\n    this.log(`Initializing container ${containerId} for program: ${programId}`);\n\n    try {\n      // Setup container state\n      this.setupContainer(container, containerId, programId);\n      \n      // Wire up action buttons\n      this.wireActionButtons(container, containerId);\n      \n      // Load initial data\n      await this.loadExperts(container, containerId);\n\n    } catch (error) {\n      this.log(`Failed to initialize container ${containerId}`, error);\n      this.showError(container, error as Error);\n    }\n  }\n\n  /**\n   * Setup container with initial state and classes\n   */\n  private setupContainer(container: Element, containerId: string, programId: string): void {\n    const element = container as HTMLElement;\n    \n    // Add runtime classes and identifier\n    element.classList.add('contra-runtime');\n    element.setAttribute('data-contra-initialized', 'true');\n    element.setAttribute('data-container-id', containerId);\n    \n    // Parse pagination mode and settings\n    const paginationMode = this.getAttr(container, 'pagination') || 'traditional';\n    const limit = parseInt(this.getAttr(container, 'limit') || '20');\n    \n    // Initialize container state\n    this.state.updateState(containerId, { \n      filters: { limit, offset: 0 },\n      paginationMode: paginationMode as 'traditional' | 'infinite',\n      experts: [],\n      loading: false,\n      error: null,\n      currentPage: 1,\n      totalCount: 0,\n      hasNextPage: false,\n      hasPreviousPage: false,\n      cachedPages: new Map(),\n      loadingPages: new Set(),\n      isInfiniteLoading: false,\n      lastScrollPosition: 0,\n      programId: programId\n    });\n    \n    this.log(`Container ${containerId} setup complete:`, { paginationMode, limit });\n  }\n\n  /**\n   * Wire up filter controls to auto-update\n   */\n  private wireFilterControls(container: Element, programId: string): void {\n    const filterControls = this.querySelectorAll(container, `[${ATTR_PREFIX}${ATTRS.filter}]`);\n    \n    this.log(`Found ${filterControls.length} filter controls for program: ${programId}`);\n\n    filterControls.forEach(control => {\n      const filterKey = this.getAttr(control, ATTRS.filter);\n      const filterType = this.getAttr(control, ATTRS.filterType) || 'replace';\n      \n      if (!filterKey) return;\n\n      // Add event listeners based on control type\n      if (control instanceof HTMLInputElement) {\n        const eventType = control.type === 'range' || control.type === 'number' ? 'input' : 'change';\n        \n        control.addEventListener(eventType, () => {\n          this.updateFilter(programId, filterKey, this.getControlValue(control), filterType);\n          if (this.config.autoReload) {\n            this.debouncedReload.get(programId)?.();\n          }\n        });\n        \n      } else if (control instanceof HTMLSelectElement) {\n        control.addEventListener('change', () => {\n          this.updateFilter(programId, filterKey, this.getControlValue(control), filterType);\n          if (this.config.autoReload) {\n            this.debouncedReload.get(programId)?.();\n          }\n        });\n      }\n      \n      this.log(`Wired filter control: ${filterKey} (${filterType})`, control);\n    });\n  }\n\n  /**\n   * Wire up action buttons (pagination, sorting, etc.)\n   */\n  private wireActionButtons(container: Element, containerId: string): void {\n    const actionButtons = this.querySelectorAll(container, `[${ATTR_PREFIX}${ATTRS.action}]`);\n    \n    actionButtons.forEach(button => {\n      const action = this.getAttr(button, ATTRS.action);\n      const target = this.getAttr(button, ATTRS.target);\n      \n      if (!action) return;\n\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.handleAction(containerId, action, target, button);\n      });\n    });\n  }\n\n  /**\n   * Load experts for a container with proper pagination handling\n   */\n  private async loadExperts(container: Element, containerId: string, isPageNavigation = false): Promise<void> {\n    const state = this.state.getState(containerId);\n    const programId = state.programId;\n    \n    this.log(`Loading experts for container: ${containerId}, program: ${programId}`, state.filters);\n\n    try {\n      // Show loading state\n      this.showLoading(container, true);\n      this.state.updateState(containerId, { loading: true, error: null });\n\n      // Fetch experts from API\n      const response = await this.client.listExperts(programId, state.filters);\n      \n      this.log(`Loaded ${response.data.length} experts`, response);\n\n      // Update pagination state based on mode\n      if (state.paginationMode === 'traditional') {\n        this.handleTraditionalPaginationResponse(containerId, container, response);\n      } else {\n        this.handleInfinitePaginationResponse(containerId, container, response);\n      }\n\n    } catch (error) {\n      this.log(`Failed to load experts for container: ${containerId}`, error);\n      \n      this.state.updateState(containerId, { \n        loading: false, \n        error: error as Error \n      });\n      \n      this.showError(container, error as Error);\n      \n      // Dispatch error event\n      this.dispatchEvent(container, 'expertsError', {\n        error: error as Error,\n        context: `Loading experts for container ${containerId}`\n      } as ErrorEvent);\n    } finally {\n      this.showLoading(container, false);\n    }\n  }\n\n  /**\n   * Handle traditional pagination response (page-based navigation)\n   */\n  private handleTraditionalPaginationResponse(\n    containerId: string, \n    container: Element, \n    response: { data: ExpertProfile[], totalCount: number }\n  ): void {\n    const state = this.state.getState(containerId);\n    \n    // Calculate pagination metadata\n    const limit = state.filters.limit || 20;\n    const offset = state.filters.offset || 0;\n    const currentPage = Math.floor(offset / limit) + 1;\n    const totalPages = Math.ceil(response.totalCount / limit);\n    const hasNextPage = currentPage < totalPages;\n    const hasPreviousPage = currentPage > 1;\n\n    // Update state\n    this.state.updateState(containerId, {\n      experts: response.data,\n      totalCount: response.totalCount,\n      currentPage: currentPage,\n      hasNextPage: hasNextPage,\n      hasPreviousPage: hasPreviousPage,\n      loading: false\n    });\n\n    // Cache the page\n    this.state.cachePage(containerId, currentPage, response.data);\n\n    // Render experts (replace mode for traditional pagination)\n    this.renderExperts(container, response.data);\n    \n    // Update UI\n    this.updateUIStates(container, containerId);\n    this.updatePaginationControls(container, containerId);\n    \n    // Dispatch event\n    this.dispatchEvent(container, 'expertsLoaded', {\n      experts: response.data,\n      totalCount: response.totalCount,\n      filters: state.filters,\n      page: currentPage,\n      totalPages: totalPages,\n      hasNextPage: hasNextPage,\n      hasPreviousPage: hasPreviousPage,\n      paginationMode: 'traditional'\n    } as ExpertLoadEvent);\n\n    this.log(`Traditional pagination: Page ${currentPage}/${totalPages}, ${response.data.length} experts loaded`);\n  }\n\n  /**\n   * Handle infinite pagination response (cumulative loading)\n   */\n  private handleInfinitePaginationResponse(\n    containerId: string, \n    container: Element, \n    response: { data: ExpertProfile[], totalCount: number }\n  ): void {\n    const state = this.state.getState(containerId);\n    const isLoadMore = state.experts.length > 0;\n    \n    // For infinite loading, append to existing experts\n    const allExperts = isLoadMore ? [...state.experts, ...response.data] : response.data;\n    const hasNextPage = allExperts.length < response.totalCount;\n    \n    // Update state\n    this.state.updateState(containerId, {\n      experts: allExperts,\n      totalCount: response.totalCount,\n      hasNextPage: hasNextPage,\n      hasPreviousPage: false, // Not applicable for infinite scroll\n      loading: false,\n      isInfiniteLoading: false\n    });\n\n    // Render experts (append mode for infinite loading)\n    if (isLoadMore) {\n      this.renderNewExperts(container, response.data);\n    } else {\n      this.renderExperts(container, response.data);\n    }\n    \n    // Update UI\n    this.updateUIStates(container, containerId);\n    this.updatePaginationControls(container, containerId);\n    \n    // Dispatch event\n    this.dispatchEvent(container, 'expertsLoaded', {\n      experts: response.data,\n      totalExperts: allExperts,\n      totalCount: response.totalCount,\n      filters: state.filters,\n      hasNextPage: hasNextPage,\n      isLoadMore: isLoadMore,\n      paginationMode: 'infinite'\n    } as ExpertLoadEvent);\n\n    this.log(`Infinite pagination: ${allExperts.length}/${response.totalCount} experts loaded`);\n  }\n\n  /**\n   * Calculate current page from filters\n   */\n  private calculateCurrentPage(filters: ExpertFilters): number {\n    const limit = filters.limit || 20;\n    const offset = filters.offset || 0;\n    return Math.floor(offset / limit) + 1;\n  }\n\n  /**\n   * Update pagination state consistently\n   */\n  private updatePaginationState(\n    programId: string, \n    experts: ExpertProfile[], \n    totalCount: number, \n    filters: ExpertFilters\n  ): void {\n    const limit = filters.limit || 20;\n    const offset = filters.offset || 0;\n    const currentPage = Math.floor(offset / limit) + 1;\n    const totalPages = Math.ceil(totalCount / limit);\n    \n    this.state.updateState(programId, {\n      experts: experts,\n      totalCount: totalCount,\n      currentPage: currentPage,\n      hasNextPage: currentPage < totalPages,\n      hasPreviousPage: currentPage > 1,\n      loading: false\n    });\n  }\n\n  /**\n   * Render experts into the container\n   */\n  private renderExperts(container: Element, experts: ExpertProfile[]): void {\n    const template = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    if (!template) {\n      this.log('No template found in container', container);\n      return;\n    }\n\n    // Clear existing expert cards (keep template)\n    const existingCards = this.querySelectorAll(container, ':scope > *:not([data-contra-template]):not([data-contra-loading]):not([data-contra-error]):not([data-contra-empty])');\n    existingCards.forEach(card => card.remove());\n\n    // Render expert cards\n    experts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert);\n      container.appendChild(expertCard);\n    });\n\n    this.log(`Rendered ${experts.length} expert cards`);\n  }\n\n  /**\n   * Populate expert card from template\n   */\n  private populateExpertCard(template: Element, expert: ExpertProfile): Element {\n    const card = template.cloneNode(true) as Element;\n    \n    // Remove template attribute and show the card\n    card.removeAttribute(`${ATTR_PREFIX}${ATTRS.template}`);\n    (card as HTMLElement).style.display = '';\n\n    // Populate field bindings\n    this.populateFields(card, expert);\n    \n    // Handle repeating elements (projects, social links)\n    this.populateRepeatingElements(card, expert);\n    \n    // Handle conditional display\n    this.handleConditionalDisplay(card, expert);\n\n    return card;\n  }\n\n  /**\n   * Populate data fields in the card\n   */\n  private populateFields(card: Element, expert: ExpertProfile): void {\n    const fieldElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.field}]`);\n    \n    fieldElements.forEach(element => {\n      const fieldName = this.getAttr(element, ATTRS.field) as ExpertField;\n      const format = this.getAttr(element, ATTRS.format);\n      \n      if (!fieldName || !(fieldName in expert)) return;\n\n      const value = expert[fieldName];\n      this.setElementValue(element, value, format);\n    });\n\n    // Handle star ratings\n    const starsElements = this.querySelectorAll(card, '[data-contra-stars]');\n    starsElements.forEach(element => {\n      if (expert.averageReviewScore) {\n        this.renderStarRating(element, expert.averageReviewScore);\n      }\n    });\n  }\n\n  /**\n   * Set element value with proper formatting\n   */\n  private setElementValue(element: Element, value: any, format?: string | null): void {\n    if (value == null || value === '') return;\n\n    // Media type detection and handling\n    if (this.isMediaField(element) && typeof value === 'string' && value.trim()) {\n      this.setMediaValue(element, value);\n      return;\n    }\n\n    if (element instanceof HTMLAnchorElement) {\n      element.href = String(value);\n      if (!element.textContent?.trim()) {\n        element.textContent = String(value);\n      }\n    } else if (element instanceof HTMLInputElement) {\n      element.value = String(value);\n    } else if (element instanceof HTMLImageElement) {\n      // Regular image handling for avatars and other images\n      element.src = String(value);\n      element.alt = element.alt || 'Image';\n    } else {\n      // Text content with formatting\n      let displayValue = String(value);\n      \n      if (format) {\n        switch (format) {\n          case 'currency':\n            displayValue = typeof value === 'number' ? `$${value}` : displayValue;\n            break;\n          case 'rate':\n            displayValue = utils.formatRate(typeof value === 'number' ? value : null);\n            break;\n          case 'rating':\n            // Format rating to one decimal place (5.0, 4.9, etc.)\n            displayValue = typeof value === 'number' ? value.toFixed(1) : displayValue;\n            break;\n          case 'earnings':\n            // Format earnings like $25k+\n            if (typeof value === 'number') {\n              if (value >= 1000000) {\n                displayValue = `$${Math.floor(value / 1000000)}M+`;\n              } else if (value >= 1000) {\n                displayValue = `$${Math.floor(value / 1000)}k+`;\n              } else {\n                displayValue = `$${value}`;\n              }\n            }\n            break;\n          case 'number':\n            displayValue = typeof value === 'number' ? value.toLocaleString() : displayValue;\n            break;\n          case 'truncate':\n            displayValue = displayValue.length > 100 ? displayValue.substring(0, 97) + '...' : displayValue;\n            break;\n          case 'boolean':\n            displayValue = value ? 'Yes' : 'No';\n            break;\n          case 'availability':\n            displayValue = value ? 'Available' : 'Not Available';\n            break;\n        }\n      }\n      \n      element.textContent = displayValue;\n    }\n  }\n\n  /**\n   * Star rating rendering with optional text display\n   */\n  private renderStarRating(element: Element, rating: number): void {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    let starsHtml = '';\n    \n    // Full stars\n    for (let i = 0; i < fullStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-full\">★</span>';\n    }\n    \n    // Half star\n    if (hasHalfStar) {\n      starsHtml += '<span class=\"contra-star contra-star-half\">★</span>';\n    }\n    \n    // Empty stars\n    for (let i = 0; i < emptyStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-empty\">☆</span>';\n    }\n    \n    element.innerHTML = starsHtml;\n    \n    // Also update any rating text elements in the same card\n    const card = element.closest('[data-contra-template]') || element.closest('.expert-card');\n    if (card) {\n      const ratingTextElements = this.querySelectorAll(card, '[data-contra-rating-text]');\n      ratingTextElements.forEach(textElement => {\n        textElement.textContent = rating.toFixed(1);\n      });\n    }\n  }\n\n  /**\n   * Media type detection and element handling\n   */\n  private isMediaField(element: Element): boolean {\n    const field = this.getAttr(element, ATTRS.field);\n    // Only apply advanced media handling to project cover URLs, not avatars\n    return field === 'coverUrl';\n  }\n\n  /**\n   * Media value setting with automatic type detection\n   */\n  private setMediaValue(element: Element, url: string): void {\n    const mediaType = this.detectMediaType(url);\n    const parent = element.parentElement;\n    \n    if (!parent) {\n      this.log('Media element has no parent for replacement', element);\n      return;\n    }\n\n    // Remove existing media element\n    element.remove();\n\n    // Create appropriate media element\n    let mediaElement: HTMLElement;\n    \n    switch (mediaType) {\n      case 'video':\n        mediaElement = this.createVideoElement(url, element);\n        break;\n      case 'image':\n      default:\n        mediaElement = this.createImageElement(url, element);\n        break;\n    }\n\n    // Preserve classes and attributes from original element\n    this.transferAttributes(element, mediaElement);\n    \n    // Insert new media element\n    parent.appendChild(mediaElement);\n    \n    this.log(`Created ${mediaType} element for URL: ${url}`);\n  }\n\n  /**\n   * Detect media type from URL\n   */\n  private detectMediaType(url: string): 'image' | 'video' {\n    if (!url || typeof url !== 'string') {\n      this.log('Invalid URL provided to detectMediaType:', url);\n      return 'image';\n    }\n    \n    const urlLower = url.toLowerCase();\n    \n    // Video formats\n    const videoExtensions = ['.mp4', '.webm', '.mov', '.avi', '.mkv', '.ogg'];\n    const isVideo = videoExtensions.some(ext => urlLower.includes(ext));\n    \n    // Special handling for Cloudinary video URLs\n    const isCloudinaryVideo = urlLower.includes('cloudinary.com/') && urlLower.includes('/video/');\n    \n    return (isVideo || isCloudinaryVideo) ? 'video' : 'image';\n  }\n\n  /**\n   * Create video element with fallback\n   */\n  private createVideoElement(url: string, originalElement: Element): HTMLVideoElement {\n    const video = document.createElement('video');\n    \n    // Video attributes\n    video.src = url;\n    video.muted = this.config.videoMuted;\n    video.loop = this.config.videoLoop;\n    video.playsInline = true;\n    video.preload = 'metadata';\n    video.controls = this.config.videoControls;\n    \n    // Maintain aspect ratio and object-fit from original\n    video.style.width = '100%';\n    video.style.height = '100%';\n    video.style.objectFit = 'cover';\n    video.style.borderRadius = 'inherit';\n    \n    // Autoplay configuration\n    if (this.config.videoAutoplay) {\n      video.autoplay = true;\n      video.setAttribute('autoplay', '');\n    }\n    \n    // Error handling with fallback to poster or placeholder\n    video.onerror = () => {\n      this.log(`Video failed to load: ${url}`);\n      // Try to extract a thumbnail from Cloudinary video URL\n      const posterUrl = this.extractVideoThumbnail(url);\n      if (posterUrl) {\n        const fallbackImg = this.createImageElement(posterUrl, originalElement);\n        video.parentElement?.replaceChild(fallbackImg, video);\n      } else {\n        // Show placeholder\n        video.style.background = '#f3f4f6';\n        video.style.position = 'relative';\n        video.innerHTML = '<div style=\"position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);color:#9ca3af;font-size:12px;\">Video unavailable</div>';\n      }\n    };\n\n    // Hover-to-play functionality (if enabled and not autoplay)\n    if (this.config.videoHoverPlay && !this.config.videoAutoplay) {\n      video.addEventListener('mouseenter', () => {\n        video.currentTime = 0;\n        video.play().catch(() => {\n          // Ignore play errors (browser policies)\n        });\n      });\n\n      video.addEventListener('mouseleave', () => {\n        video.pause();\n        video.currentTime = 0;\n      });\n    }\n\n    return video;\n  }\n\n  /**\n   * Create image element with error handling\n   */\n  private createImageElement(url: string, originalElement: Element): HTMLImageElement {\n    const img = document.createElement('img');\n    \n    img.src = url;\n    img.alt = originalElement.getAttribute('alt') || 'Media content';\n    img.loading = 'lazy';\n    \n    // Maintain styling\n    img.style.width = '100%';\n    img.style.height = '100%';\n    img.style.objectFit = 'cover';\n    img.style.borderRadius = 'inherit';\n    \n    // Error handling\n    img.onerror = () => {\n      this.log(`Image failed to load: ${url}`);\n      img.style.background = '#f3f4f6';\n      img.style.opacity = '0.5';\n      img.alt = 'Image unavailable';\n      \n      // Add broken image icon\n      img.style.position = 'relative';\n      const placeholder = document.createElement('div');\n      placeholder.style.cssText = `\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        color: #9ca3af;\n        font-size: 12px;\n        text-align: center;\n      `;\n      placeholder.textContent = '🖼️ Image unavailable';\n      img.parentElement?.appendChild(placeholder);\n    };\n\n    return img;\n  }\n\n  /**\n   * Extract video thumbnail from Cloudinary URL\n   */\n  private extractVideoThumbnail(videoUrl: string): string | null {\n    if (videoUrl.includes('cloudinary.com/') && videoUrl.includes('/video/')) {\n      // Convert video URL to image thumbnail\n      return videoUrl\n        .replace('/video/', '/image/')\n        .replace(/\\.(mp4|webm|mov|avi|mkv)$/i, '.jpg')\n        .replace('fl_progressive', 'f_auto,q_auto,c_fill');\n    }\n    return null;\n  }\n\n  /**\n   * Transfer attributes and classes from old element to new\n   */\n  private transferAttributes(from: Element, to: HTMLElement): void {\n    // Transfer classes\n    if (from.className) {\n      to.className = from.className;\n    }\n    \n    // Transfer data attributes (except contra-field)\n    Array.from(from.attributes).forEach(attr => {\n      if (attr.name.startsWith('data-') && attr.name !== `${ATTR_PREFIX}${ATTRS.field}`) {\n        to.setAttribute(attr.name, attr.value);\n      }\n    });\n    \n    // Transfer style\n    if (from.getAttribute('style')) {\n      const existingStyle = to.getAttribute('style') || '';\n      to.setAttribute('style', existingStyle + '; ' + from.getAttribute('style'));\n    }\n  }\n\n  /**\n   * Handle repeating elements (projects, social links)\n   */\n  private populateRepeatingElements(card: Element, expert: ExpertProfile): void {\n    const repeatElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.repeat}]`);\n    \n    repeatElements.forEach(container => {\n      const repeatType = this.getAttr(container, ATTRS.repeat);\n      const maxItems = parseInt(this.getAttr(container, ATTRS.max) || '10');\n      \n      if (repeatType === 'projects' && expert.projects) {\n        this.populateRepeatingContainer(container, expert.projects.slice(0, maxItems));\n      } else if (repeatType === 'socialLinks' && expert.socialLinks) {\n        this.populateRepeatingContainer(container, expert.socialLinks.slice(0, maxItems));\n      } else if (repeatType === 'skillTags' && expert.skillTags) {\n        this.populateRepeatingContainer(container, expert.skillTags.slice(0, maxItems).map((tag: string) => ({ name: tag })));\n      }\n    });\n  }\n\n  /**\n   * Populate a repeating container with items\n   */\n  private populateRepeatingContainer(container: Element, items: any[]): void {\n    const template = container.firstElementChild;\n    if (!template) return;\n\n    // Clear existing items\n    container.innerHTML = '';\n    \n    // Create items from template\n    items.forEach(item => {\n      const itemElement = template.cloneNode(true) as Element;\n      this.populateFields(itemElement, item);\n      container.appendChild(itemElement);\n    });\n    \n    // Hide container if no items\n    if (items.length === 0) {\n      (container as HTMLElement).style.display = 'none';\n    }\n  }\n\n  /**\n   * Handle conditional display based on data\n   */\n  private handleConditionalDisplay(card: Element, expert: ExpertProfile): void {\n    const conditionalElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.showWhen}], [${ATTR_PREFIX}${ATTRS.hideWhen}]`);\n    \n    conditionalElements.forEach(element => {\n      const showWhen = this.getAttr(element, ATTRS.showWhen);\n      const hideWhen = this.getAttr(element, ATTRS.hideWhen);\n      \n      let shouldShow = true;\n      \n      if (showWhen) {\n        shouldShow = this.evaluateCondition(expert, showWhen);\n      }\n      \n      if (hideWhen) {\n        shouldShow = shouldShow && !this.evaluateCondition(expert, hideWhen);\n      }\n      \n      (element as HTMLElement).style.display = shouldShow ? '' : 'none';\n    });\n  }\n\n  /**\n   * Evaluate a condition against expert data\n   */\n  private evaluateCondition(expert: ExpertProfile, condition: string): boolean {\n    if (!condition || typeof condition !== 'string') {\n      this.log('Invalid condition provided:', condition);\n      return false;\n    }\n    \n    // Parse condition: \"field:value\" or \"field:>value\" etc.\n    const parts = condition.split(':');\n    if (parts.length < 2) {\n      this.log('Invalid condition format:', condition);\n      return false;\n    }\n    \n    const field = parts[0];\n    const restOfCondition = parts.slice(1).join(':'); // Handle colons in values\n    const expertValue = (expert as any)[field];\n    \n    this.log(`Evaluating condition: ${field} (${expertValue}, type: ${typeof expertValue}) against ${restOfCondition}`);\n    \n    if (expertValue == null) {\n      this.log(`Field '${field}' is null/undefined, condition fails`);\n      return false;\n    }\n    \n    // Check for comparison operators\n    if (restOfCondition.startsWith('>=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) >= Number(value);\n      this.log(`Comparison: ${expertValue} >= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) <= Number(value);\n      this.log(`Comparison: ${expertValue} <= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('>')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) > Number(value);\n      this.log(`Comparison: ${expertValue} > ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) < Number(value);\n      this.log(`Comparison: ${expertValue} < ${value} = ${result}`);\n      return result;\n    } else {\n      // Direct value comparison with type-aware handling\n      let result = false;\n      \n      // Handle boolean fields specially\n      if (typeof expertValue === 'boolean') {\n        // Convert string condition to boolean for comparison\n        if (restOfCondition.toLowerCase() === 'true') {\n          result = expertValue === true;\n        } else if (restOfCondition.toLowerCase() === 'false') {\n          result = expertValue === false;\n        } else {\n          result = false;\n        }\n        this.log(`Boolean comparison: ${expertValue} === ${restOfCondition.toLowerCase() === 'true'} = ${result}`);\n      } else if (typeof expertValue === 'number') {\n        // Handle numeric comparisons\n        const numValue = Number(restOfCondition);\n        result = !isNaN(numValue) && expertValue === numValue;\n        this.log(`Number comparison: ${expertValue} === ${numValue} = ${result}`);\n      } else {\n        // String comparison (case-insensitive)\n        const expertStr = String(expertValue);\n        const valueStr = String(restOfCondition);\n        result = expertStr.toLowerCase() === valueStr.toLowerCase();\n        this.log(`String comparison: '${expertStr}' === '${valueStr}' = ${result}`);\n      }\n      \n      return result;\n    }\n  }\n\n  /**\n   * Update UI states based on current data\n   */\n  private updateUIStates(container: Element, programId: string): void {\n    const state = this.state.getState(programId);\n    \n    // Show/hide empty state\n    const emptyElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (emptyElement) {\n      (emptyElement as HTMLElement).style.display = state.experts.length === 0 ? '' : 'none';\n    }\n    \n    // Update pagination info\n    const paginationElements = this.querySelectorAll(container, '[data-contra-pagination-info]');\n    paginationElements.forEach(element => {\n      const { currentPage, totalCount } = state;\n      const pageSize = state.filters.limit || 20;\n      const totalPages = Math.ceil(totalCount / pageSize);\n      \n      element.textContent = `Page ${currentPage} of ${totalPages} (${totalCount} total)`;\n    });\n    \n    // Update filter summaries\n    const filterSummaries = this.querySelectorAll(container, '[data-contra-filter-summary]');\n    filterSummaries.forEach(element => {\n      const activeFilters = Object.entries(state.filters)\n        .filter(([_key, value]) => value != null && value !== '')\n        .map(([key, value]) => `${key}: ${value}`)\n        .join(', ');\n      \n      element.textContent = activeFilters || 'No filters applied';\n    });\n  }\n\n  /**\n   * Handle action buttons with proper pagination logic\n   */\n  private handleAction(containerId: string, action: string, _target?: string | null, button?: Element): void {\n    const state = this.state.getState(containerId);\n    const container = document.querySelector(`[data-container-id=\"${containerId}\"]`);\n    \n    if (!container) {\n      this.log(`Container not found: ${containerId}`);\n      return;\n    }\n\n    // Show button feedback\n    if (button && button instanceof HTMLButtonElement) {\n      button.disabled = true;\n    }\n    \n    const limit = state.filters.limit || 20;\n    const currentOffset = state.filters.offset || 0;\n    \n    switch (action) {\n      case 'next-page':\n        if (state.paginationMode === 'traditional') {\n          const nextOffset = currentOffset + limit;\n          if (nextOffset < state.totalCount) {\n            this.updateFilter(containerId, 'offset', nextOffset);\n            this.loadExperts(container as Element, containerId, true);\n          }\n        } else {\n          // For infinite mode, use load more functionality\n          this.loadMoreExperts(container as Element, containerId);\n        }\n        break;\n        \n      case 'prev-page':\n        if (state.paginationMode === 'traditional') {\n          const prevOffset = Math.max(0, currentOffset - limit);\n          this.updateFilter(containerId, 'offset', prevOffset);\n          this.loadExperts(container as Element, containerId, true);\n        }\n        break;\n        \n      case 'first-page':\n        if (state.paginationMode === 'traditional') {\n          this.updateFilter(containerId, 'offset', 0);\n          this.loadExperts(container as Element, containerId, true);\n        }\n        break;\n        \n      case 'last-page':\n        if (state.paginationMode === 'traditional') {\n          const totalPages = Math.ceil(state.totalCount / limit);\n          const lastPageOffset = (totalPages - 1) * limit;\n          this.updateFilter(containerId, 'offset', lastPageOffset);\n          this.loadExperts(container as Element, containerId, true);\n        }\n        break;\n        \n      case 'load-more':\n        // Handle load more for infinite/hybrid modes\n        this.loadMoreExperts(container as Element, containerId).finally(() => {\n          if (button && button instanceof HTMLButtonElement) {\n            button.disabled = false;\n          }\n        });\n        return; // Exit early to avoid re-enabling button\n        \n      case 'reload':\n        // Clear cache and reload\n        this.state.updateState(containerId, { cachedPages: new Map() });\n        this.loadExperts(container as Element, containerId);\n        break;\n    }\n    \n    // Re-enable button after action completes\n    if (button && button instanceof HTMLButtonElement && action !== 'load-more') {\n      setTimeout(() => {\n        button.disabled = false;\n      }, 100);\n    }\n  }\n\n  /**\n   * Load more experts for infinite scroll mode\n   */\n  private async loadMoreExperts(container: Element, programId: string): Promise<void> {\n    const state = this.state.getState(programId);\n    \n    // Only allow load more for infinite/hybrid modes\n    if (state.paginationMode === 'traditional') {\n      this.log('Load more not supported in traditional pagination mode');\n      return;\n    }\n    \n    const limit = state.filters.limit || 20;\n    \n    // Calculate next offset based on currently loaded experts\n    const currentOffset = state.experts.length;\n    \n    this.log(`Loading more experts: currentOffset=${currentOffset}, limit=${limit}`);\n\n    try {\n      this.state.updateState(programId, { isInfiniteLoading: true });\n      this.updateLoadMoreButtonState(container, programId, true);\n\n      // Fetch next batch using current expert count as offset\n      const response = await this.client.listExperts(programId, {\n        ...state.filters,\n        offset: currentOffset,\n        limit: limit\n      });\n\n      this.log(`Loaded ${response.data.length} more experts from offset ${currentOffset}`);\n\n      // Handle the response using the infinite pagination handler\n      this.handleInfinitePaginationResponse(programId, container, response);\n\n    } catch (error) {\n      this.log(`Failed to load more experts`, error);\n      this.state.updateState(programId, { isInfiniteLoading: false });\n      \n      // Show error in load more button\n      this.updateLoadMoreButtonState(container, programId, false, 'Error loading more');\n      \n      setTimeout(() => {\n        this.updateLoadMoreButtonState(container, programId, false);\n      }, 3000);\n    } finally {\n      this.updateLoadMoreButtonState(container, programId, false);\n    }\n  }\n\n  /**\n   * Update load more button state\n   */\n  private updateLoadMoreButtonState(container: Element, programId: string, loading: boolean, errorText?: string): void {\n    const loadMoreButtons = this.querySelectorAll(container, '[data-contra-action=\"load-more\"]');\n    const state = this.state.getState(programId);\n    \n    loadMoreButtons.forEach(button => {\n      const btnElement = button as HTMLButtonElement;\n      \n      if (errorText) {\n        btnElement.textContent = errorText;\n        btnElement.disabled = true;\n        btnElement.classList.add('error');\n        return;\n      }\n      \n      btnElement.classList.remove('error');\n      \n      if (loading) {\n        btnElement.textContent = 'Loading...';\n        btnElement.disabled = true;\n        btnElement.classList.add('loading');\n      } else {\n        btnElement.classList.remove('loading');\n        const hasMore = state.experts.length < state.totalCount;\n        \n        if (hasMore) {\n          btnElement.textContent = this.config.loadMoreText;\n          btnElement.disabled = false;\n        } else {\n          btnElement.textContent = 'All experts loaded';\n          btnElement.disabled = true;\n          btnElement.classList.add('disabled');\n        }\n      }\n    });\n  }\n\n  /**\n   * Load next page for infinite scroll\n   */\n  private async loadNextPageInfinite(container: Element, programId: string): Promise<void> {\n    // Use the unified loadMoreExperts method\n    return this.loadMoreExperts(container, programId);\n  }\n\n  /**\n   * Update pagination control states based on current mode and state\n   */\n  private updatePaginationControls(container: Element, programId: string): void {\n    const state = this.state.getState(programId);\n    const limit = state.filters.limit || 20;\n    const totalPages = Math.ceil(state.totalCount / limit);\n    \n    if (state.paginationMode === 'traditional') {\n      this.updateTraditionalPaginationControls(container, state, totalPages);\n    } else {\n      this.updateInfinitePaginationControls(container, state);\n    }\n\n    this.log(`Pagination controls updated: mode=${state.paginationMode}, page=${state.currentPage}/${totalPages}, hasNext=${state.hasNextPage}`);\n  }\n\n  /**\n   * Update traditional pagination controls (Previous/Next buttons, page numbers)\n   */\n  private updateTraditionalPaginationControls(container: Element, state: any, totalPages: number): void {\n    // Update navigation buttons\n    const prevButtons = this.querySelectorAll(container, '[data-contra-action=\"prev-page\"]');\n    const nextButtons = this.querySelectorAll(container, '[data-contra-action=\"next-page\"]');\n    const firstButtons = this.querySelectorAll(container, '[data-contra-action=\"first-page\"]');\n    const lastButtons = this.querySelectorAll(container, '[data-contra-action=\"last-page\"]');\n\n    // Previous page buttons\n    prevButtons.forEach(button => {\n      const btnElement = button as HTMLButtonElement;\n      btnElement.disabled = !state.hasPreviousPage;\n      btnElement.classList.toggle('disabled', !state.hasPreviousPage);\n    });\n\n    // Next page buttons\n    nextButtons.forEach(button => {\n      const btnElement = button as HTMLButtonElement;\n      btnElement.disabled = !state.hasNextPage;\n      btnElement.classList.toggle('disabled', !state.hasNextPage);\n    });\n\n    // First page buttons\n    firstButtons.forEach(button => {\n      const btnElement = button as HTMLButtonElement;\n      btnElement.disabled = state.currentPage <= 1;\n      btnElement.classList.toggle('disabled', state.currentPage <= 1);\n    });\n\n    // Last page buttons\n    lastButtons.forEach(button => {\n      const btnElement = button as HTMLButtonElement;\n      btnElement.disabled = state.currentPage >= totalPages;\n      btnElement.classList.toggle('disabled', state.currentPage >= totalPages);\n    });\n\n    // Update pagination info elements\n    const paginationInfoElements = this.querySelectorAll(container, '[data-contra-pagination-info]');\n    paginationInfoElements.forEach(element => {\n      element.textContent = `Page ${state.currentPage} of ${totalPages} (${state.totalCount} total)`;\n    });\n\n    // Show/hide pagination section based on whether there are multiple pages\n    const paginationSection = container.querySelector('.pagination-section');\n    if (paginationSection) {\n      (paginationSection as HTMLElement).style.display = totalPages > 1 ? 'block' : 'none';\n    }\n  }\n\n  /**\n   * Update infinite pagination controls (Load More button)\n   */\n  private updateInfinitePaginationControls(container: Element, state: any): void {\n    // Update load more buttons\n    this.updateLoadMoreButtonState(container, state.programId || 'default', state.isInfiniteLoading);\n\n    // Update pagination info elements for infinite mode\n    const paginationInfoElements = this.querySelectorAll(container, '[data-contra-pagination-info]');\n    paginationInfoElements.forEach(element => {\n      const loadedCount = state.experts.length;\n      const totalCount = state.totalCount;\n      element.textContent = `Showing ${loadedCount} of ${totalCount} experts`;\n    });\n\n    // Hide traditional pagination controls in infinite mode\n    const paginationControls = container.querySelector('.pagination-controls');\n    if (paginationControls) {\n      (paginationControls as HTMLElement).style.display = 'none';\n    }\n  }\n\n  /**\n   * Update infinite loading state\n   */\n  private updateInfiniteLoadingState(container: Element, loading: boolean): void {\n    const loadingIndicators = this.querySelectorAll(container, '[data-contra-infinite-loading]');\n    \n    loadingIndicators.forEach(indicator => {\n      (indicator as HTMLElement).style.display = loading ? '' : 'none';\n    });\n  }\n\n  /**\n   * Render new experts for infinite scroll (append mode)\n   */\n  private renderNewExperts(container: Element, newExperts: ExpertProfile[]): void {\n    const template = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    if (!template) {\n      this.log('No template found for rendering new experts', container);\n      return;\n    }\n\n    // Create a document fragment for efficient DOM manipulation\n    const fragment = document.createDocumentFragment();\n\n    newExperts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert);\n      fragment.appendChild(expertCard);\n    });\n\n    // Append all new cards at once\n    container.appendChild(fragment);\n\n    this.log(`Rendered ${newExperts.length} new expert cards for load more`);\n  }\n\n  // ... (utility methods continue below)\n\n  /**\n   * Utility Methods\n   */\n  private getAttr(element: Element, name: string): string | null {\n    return element.getAttribute(`${ATTR_PREFIX}${name}`);\n  }\n\n  private querySelector(element: Element, selector: string): Element | null {\n    return element.querySelector(selector);\n  }\n\n  private querySelectorAll(element: Element, selector: string): Element[] {\n    return Array.from(element.querySelectorAll(selector));\n  }\n\n  private findExpertContainers(): Element[] {\n    this.log('Looking for expert containers...');\n    this.log('Document ready state:', document.readyState);\n    this.log('Total elements in document:', document.querySelectorAll('*').length);\n    \n    // Simple and reliable approach: look for any element with key contra attributes\n    const selectors = [\n      '[data-contra-limit]',\n      '[data-contra-pagination]', \n      '[data-contra-template]'\n    ];\n    \n    const foundElements: Element[] = [];\n    \n    for (const selector of selectors) {\n      const elements = Array.from(document.querySelectorAll(selector));\n      this.log(`Found ${elements.length} elements with selector: ${selector}`, elements);\n      foundElements.push(...elements);\n    }\n    \n    // If no elements found, try a broader search\n    if (foundElements.length === 0) {\n      this.log('No elements found with standard selectors, trying broader search...');\n      \n      // Look for any data-contra attributes\n      const allContraElements = Array.from(document.querySelectorAll('[data-contra-limit], [data-contra-template], [data-contra-pagination]'));\n      this.log(`Found ${allContraElements.length} elements with any contra attributes:`, allContraElements);\n      \n      // Look for the specific container structure we expect\n      const containerCandidates = Array.from(document.querySelectorAll('div')).filter(div => {\n        const hasLimit = div.hasAttribute('data-contra-limit');\n        const hasTemplate = div.querySelector('[data-contra-template]');\n        const hasContraClass = div.className.includes('contra');\n        return hasLimit || hasTemplate || hasContraClass;\n      });\n      \n      this.log(`Found ${containerCandidates.length} potential container candidates:`, containerCandidates);\n      foundElements.push(...containerCandidates);\n    }\n    \n    // Get unique containers\n    const containers = new Set<Element>();\n    \n    for (const element of foundElements) {\n      // If element has limit or pagination-mode, it's a container\n      if (element.hasAttribute('data-contra-limit') || element.hasAttribute('data-contra-pagination')) {\n        containers.add(element);\n        this.log('Found container (has limit/pagination):', element);\n      } \n      // If element is a template, its parent is the container\n      else if (element.hasAttribute('data-contra-template')) {\n        const parent = element.parentElement;\n        if (parent) {\n          containers.add(parent);\n          this.log('Found container (template parent):', parent);\n        }\n      }\n      // If element has contra class, check if it's a container\n      else if (element.className.includes('contra')) {\n        // Check if this element or its children have the structure we need\n        const hasTemplate = element.querySelector('[data-contra-template]');\n        if (hasTemplate) {\n          containers.add(element);\n          this.log('Found container (has contra class and template):', element);\n        }\n      }\n    }\n    \n    const uniqueContainers = Array.from(containers);\n    this.log(`Total unique containers found: ${uniqueContainers.length}`, uniqueContainers);\n    \n    // If still no containers found, log detailed debugging info\n    if (uniqueContainers.length === 0) {\n      this.log('❌ No containers found! Debugging info:');\n      this.log('- Document body HTML:', document.body?.innerHTML?.substring(0, 500) + '...');\n      this.log('- All divs:', Array.from(document.querySelectorAll('div')).slice(0, 10));\n      this.log('- Elements with data attributes:', Array.from(document.querySelectorAll('[data-contra-limit], [data-contra-template], [data-contra-pagination]')));\n    }\n    \n    return uniqueContainers;\n  }\n\n  private parseFiltersFromElement(element: Element): ExpertFilters {\n    const filters: ExpertFilters = {};\n    \n    // Parse filter attributes\n    const filterMap = {\n      'available': 'available',\n      'languages': 'languages', \n      'location': 'location',\n      'min-rate': 'minRate',\n      'max-rate': 'maxRate',\n      'sort': 'sortBy',\n      'limit': 'limit',\n      'offset': 'offset'\n    };\n\n    Object.entries(filterMap).forEach(([attr, filterKey]) => {\n      const value = this.getAttr(element, attr);\n      if (value != null) {\n        if (filterKey === 'available') {\n          (filters as any)[filterKey] = value === 'true';\n        } else if (filterKey === 'languages') {\n          (filters as any)[filterKey] = value.split(',').map(v => v.trim());\n        } else if (['minRate', 'maxRate', 'limit', 'offset'].includes(filterKey)) {\n          (filters as any)[filterKey] = parseInt(value);\n        } else {\n          (filters as any)[filterKey] = value;\n        }\n      }\n    });\n\n    // Ensure offset defaults to 0 if not specified\n    if (filters.offset === undefined) {\n      filters.offset = 0;\n    }\n\n    return filters;\n  }\n\n  private getControlValue(control: HTMLInputElement | HTMLSelectElement): any {\n    if (control instanceof HTMLInputElement) {\n      switch (control.type) {\n        case 'checkbox':\n          return control.checked;\n        case 'number':\n        case 'range':\n          return control.valueAsNumber;\n        default:\n          return control.value;\n      }\n    } else if (control instanceof HTMLSelectElement) {\n      if (control.multiple) {\n        return Array.from(control.selectedOptions).map(option => option.value);\n      }\n      return control.value;\n    }\n    return null;\n  }\n\n  private updateFilter(programId: string, filterKey: string, value: any, type: string = 'replace'): void {\n    const state = this.state.getState(programId);\n    const newFilters = { ...state.filters };\n\n    // Handle special cases for filter value conversion\n    let processedValue = value;\n    \n    if (filterKey === 'available') {\n      // Convert string values to boolean for availability filter\n      if (typeof value === 'string') {\n        if (value === 'true') {\n          processedValue = true;\n        } else if (value === 'false') {\n          processedValue = false;\n        } else if (value === '' || value === null) {\n          processedValue = undefined; // No filter\n        }\n      }\n    } else if (filterKey === 'minRate' || filterKey === 'maxRate') {\n      // Convert empty strings to undefined for rate filters\n      if (value === '' || value === null) {\n        processedValue = undefined;\n      } else {\n        processedValue = Number(value);\n      }\n    }\n\n    if (type === 'append' && Array.isArray(newFilters[filterKey as keyof ExpertFilters])) {\n      const currentArray = newFilters[filterKey as keyof ExpertFilters] as any[];\n      newFilters[filterKey as keyof ExpertFilters] = [...currentArray, processedValue] as any;\n    } else {\n      (newFilters as any)[filterKey] = processedValue;\n    }\n\n    // Reset offset to 0 when any filter changes (except offset itself)\n    // This ensures we start from the beginning when filters change\n    if (filterKey !== 'offset') {\n      newFilters.offset = 0;\n    }\n\n    this.state.updateState(programId, { filters: newFilters });\n    \n    this.log(`Filter updated: ${filterKey} = ${processedValue} (original: ${value})`);\n    \n    // Dispatch filter change event\n    const event: FilterChangeEvent = {\n      filters: newFilters,\n      element: document.querySelector(`[data-container-id=\"${programId}\"]`) as HTMLElement\n    };\n    \n    this.dispatchEvent(document as any, 'filterChange', event);\n  }\n\n  private showLoading(container: Element, show: boolean): void {\n    const loadingElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n    if (loadingElement) {\n      (loadingElement as HTMLElement).style.display = show ? '' : 'none';\n    }\n    \n    (container as HTMLElement).classList.toggle(this.config.loadingClass, show);\n  }\n\n  private showError(container: Element, error: Error): void {\n    const errorElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.error}]`);\n    if (errorElement) {\n      errorElement.textContent = error.message;\n      (errorElement as HTMLElement).style.display = '';\n    }\n    \n    (container as HTMLElement).classList.add(this.config.errorClass);\n    this.log('Error displayed', error);\n  }\n\n  private dispatchEvent(target: Element | Document, eventName: string, detail: any): void {\n    const event = new CustomEvent(`contra:${eventName}`, { detail });\n    target.dispatchEvent(event);\n  }\n\n  private log(message: string, ...args: any[]): void {\n    if (this.config.debug) {\n      console.log(`[ContraWebflow] ${message}`, ...args);\n    }\n  }\n}\n\n/**\n * Auto-initialize runtime when DOM is ready\n */\nfunction autoInit(): void {\n  const configElement = document.getElementById('contra-config');\n  if (!configElement) {\n    console.warn('[ContraWebflow] No config element found. Runtime not initialized.');\n    return;\n  }\n\n  try {\n    const config = JSON.parse(configElement.textContent || '{}');\n    \n    // Validate required config\n    if (!config.apiKey) {\n      console.error('[ContraWebflow] API key is required in config.');\n      return;\n    }\n    \n    if (!config.program) {\n      console.error('[ContraWebflow] Program ID is required in config.');\n      return;\n    }\n    \n    // Add a small delay to ensure all DOM elements are ready\n    const initializeRuntime = () => {\n      const runtime = new ContraWebflowRuntime(config);\n      \n      // Expose runtime globally for debugging\n      (window as any).contraRuntime = runtime;\n      \n      runtime.init().catch(error => {\n        console.error('[ContraWebflow] Runtime initialization failed:', error);\n      });\n    };\n    \n    // Use setTimeout to ensure DOM is fully ready\n    setTimeout(initializeRuntime, 100);\n    \n  } catch (error) {\n    console.error('[ContraWebflow] Failed to parse config:', error);\n  }\n}\n\n// Auto-initialize when DOM is ready with multiple fallbacks\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', autoInit);\n} else if (document.readyState === 'interactive') {\n  // DOM is ready but resources might still be loading\n  setTimeout(autoInit, 50);\n} else {\n  // DOM and resources are ready\n  autoInit();\n}\n\n// Export runtime class for manual initialization\nexport { ContraWebflowRuntime as default }; "]}
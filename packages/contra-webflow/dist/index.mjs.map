{"version":3,"sources":["../src/runtime.ts"],"names":["ATTR_PREFIX","ATTRS","RuntimeState","listId","updates","state","ContraWebflowRuntime","config","ContraClient","listElements","listElement","error","programId","availableFilters","initialFilters","limit","button","action","targetListId","e","append","filters","response","newExperts","allExperts","experts","template","card","fragment","expert","expertCard","element","fieldName","format","value","displayValue","utils","rating","fullStars","hasHalfStar","emptyStars","starsHtml","i","textElement","url","mediaType","parent","mediaElement","urlLower","isVideo","ext","isCloudinaryVideo","originalElement","video","posterUrl","fallbackImg","img","placeholder","videoUrl","from","to","attr","existingStyle","container","repeatType","maxItems","tag","items","item","itemElement","showWhen","hideWhen","shouldShow","condition","parts","field","restOfCondition","expertValue","result","numValue","expertStr","valueStr","emptyElement","loadMoreButton","btn","hasMore","filterKey","newFilters","processedValue","v","filterControls","control","debounceTime","handler","debouncedHandler","eventType","func","delay","timeoutId","args","name","selector","option","show","loadingElement","errorElement","target","eventName","detail","event","message","data","filterDef","f","optionElement","input","autocomplete","place","locationValue","autoInit","configElement","runtime"],"mappings":"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","file":"index.mjs","sourcesContent":["import { ContraClient, utils } from '@contra/client';\nimport type {\n  ExpertProfile,\n  ExpertFilters,\n  FilterChangeEvent,\n  ExpertLoadEvent,\n  ErrorEvent,\n  ExpertField\n} from '@contra/types';\n\n/**\n * Webflow Runtime for Contra Experts\n * Simplified for flexibility and predictability.\n */\n\n// Simplified configuration\ninterface RuntimeConfig {\n  apiKey: string;\n  debug?: boolean;\n  loadingClass?: string;\n  errorClass?: string;\n  emptyClass?: string;\n  // Video configuration\n  videoAutoplay?: boolean;\n  videoHoverPlay?: boolean;\n  videoMuted?: boolean;\n  videoLoop?: boolean;\n  videoControls?: boolean;\n}\n\n// Add google maps to window object for typescript\ndeclare global {\n  interface Window {\n    google: any;\n  }\n}\n\n// Attribute constants\nconst ATTR_PREFIX = 'data-contra-';\nconst ATTRS = {\n  // Core list attributes\n  listId: 'list-id',\n  program: 'program',\n  template: 'template',\n  \n  // States\n  loading: 'loading',\n  error: 'error',\n  empty: 'empty',\n  \n  // Field binding\n  field: 'field',\n  format: 'format',\n  \n  // Repeating elements\n  repeat: 'repeat',\n  max: 'max',\n  \n  // Sorting and pagination\n  limit: 'limit',\n  \n  // Actions\n  action: 'action',\n  listTarget: 'list-target',\n\n  // Conditional display\n  showWhen: 'show-when',\n  hideWhen: 'hide-when'\n} as const;\n\n// State management is now keyed by the list's unique ID\nclass RuntimeState {\n  private states = new Map<string, {\n    filters: ExpertFilters;\n    experts: ExpertProfile[];\n    loading: boolean;\n    error: Error | null;\n    offset: number;\n    limit: number;\n    totalCount: number;\n    hasNextPage: boolean;\n  }>();\n\n  getState(listId: string) {\n    if (!this.states.has(listId)) {\n      this.states.set(listId, {\n        filters: {},\n        experts: [],\n        loading: false,\n        error: null,\n        offset: 0,\n        limit: 20, // Default limit\n        totalCount: 0,\n        hasNextPage: false\n      });\n    }\n    return this.states.get(listId)!;\n  }\n\n  updateState(listId: string, updates: Partial<ReturnType<RuntimeState['getState']>>) {\n    const state = this.getState(listId);\n    Object.assign(state, updates);\n    this.states.set(listId, state);\n  }\n}\n\n/**\n * Main Runtime Class\n */\nexport class ContraWebflowRuntime {\n  private client: ContraClient;\n  private config: Required<RuntimeConfig>;\n  private state = new RuntimeState();\n  private debouncedReload: Map<string, () => void> = new Map();\n\n  constructor(config: RuntimeConfig) {\n    this.config = {\n      debug: false,\n      loadingClass: 'loading',\n      errorClass: 'error',\n      emptyClass: 'empty',\n      // Video configuration defaults\n      videoAutoplay: false,\n      videoHoverPlay: true,\n      videoMuted: true,\n      videoLoop: true,\n      videoControls: false,\n      ...config\n    };\n\n    this.client = new ContraClient({\n      apiKey: this.config.apiKey,\n      debug: this.config.debug\n    });\n\n    this.log('Runtime initialized', this.config);\n  }\n\n  /**\n   * Initialize the runtime by finding and setting up all lists.\n   */\n  async init(): Promise<void> {\n    this.log('Initializing runtime...');\n\n    try {\n      // 1. Discover all lists on the page\n      const listElements = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.listId}]`);\n      this.log(`Found ${listElements.length} lists to initialize.`);\n\n      // 2. Initialize each list\n      for (const listElement of listElements) {\n        await this.initList(listElement);\n      }\n\n      // 3. Wire up all action buttons\n      this.wireActionButtons();\n\n      // 4. Wire up all filter controls\n      this.wireFilterControls();\n\n      this.log('Runtime initialization complete');\n    } catch (error) {\n      this.log('Runtime initialization failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize a single expert list.\n   */\n  private async initList(listElement: Element): Promise<void> {\n    const listId = this.getAttr(listElement, ATTRS.listId);\n    const programId = this.getAttr(listElement, ATTRS.program);\n\n    if (!listId || !programId) {\n      this.log('List element is missing required attributes `data-contra-list-id` or `data-contra-program`.', listElement);\n      return;\n    }\n\n    this.log(`Initializing list: ${listId} for program: ${programId}`);\n\n    try {\n      // Mark as initialized\n      (listElement as HTMLElement).setAttribute('data-contra-initialized', 'true');\n      \n      // New: Fetch available filters and populate controls that target this list\n      const availableFilters = await this.getAvailableFilters(programId);\n      this.populateFilterControls(listId, availableFilters);\n\n      // Parse initial filters from the list element itself\n      const initialFilters = this.parseFiltersFromElement(listElement);\n      const limit = parseInt(this.getAttr(listElement, ATTRS.limit) || '20', 10);\n      \n      // Update state with these initial settings\n      this.state.updateState(listId, { \n      filters: initialFilters,\n        limit: limit,\n        offset: initialFilters.offset || 0,\n      });\n      \n      this.log(`List setup complete for: ${listId}`, { initialFilters, limit });\n      \n      // Load initial data for the list\n      await this.loadExperts(listId, programId);\n\n    } catch (error) {\n      this.log(`Failed to initialize list ${listId}`, error);\n      this.showError(listElement, error as Error);\n    }\n  }\n\n  /**\n   * Wire up all action buttons on the page.\n   */\n  private wireActionButtons(): void {\n    const actionButtons = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.action}]`);\n    \n    actionButtons.forEach(button => {\n      const action = this.getAttr(button, ATTRS.action);\n      const targetListId = this.getAttr(button, ATTRS.listTarget);\n      \n      if (!action || !targetListId) {\n        this.log('Action button is missing required `data-contra-action` or `data-contra-list-target` attributes.', button);\n        return;\n      }\n\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.handleAction(action, targetListId, button);\n      });\n    });\n  }\n\n  /**\n   * Load experts for a given list.\n   */\n  private async loadExperts(listId: string, programId: string, append = false): Promise<void> {\n    const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${listId}\"]`);\n    if (!listElement) {\n      this.log(`Cannot find list element with ID: ${listId}`);\n      return;\n    }\n\n    const state = this.state.getState(listId);\n    const filters = {\n      ...state.filters,\n      limit: state.limit,\n      offset: state.offset,\n    };\n    \n    this.log(`Loading experts for list: ${listId}`, filters);\n\n    try {\n      this.showLoading(listElement, true);\n      this.state.updateState(listId, { loading: true, error: null });\n\n      const response = await this.client.listExperts(programId, filters);\n      \n      this.log(`Loaded ${response.data.length} experts for list ${listId}`, response);\n\n      const newExperts = response.data;\n      const allExperts = append ? [...state.experts, ...newExperts] : newExperts;\n\n      // Update state\n      this.state.updateState(listId, {\n        experts: allExperts,\n        totalCount: response.totalCount,\n        offset: state.offset + newExperts.length,\n        hasNextPage: newExperts.length === state.limit,\n        loading: false\n      });\n\n      // Render experts\n      this.renderExperts(listElement, newExperts, append);\n      \n      // Update UI states\n      this.updateUIStates(listElement, listId);\n\n    } catch (error) {\n      this.log(`Failed to load experts for list: ${listId}`, error);\n      \n      this.state.updateState(listId, { \n        loading: false, \n        error: error as Error \n      });\n      \n      this.showError(listElement, error as Error);\n      \n    } finally {\n      this.showLoading(listElement, false);\n    }\n  }\n\n  /**\n   * Render experts into the container. Can clear or append.\n   */\n  private renderExperts(listElement: Element, experts: ExpertProfile[], append: boolean): void {\n    const template = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    if (!template) {\n      this.log('No template found in list', listElement);\n      return;\n    }\n\n    if (!append) {\n      // Clear only previously rendered expert cards\n      const existingCards = this.querySelectorAll(listElement, '.contra-rendered-item');\n    existingCards.forEach(card => card.remove());\n    }\n\n    const fragment = document.createDocumentFragment();\n    experts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert);\n      fragment.appendChild(expertCard);\n    });\n    listElement.appendChild(fragment);\n\n    this.log(`Rendered ${experts.length} expert cards into list`, listElement);\n  }\n\n  /**\n   * Populate expert card from template\n   */\n  private populateExpertCard(template: Element, expert: ExpertProfile): Element {\n    const card = template.cloneNode(true) as Element;\n    \n    // Add a marker class to identify this as a rendered card\n    card.classList.add('contra-rendered-item');\n    \n    // Remove template attribute and show the card\n    card.removeAttribute(`${ATTR_PREFIX}${ATTRS.template}`);\n    (card as HTMLElement).style.display = '';\n\n    // Populate field bindings\n    this.populateFields(card, expert);\n    \n    // Handle repeating elements (projects, social links)\n    this.populateRepeatingElements(card, expert);\n    \n    // Handle conditional display\n    this.handleConditionalDisplay(card, expert);\n\n    return card;\n  }\n\n  /**\n   * Populate data fields in the card\n   */\n  private populateFields(card: Element, expert: ExpertProfile): void {\n    const fieldElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.field}]`);\n    \n    fieldElements.forEach(element => {\n      const fieldName = this.getAttr(element, ATTRS.field) as ExpertField;\n      const format = this.getAttr(element, ATTRS.format);\n      \n      if (!fieldName || !(fieldName in expert)) return;\n\n      const value = expert[fieldName];\n      this.setElementValue(element, value, format);\n    });\n\n    // Handle star ratings\n    const starsElements = this.querySelectorAll(card, '[data-contra-stars]');\n    starsElements.forEach(element => {\n      if (expert.averageReviewScore) {\n        this.renderStarRating(element, expert.averageReviewScore);\n      }\n    });\n  }\n\n  /**\n   * Set element value with proper formatting\n   */\n  private setElementValue(element: Element, value: any, format?: string | null): void {\n    if (value == null || value === '') return;\n\n    // Media type detection and handling\n    if (this.isMediaField(element) && typeof value === 'string' && value.trim()) {\n      this.setMediaValue(element, value);\n      return;\n    }\n\n    if (element instanceof HTMLAnchorElement) {\n      element.href = String(value);\n      if (element.children.length === 0 && !element.textContent?.trim()) {\n        element.textContent = String(value);\n      }\n    } else if (element instanceof HTMLInputElement) {\n      element.value = String(value);\n    } else if (element instanceof HTMLImageElement) {\n      // Regular image handling for avatars and other images\n      element.src = String(value);\n      element.alt = element.alt || 'Image';\n    } else {\n      // Text content with formatting\n      let displayValue = String(value);\n      \n      if (format) {\n        switch (format) {\n          case 'currency':\n            displayValue = typeof value === 'number' ? `$${value}` : displayValue;\n            break;\n          case 'rate':\n            displayValue = utils.formatRate(typeof value === 'number' ? value : null);\n            break;\n          case 'rating':\n            // Format rating to one decimal place (5.0, 4.9, etc.)\n            displayValue = typeof value === 'number' ? value.toFixed(1) : displayValue;\n            break;\n          case 'earnings':\n            // Format earnings like $25k+\n            if (typeof value === 'number') {\n              if (value >= 1000000) {\n                displayValue = `$${Math.floor(value / 1000000)}M+`;\n              } else if (value >= 1000) {\n                displayValue = `$${Math.floor(value / 1000)}k+`;\n              } else {\n                displayValue = `$${value}`;\n              }\n            }\n            break;\n          case 'number':\n            displayValue = typeof value === 'number' ? value.toLocaleString() : displayValue;\n            break;\n          case 'truncate':\n            displayValue = displayValue.length > 100 ? displayValue.substring(0, 97) + '...' : displayValue;\n            break;\n          case 'boolean':\n            displayValue = value ? 'Yes' : 'No';\n            break;\n          case 'availability':\n            displayValue = value ? 'Available' : 'Not Available';\n            break;\n        }\n      }\n      \n      element.textContent = displayValue;\n    }\n  }\n\n  /**\n   * Star rating rendering with optional text display\n   */\n  private renderStarRating(element: Element, rating: number): void {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    let starsHtml = '';\n    \n    // Full stars\n    for (let i = 0; i < fullStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-full\">★</span>';\n    }\n    \n    // Half star\n    if (hasHalfStar) {\n      starsHtml += '<span class=\"contra-star contra-star-half\">★</span>';\n    }\n    \n    // Empty stars\n    for (let i = 0; i < emptyStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-empty\">☆</span>';\n    }\n    \n    element.innerHTML = starsHtml;\n    \n    // Also update any rating text elements in the same card\n    const card = element.closest('[data-contra-template]') || element.closest('.expert-card');\n    if (card) {\n      const ratingTextElements = this.querySelectorAll(card, '[data-contra-rating-text]');\n      ratingTextElements.forEach(textElement => {\n        textElement.textContent = rating.toFixed(1);\n      });\n    }\n  }\n\n  /**\n   * Media type detection and element handling\n   */\n  private isMediaField(element: Element): boolean {\n    const field = this.getAttr(element, ATTRS.field);\n    // Only apply advanced media handling to project cover URLs, not avatars\n    return field === 'coverUrl';\n  }\n\n  /**\n   * Media value setting with automatic type detection\n   */\n  private setMediaValue(element: Element, url: string): void {\n    const mediaType = this.detectMediaType(url);\n    const parent = element.parentElement;\n    \n    if (!parent) {\n      this.log('Media element has no parent for replacement', element);\n      return;\n    }\n\n    // Remove existing media element\n    element.remove();\n\n    // Create appropriate media element\n    let mediaElement: HTMLElement;\n    \n    switch (mediaType) {\n      case 'video':\n        mediaElement = this.createVideoElement(url, element);\n        break;\n      case 'image':\n      default:\n        mediaElement = this.createImageElement(url, element);\n        break;\n    }\n\n    // Preserve classes and attributes from original element\n    this.transferAttributes(element, mediaElement);\n    \n    // Insert new media element\n    parent.appendChild(mediaElement);\n    \n    this.log(`Created ${mediaType} element for URL: ${url}`);\n  }\n\n  /**\n   * Detect media type from URL\n   */\n  private detectMediaType(url: string): 'image' | 'video' {\n    if (!url || typeof url !== 'string') {\n      this.log('Invalid URL provided to detectMediaType:', url);\n      return 'image';\n    }\n    \n    const urlLower = url.toLowerCase();\n    \n    // Video formats\n    const videoExtensions = ['.mp4', '.webm', '.mov', '.avi', '.mkv', '.ogg'];\n    const isVideo = videoExtensions.some(ext => urlLower.includes(ext));\n    \n    // Special handling for Cloudinary video URLs\n    const isCloudinaryVideo = urlLower.includes('cloudinary.com/') && urlLower.includes('/video/');\n    \n    return (isVideo || isCloudinaryVideo) ? 'video' : 'image';\n  }\n\n  /**\n   * Create video element with fallback\n   */\n  private createVideoElement(url: string, originalElement: Element): HTMLVideoElement {\n    const video = document.createElement('video');\n    \n    // Video attributes\n    video.src = url;\n    video.muted = this.config.videoMuted;\n    video.loop = this.config.videoLoop;\n    video.playsInline = true;\n    video.preload = 'metadata';\n    video.controls = this.config.videoControls;\n    \n    // Maintain aspect ratio and object-fit from original\n    video.style.width = '100%';\n    video.style.height = '100%';\n    video.style.objectFit = 'cover';\n    video.style.borderRadius = 'inherit';\n    \n    // Autoplay configuration\n    if (this.config.videoAutoplay) {\n      video.autoplay = true;\n      video.setAttribute('autoplay', '');\n    }\n    \n    // Error handling with fallback to poster or placeholder\n    video.onerror = () => {\n      this.log(`Video failed to load: ${url}`);\n      // Try to extract a thumbnail from Cloudinary video URL\n      const posterUrl = this.extractVideoThumbnail(url);\n      if (posterUrl) {\n        const fallbackImg = this.createImageElement(posterUrl, originalElement);\n        video.parentElement?.replaceChild(fallbackImg, video);\n      } else {\n        // Show placeholder\n        video.style.background = '#f3f4f6';\n        video.style.position = 'relative';\n        video.innerHTML = '<div style=\"position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);color:#9ca3af;font-size:12px;\">Video unavailable</div>';\n      }\n    };\n\n    // Hover-to-play functionality (if enabled and not autoplay)\n    if (this.config.videoHoverPlay && !this.config.videoAutoplay) {\n      video.addEventListener('mouseenter', () => {\n        video.currentTime = 0;\n        video.play().catch(() => {\n          // Ignore play errors (browser policies)\n        });\n      });\n\n      video.addEventListener('mouseleave', () => {\n        video.pause();\n        video.currentTime = 0;\n      });\n    }\n\n    return video;\n  }\n\n  /**\n   * Create image element with error handling\n   */\n  private createImageElement(url: string, originalElement: Element): HTMLImageElement {\n    const img = document.createElement('img');\n    \n    img.src = url;\n    img.alt = originalElement.getAttribute('alt') || 'Media content';\n    img.loading = 'lazy';\n    \n    // Maintain styling\n    img.style.width = '100%';\n    img.style.height = '100%';\n    img.style.objectFit = 'cover';\n    img.style.borderRadius = 'inherit';\n    \n    // Error handling\n    img.onerror = () => {\n      this.log(`Image failed to load: ${url}`);\n      img.style.background = '#f3f4f6';\n      img.style.opacity = '0.5';\n      img.alt = 'Image unavailable';\n      \n      // Add broken image icon\n      img.style.position = 'relative';\n      const placeholder = document.createElement('div');\n      placeholder.style.cssText = `\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        color: #9ca3af;\n        font-size: 12px;\n        text-align: center;\n      `;\n      placeholder.textContent = '🖼️ Image unavailable';\n      img.parentElement?.appendChild(placeholder);\n    };\n\n    return img;\n  }\n\n  /**\n   * Extract video thumbnail from Cloudinary URL\n   */\n  private extractVideoThumbnail(videoUrl: string): string | null {\n    if (videoUrl.includes('cloudinary.com/') && videoUrl.includes('/video/')) {\n      // Convert video URL to image thumbnail\n      return videoUrl\n        .replace('/video/', '/image/')\n        .replace(/\\.(mp4|webm|mov|avi|mkv)$/i, '.jpg')\n        .replace('fl_progressive', 'f_auto,q_auto,c_fill');\n    }\n    return null;\n  }\n\n  /**\n   * Transfer attributes and classes from old element to new\n   */\n  private transferAttributes(from: Element, to: HTMLElement): void {\n    // Transfer classes\n    if (from.className) {\n      to.className = from.className;\n    }\n    \n    // Transfer data attributes (except contra-field)\n    Array.from(from.attributes).forEach(attr => {\n      if (attr.name.startsWith('data-') && attr.name !== `${ATTR_PREFIX}${ATTRS.field}`) {\n        to.setAttribute(attr.name, attr.value);\n      }\n    });\n    \n    // Transfer style\n    if (from.getAttribute('style')) {\n      const existingStyle = to.getAttribute('style') || '';\n      to.setAttribute('style', existingStyle + '; ' + from.getAttribute('style'));\n    }\n  }\n\n  /**\n   * Handle repeating elements (projects, social links)\n   */\n  private populateRepeatingElements(card: Element, expert: ExpertProfile): void {\n    const repeatElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.repeat}]`);\n    \n    repeatElements.forEach(container => {\n      const repeatType = this.getAttr(container, ATTRS.repeat);\n      const maxItems = parseInt(this.getAttr(container, ATTRS.max) || '10');\n      \n      if (repeatType === 'projects' && expert.projects) {\n        this.populateRepeatingContainer(container, expert.projects.slice(0, maxItems));\n      } else if (repeatType === 'socialLinks' && expert.socialLinks) {\n        this.populateRepeatingContainer(container, expert.socialLinks.slice(0, maxItems));\n      } else if (repeatType === 'skillTags' && expert.skillTags) {\n        this.populateRepeatingContainer(container, expert.skillTags.slice(0, maxItems).map((tag: string) => ({ name: tag })));\n      }\n    });\n  }\n\n  /**\n   * Populate a repeating container with items\n   */\n  private populateRepeatingContainer(container: Element, items: any[]): void {\n    const template = container.firstElementChild;\n    if (!template) return;\n\n    // Clear existing items\n    container.innerHTML = '';\n    \n    // Create items from template\n    items.forEach(item => {\n      const itemElement = template.cloneNode(true) as Element;\n      this.populateFields(itemElement, item);\n      container.appendChild(itemElement);\n    });\n    \n    // Hide container if no items\n    if (items.length === 0) {\n      (container as HTMLElement).style.display = 'none';\n    }\n  }\n\n  /**\n   * Handle conditional display based on data\n   */\n  private handleConditionalDisplay(card: Element, expert: ExpertProfile): void {\n    const conditionalElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.showWhen}], [${ATTR_PREFIX}${ATTRS.hideWhen}]`);\n    \n    conditionalElements.forEach(element => {\n      const showWhen = this.getAttr(element, ATTRS.showWhen);\n      const hideWhen = this.getAttr(element, ATTRS.hideWhen);\n      \n      let shouldShow = true;\n      \n      if (showWhen) {\n        shouldShow = this.evaluateCondition(expert, showWhen);\n      }\n      \n      if (hideWhen) {\n        shouldShow = shouldShow && !this.evaluateCondition(expert, hideWhen);\n      }\n      \n      (element as HTMLElement).style.display = shouldShow ? '' : 'none';\n    });\n  }\n\n  /**\n   * Evaluate a condition against expert data\n   */\n  private evaluateCondition(expert: ExpertProfile, condition: string): boolean {\n    if (!condition || typeof condition !== 'string') {\n      this.log('Invalid condition provided:', condition);\n      return false;\n    }\n    \n    // Parse condition: \"field:value\" or \"field:>value\" etc.\n    const parts = condition.split(':');\n    if (parts.length < 2) {\n      this.log('Invalid condition format:', condition);\n      return false;\n    }\n    \n    const field = parts[0];\n    const restOfCondition = parts.slice(1).join(':'); // Handle colons in values\n    const expertValue = (expert as any)[field];\n    \n    this.log(`Evaluating condition: ${field} (${expertValue}, type: ${typeof expertValue}) against ${restOfCondition}`);\n    \n    if (expertValue == null) {\n      this.log(`Field '${field}' is null/undefined, condition fails`);\n      return false;\n    }\n    \n    // Check for comparison operators\n    if (restOfCondition.startsWith('>=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) >= Number(value);\n      this.log(`Comparison: ${expertValue} >= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) <= Number(value);\n      this.log(`Comparison: ${expertValue} <= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('>')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) > Number(value);\n      this.log(`Comparison: ${expertValue} > ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) < Number(value);\n      this.log(`Comparison: ${expertValue} < ${value} = ${result}`);\n      return result;\n    } else {\n      // Direct value comparison with type-aware handling\n      let result = false;\n      \n      // Handle boolean fields specially\n      if (typeof expertValue === 'boolean') {\n        // Convert string condition to boolean for comparison\n        if (restOfCondition.toLowerCase() === 'true') {\n          result = expertValue === true;\n        } else if (restOfCondition.toLowerCase() === 'false') {\n          result = expertValue === false;\n        } else {\n          result = false;\n        }\n        this.log(`Boolean comparison: ${expertValue} === ${restOfCondition.toLowerCase() === 'true'} = ${result}`);\n      } else if (typeof expertValue === 'number') {\n        // Handle numeric comparisons\n        const numValue = Number(restOfCondition);\n        result = !isNaN(numValue) && expertValue === numValue;\n        this.log(`Number comparison: ${expertValue} === ${numValue} = ${result}`);\n      } else {\n        // String comparison (case-insensitive)\n        const expertStr = String(expertValue);\n        const valueStr = String(restOfCondition);\n        result = expertStr.toLowerCase() === valueStr.toLowerCase();\n        this.log(`String comparison: '${expertStr}' === '${valueStr}' = ${result}`);\n      }\n      \n      return result;\n    }\n  }\n\n  /**\n   * Update UI states based on current data for a specific list.\n   */\n  private updateUIStates(listElement: Element, listId: string): void {\n    const state = this.state.getState(listId);\n    \n    // Show/hide empty state\n    const emptyElement = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (emptyElement) {\n      (emptyElement as HTMLElement).style.display = state.experts.length === 0 && !state.loading ? '' : 'none';\n    }\n\n    // Update and control visibility of the load more button\n    const loadMoreButton = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listTarget}=\"${listId}\"]`);\n    if (loadMoreButton) {\n      const btn = loadMoreButton as HTMLButtonElement;\n      const hasMore = state.hasNextPage;\n\n      btn.style.display = hasMore ? '' : 'none';\n      btn.disabled = state.loading;\n      btn.textContent = state.loading ? 'Loading...' : 'Load More';\n    }\n  }\n\n  /**\n   * Handle action buttons (just load-more for now).\n   */\n  private handleAction(action: string, targetListId: string, button: Element): void {\n    if (action === 'load-more') {\n      const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${targetListId}\"]`);\n      const programId = this.getAttr(listElement!, ATTRS.program);\n      if (listElement && programId) {\n        this.loadExperts(targetListId, programId, true); // `true` to append\n      } else {\n        this.log(`Could not find list or program for target: ${targetListId}`);\n      }\n    }\n  }\n\n  private updateFilterAndReload(listId: string, programId: string, filterKey: string, value: any): void {\n    const state = this.state.getState(listId);\n    const newFilters = { ...state.filters };\n\n    // Process and set value\n    let processedValue = value;\n    if (filterKey === 'available') {\n      processedValue = value === 'true';\n    } else if (['minRate', 'maxRate'].includes(filterKey)) {\n      processedValue = (value === '' || value === null) ? undefined : Number(value);\n    } else if (filterKey === 'languages' && typeof value === 'string') {\n        processedValue = value.split(',').map(v => v.trim()).filter(v => v);\n        if (processedValue.length === 0) {\n            processedValue = undefined;\n        }\n    }\n\n    if (processedValue !== undefined && processedValue !== '') {\n        (newFilters as any)[filterKey] = processedValue;\n    } else {\n        delete (newFilters as any)[filterKey];\n    }\n    \n    // Reset offset and update state\n    this.state.updateState(listId, { filters: newFilters, offset: 0 });\n\n    this.log(`Filter updated for list ${listId}, reloading. New filters:`, newFilters);\n    \n    // Reload the list\n    this.loadExperts(listId, programId, false);\n  }\n\n  private wireFilterControls(): void {\n    const filterControls = this.querySelectorAll(document.body, `[data-contra-filter]`);\n    this.log(`Found ${filterControls.length} filter controls to wire.`);\n\n    filterControls.forEach(control => {\n        const filterKey = control.getAttribute('data-contra-filter');\n        const targetListId = control.getAttribute('data-contra-list-target');\n\n        if (!filterKey || !targetListId) {\n            this.log('Filter control missing required attributes: data-contra-filter or data-contra-list-target', control);\n            return;\n        }\n\n        const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}list-id=\"${targetListId}\"]`);\n        if (!listElement) return;\n        const programId = this.getAttr(listElement, ATTRS.program);\n        if (!programId) return;\n\n        // Special handler for Google Places Autocomplete\n        if (filterKey === 'location' && control instanceof HTMLInputElement) {\n            this.initGooglePlacesAutocomplete(control, targetListId, programId);\n            return; // Skip generic handler\n        }\n\n        const debounceTime = (control instanceof HTMLInputElement && ['text', 'search', 'number'].includes(control.type)) ? 300 : 0;\n        \n        const handler = () => {\n            const value = this.getControlValue(control as HTMLInputElement | HTMLSelectElement);\n            this.updateFilterAndReload(targetListId, programId, filterKey, value);\n        };\n        \n        const debouncedHandler = this.debounce(handler, debounceTime);\n        \n        const eventType = (control instanceof HTMLInputElement && ['text', 'search'].includes(control.type)) ? 'input' : 'change';\n        control.addEventListener(eventType, debouncedHandler);\n    });\n  }\n\n  private debounce(func: (...args: any[]) => void, delay: number): (...args: any[]) => void {\n    let timeoutId: number;\n    return (...args: any[]) => {\n        clearTimeout(timeoutId);\n        if (delay > 0) {\n            timeoutId = window.setTimeout(() => func.apply(this, args), delay);\n        } else {\n            func.apply(this, args);\n        }\n    };\n  }\n\n  /**\n   * Utility Methods\n   */\n  private getAttr(element: Element, name: string): string | null {\n    return element.getAttribute(`${ATTR_PREFIX}${name}`);\n  }\n\n  private querySelector(element: Element, selector: string): Element | null {\n    return element.querySelector(selector);\n  }\n\n  private querySelectorAll(element: Element, selector: string): Element[] {\n    return Array.from(element.querySelectorAll(selector));\n  }\n\n  private parseFiltersFromElement(element: Element): ExpertFilters {\n    const filters: ExpertFilters = {};\n    \n    // Parse filter attributes\n    const filterMap = {\n      'available': 'available',\n      'languages': 'languages', \n      'location': 'location',\n      'min-rate': 'minRate',\n      'max-rate': 'maxRate',\n      'sort': 'sortBy',\n      'limit': 'limit',\n      'offset': 'offset'\n    };\n\n    Object.entries(filterMap).forEach(([attr, filterKey]) => {\n      const value = this.getAttr(element, attr);\n      if (value != null) {\n        if (filterKey === 'available') {\n          (filters as any)[filterKey] = value === 'true';\n        } else if (filterKey === 'languages') {\n          (filters as any)[filterKey] = value.split(',').map(v => v.trim());\n        } else if (['minRate', 'maxRate', 'limit', 'offset'].includes(filterKey)) {\n          (filters as any)[filterKey] = parseInt(value);\n        } else {\n          (filters as any)[filterKey] = value;\n        }\n      }\n    });\n\n    // Ensure offset defaults to 0 if not specified\n    if (filters.offset === undefined) {\n      filters.offset = 0;\n    }\n\n    return filters;\n  }\n\n  private getControlValue(control: HTMLInputElement | HTMLSelectElement): any {\n    if (control instanceof HTMLInputElement) {\n      switch (control.type) {\n        case 'checkbox':\n          return control.checked;\n        case 'number':\n        case 'range':\n          return control.valueAsNumber;\n        default:\n          return control.value;\n      }\n    } else if (control instanceof HTMLSelectElement) {\n      if (control.multiple) {\n        return Array.from(control.selectedOptions).map(option => option.value);\n      }\n      return control.value;\n    }\n    return null;\n  }\n\n  private showLoading(container: Element, show: boolean): void {\n    const loadingElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n    if (loadingElement) {\n      (loadingElement as HTMLElement).style.display = show ? '' : 'none';\n    }\n    \n    (container as HTMLElement).classList.toggle(this.config.loadingClass, show);\n  }\n\n  private showError(container: Element, error: Error): void {\n    const errorElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.error}]`);\n    if (errorElement) {\n      errorElement.textContent = error.message;\n      (errorElement as HTMLElement).style.display = '';\n    }\n    \n    (container as HTMLElement).classList.add(this.config.errorClass);\n    this.log('Error displayed', error);\n  }\n\n  private dispatchEvent(target: Element | Document, eventName: string, detail: any): void {\n    const event = new CustomEvent(`contra:${eventName}`, { detail });\n    target.dispatchEvent(event);\n  }\n\n  private log(message: string, ...args: any[]): void {\n    if (this.config.debug) {\n      console.log(`[ContraWebflow] ${message}`, ...args);\n    }\n  }\n\n  private async getAvailableFilters(programId: string): Promise<any[]> {\n    const url = `https://contra.com/public-api/programs/${programId}/filters`;\n    this.log(`Fetching available filters for program: ${programId}`);\n    try {\n        const response = await fetch(url, {\n            headers: {\n                'X-API-Key': this.config.apiKey,\n                'Accept': 'application/json'\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Failed to fetch filters: ${response.statusText}`);\n        }\n        const data = await response.json();\n        this.log('Successfully fetched filters', data.data);\n        return data.data || [];\n    } catch (error) {\n        this.log('Error fetching available filters', error);\n        return [];\n    }\n  }\n  \n  private populateFilterControls(listId: string, filters: any[]): void {\n    if (!filters || filters.length === 0) return;\n\n    this.log(`Populating filter controls for list ${listId} with`, filters);\n\n    const filterControls = this.querySelectorAll(document.body, `[data-contra-list-target=\"${listId}\"]`);\n\n    filterControls.forEach(control => {\n        const filterKey = control.getAttribute('data-contra-filter');\n        const filterDef = filters.find(f => f.name === filterKey);\n\n        if (filterDef && filterDef.options && control instanceof HTMLSelectElement) {\n            this.log(`Populating options for filter '${filterKey}'`, filterDef.options);\n            \n            const placeholder = control.firstElementChild?.cloneNode(true) as Element | null;\n            control.innerHTML = ''; // Clear existing options\n            if (placeholder && placeholder.nodeName === 'OPTION') {\n                control.appendChild(placeholder);\n            }\n            \n            filterDef.options.forEach((option: any) => {\n                const optionElement = document.createElement('option');\n                if (typeof option === 'object' && option.value) {\n                    optionElement.value = option.value;\n                    optionElement.textContent = option.label || option.value;\n                } else {\n                    optionElement.value = String(option);\n                    optionElement.textContent = String(option);\n                }\n                control.appendChild(optionElement);\n            });\n        }\n    });\n  }\n\n  private initGooglePlacesAutocomplete(input: HTMLInputElement, listId: string, programId: string): void {\n    if (typeof window.google === 'undefined' || typeof window.google.maps === 'undefined') {\n        this.log('Google Maps API not loaded. Location filter will work as a text input.');\n        // Fallback to basic text input\n        input.addEventListener('change', () => {\n            this.updateFilterAndReload(listId, programId, 'location', input.value);\n        });\n        return;\n    }\n\n    this.log('Initializing Google Places Autocomplete on', input);\n    const autocomplete = new window.google.maps.places.Autocomplete(input, {\n        types: ['(cities)'],\n        fields: ['place_id', 'formatted_address']\n    });\n\n    autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        if (place && place.place_id) {\n            // Replicate the format seen in API responses: \"Formatted Address (PlaceId)\"\n            const locationValue = `${place.formatted_address} (${place.place_id})`;\n            this.log(`Place selected:`, { formatted: locationValue });\n            this.updateFilterAndReload(listId, programId, 'location', locationValue);\n        }\n    });\n\n    // Handle user clearing the input\n    input.addEventListener('input', () => {\n        if (input.value.trim() === '') {\n            this.log('Location input cleared.');\n            this.updateFilterAndReload(listId, programId, 'location', '');\n        }\n    });\n  }\n}\n\n/**\n * Auto-initialize runtime when DOM is ready\n */\nfunction autoInit(): void {\n  const configElement = document.getElementById('contra-config');\n  if (!configElement) {\n    console.warn('[ContraWebflow] No config element found. Runtime not initialized.');\n    return;\n  }\n\n  try {\n    const config = JSON.parse(configElement.textContent || '{}');\n    \n    // Validate required config\n    if (!config.apiKey) {\n      console.error('[ContraWebflow] API key is required in config.');\n      return;\n    }\n    \n    const initializeRuntime = () => {\n    const runtime = new ContraWebflowRuntime(config);\n    \n    // Expose runtime globally for debugging\n    (window as any).contraRuntime = runtime;\n    \n    runtime.init().catch(error => {\n      console.error('[ContraWebflow] Runtime initialization failed:', error);\n    });\n    };\n    \n    // Use setTimeout to ensure DOM is fully ready\n    setTimeout(initializeRuntime, 100);\n    \n  } catch (error) {\n    console.error('[ContraWebflow] Failed to parse config:', error);\n  }\n}\n\n// Auto-initialize when DOM is ready with multiple fallbacks\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', autoInit);\n} else if (document.readyState === 'interactive') {\n  // DOM is ready but resources might still be loading\n  setTimeout(autoInit, 50);\n} else {\n  // DOM and resources are ready\n  autoInit();\n}\n\n// Export runtime class for manual initialization\nexport { ContraWebflowRuntime as default }; "]}
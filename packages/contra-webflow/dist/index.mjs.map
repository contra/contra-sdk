{"version":3,"sources":["../src/runtime.ts"],"names":["ATTR_PREFIX","ATTRS","RuntimeState","listId","updates","state","ContraWebflowRuntime","config","ContraClient","listElements","programFilters","listElement","programId","error","template","initialFilters","limit","response","newExperts","allExperts","button","action","targetListId","e","append","emptyElement","filters","experts","card","fragment","expert","expertCard","element","fieldName","format","value","displayValue","utils","rating","fullStars","hasHalfStar","emptyStars","starsHtml","i","textElement","url","mediaType","parent","mediaElement","urlLower","isVideo","ext","isCloudinaryVideo","originalElement","video","posterUrl","fallbackImg","img","placeholder","videoUrl","from","to","attr","existingStyle","container","repeatType","maxItems","tag","items","item","itemElement","showWhen","hideWhen","shouldShow","condition","parts","field","restOfCondition","expertValue","result","numValue","expertStr","valueStr","listEl","isEmpty","loadMoreWrapper","hasMore","btn","errorElement","control","filterKey","newFilters","processedValue","v","apiKey","filterControls","debounceTime","handler","debouncedHandler","eventType","func","delay","timeoutId","args","name","selector","option","show","loadingElement","target","eventName","detail","event","message","data","labels","targetList","filterDef","f","options","optionElement","label","labelMatch","datalistId","datalist","autoInit","configElement","runtime"],"mappings":"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","file":"index.mjs","sourcesContent":["import { ContraClient, utils } from '@contra/client';\nimport type {\n  ExpertProfile,\n  ExpertFilters,\n  FilterChangeEvent,\n  ExpertLoadEvent,\n  ErrorEvent,\n  ExpertField\n} from '@contra/types';\n\n/**\n * Webflow Runtime for Contra Experts\n * Simplified for flexibility and predictability.\n */\n\n// Simplified configuration\ninterface RuntimeConfig {\n  apiKey: string;\n  debug?: boolean;\n  loadingClass?: string;\n  errorClass?: string;\n  emptyClass?: string;\n  // Video configuration\n  videoAutoplay?: boolean;\n  videoHoverPlay?: boolean;\n  videoMuted?: boolean;\n  videoLoop?: boolean;\n  videoControls?: boolean;\n}\n\n// Attribute constants\nconst ATTR_PREFIX = 'data-contra-';\nconst ATTRS = {\n  // Core list attributes\n  listId: 'list-id',\n  program: 'program',\n  template: 'template',\n  \n  // States\n  loading: 'loading',\n  error: 'error',\n  empty: 'empty',\n  \n  // Field binding\n  field: 'field',\n  format: 'format',\n  \n  // Repeating elements\n  repeat: 'repeat',\n  max: 'max',\n  \n  // Sorting and pagination\n  limit: 'limit',\n  \n  // Actions\n  action: 'action',\n  listTarget: 'list-target',\n\n  // Conditional display\n  showWhen: 'show-when',\n  hideWhen: 'hide-when'\n} as const;\n\n// State management is now keyed by the list's unique ID\nclass RuntimeState {\n  private states = new Map<string, {\n    filters: ExpertFilters;\n    experts: ExpertProfile[];\n    loading: boolean;\n    error: Error | null;\n    offset: number;\n    limit: number;\n    totalCount: number;\n    hasNextPage: boolean;\n  }>();\n\n  getState(listId: string) {\n    if (!this.states.has(listId)) {\n      this.states.set(listId, {\n        filters: {},\n        experts: [],\n        loading: false,\n        error: null,\n        offset: 0,\n        limit: 20, // Default limit\n        totalCount: 0,\n        hasNextPage: false\n      });\n    }\n    return this.states.get(listId)!;\n  }\n\n  updateState(listId: string, updates: Partial<ReturnType<RuntimeState['getState']>>) {\n    const state = this.getState(listId);\n    Object.assign(state, updates);\n    this.states.set(listId, state);\n  }\n}\n\n/**\n * Main Runtime Class\n */\nexport class ContraWebflowRuntime {\n  private client: ContraClient;\n  private config: Required<RuntimeConfig>;\n  private state = new RuntimeState();\n  private debouncedReload: Map<string, () => void> = new Map();\n  private filterNameMap: Record<string, string> = {\n    locations: 'location',\n  };\n  private filterOptionLabels: Record<string, Record<string, string>> = {\n    sortBy: {\n      relevance: 'Relevance',\n      oldest: 'Oldest',\n      newest: 'Newest',\n      rate_asc: 'Rate (Low to High)',\n      rate_desc: 'Rate (High to Low)'\n    }\n  };\n\n  constructor(config: RuntimeConfig) {\n    this.config = {\n      debug: false,\n      loadingClass: 'loading',\n      errorClass: 'error',\n      emptyClass: 'empty',\n      // Video configuration defaults\n      videoAutoplay: false,\n      videoHoverPlay: true,\n      videoMuted: true,\n      videoLoop: true,\n      videoControls: false,\n      ...config\n    };\n\n    this.client = new ContraClient({\n      apiKey: this.config.apiKey,\n      debug: this.config.debug\n    });\n\n    this.log('Runtime initialized', this.config);\n  }\n\n  /**\n   * Initialize the runtime by finding and setting up all lists.\n   */\n  async init(): Promise<void> {\n    this.log('Initializing runtime...');\n\n    try {\n      // 1. Discover all lists and unique programs to fetch filters for\n      const listElements = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.listId}]`);\n      this.log(`Found ${listElements.length} lists to initialize.`);\n      \n      const programFilters = new Map<string, any[]>();\n      for (const listElement of listElements) {\n        const programId = this.getAttr(listElement, ATTRS.program);\n        if (programId && !programFilters.has(programId)) {\n          this.log(`Fetching filters for program: ${programId}`);\n          programFilters.set(programId, await this.getAvailableFilters(programId));\n        }\n      }\n\n      // 2. Populate all filter controls on the page once\n      this.populateAllFilterControls(programFilters);\n\n      // 3. Initialize each list\n      for (const listElement of listElements) {\n        await this.initList(listElement);\n      }\n\n      // 4. Wire up all action buttons and filter controls\n      this.wireActionButtons();\n      this.wireFilterControls();\n\n      this.log('Runtime initialization complete');\n    } catch (error) {\n      this.log('Runtime initialization failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize a single expert list.\n   */\n  private async initList(listElement: Element): Promise<void> {\n    const listId = this.getAttr(listElement, ATTRS.listId);\n    const programId = this.getAttr(listElement, ATTRS.program);\n\n    if (!listId || !programId) {\n      this.log('List element is missing required attributes `data-contra-list-id` or `data-contra-program`.', listElement);\n      return;\n    }\n\n    this.log(`Initializing list: ${listId} for program: ${programId}`);\n\n    try {\n      (listElement as HTMLElement).setAttribute('data-contra-initialized', 'true');\n      (listElement as HTMLElement).classList.add('contra-list');\n      \n      const template = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.template}]`);\n      if (template) {\n          (template as HTMLElement).style.display = 'none';\n          this.log(`Template found and hidden for list: ${listId}`);\n      }\n      \n      const initialFilters = this.parseFiltersFromElement(listElement);\n      const limit = parseInt(this.getAttr(listElement, ATTRS.limit) || '20', 10);\n      \n      this.state.updateState(listId, { \n        filters: initialFilters,\n        limit: limit,\n        offset: initialFilters.offset || 0,\n      });\n      \n      this.state.updateState(listId, { loading: true, error: null });\n      this.updateUI(listElement, listId);\n\n      const response = await this.client.listExperts(programId, initialFilters);\n      \n      this.log(`Loaded ${response.data.length} experts for list ${listId}`, response);\n\n      const newExperts = response.data;\n      const allExperts = newExperts;\n\n      // Update state before touching the DOM\n      this.state.updateState(listId, {\n        experts: allExperts,\n        totalCount: response.totalCount,\n        offset: initialFilters.offset || 0 + newExperts.length,\n        hasNextPage: newExperts.length === limit,\n        loading: false\n      });\n\n      // Render experts and then immediately update all UI states\n      this.renderExperts(listElement, newExperts, false);\n      this.updateUI(listElement, listId);\n\n    } catch (error) {\n      this.log(`Failed to initialize list ${listId}`, error);\n      this.state.updateState(listId, { loading: false, error: error as Error });\n      this.updateUI(listElement, listId);\n    }\n  }\n\n  /**\n   * Wire up all action buttons on the page.\n   */\n  private wireActionButtons(): void {\n    const actionButtons = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.action}]`);\n    \n    actionButtons.forEach(button => {\n      const action = this.getAttr(button, ATTRS.action);\n      const targetListId = this.getAttr(button, ATTRS.listTarget);\n      \n      if (!action || !targetListId) {\n        this.log('Action button is missing required `data-contra-action` or `data-contra-list-target` attributes.', button);\n        return;\n      }\n\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.handleAction(action, targetListId, button);\n      });\n    });\n  }\n\n  /**\n   * Load experts for a given list.\n   */\n  private async loadExperts(listId: string, programId: string, append = false): Promise<void> {\n    const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${listId}\"]`);\n    if (!listElement) {\n      this.log(`Cannot find list element with ID: ${listId}`);\n      return;\n    }\n\n    // When reloading the list (not appending), we must hide the empty state message first.\n    const emptyElement = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (!append && emptyElement) {\n        (emptyElement as HTMLElement).style.display = 'none';\n    }\n\n    const state = this.state.getState(listId);\n    const filters = {\n      ...state.filters,\n      limit: state.limit,\n      offset: state.offset,\n    };\n    \n    this.log(`Loading experts for list: ${listId}`, filters);\n\n    try {\n      this.showLoading(listElement, true);\n      this.state.updateState(listId, { loading: true, error: null });\n\n      const response = await this.client.listExperts(programId, filters);\n      \n      this.log(`Loaded ${response.data.length} experts for list ${listId}`, response);\n\n      const newExperts = response.data;\n      const allExperts = append ? [...state.experts, ...newExperts] : newExperts;\n\n      // Update state before touching the DOM\n      this.state.updateState(listId, {\n        experts: allExperts,\n        totalCount: response.totalCount,\n        offset: state.offset + newExperts.length,\n        hasNextPage: newExperts.length === state.limit,\n        loading: false\n      });\n\n      // Render experts and then immediately update all UI states\n      this.renderExperts(listElement, newExperts, append);\n      this.updateUI(listElement, listId);\n\n    } catch (error) {\n      this.log(`Failed to load experts for list: ${listId}`, error);\n      this.state.updateState(listId, { loading: false, error: error as Error });\n      this.updateUI(listElement, listId);\n    } finally {\n      // Always ensure loading state is removed\n      this.showLoading(listElement, false);\n    }\n  }\n\n  /**\n   * Render experts into the container. Can clear or append.\n   */\n  private renderExperts(listElement: Element, experts: ExpertProfile[], append: boolean): void {\n    const template = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    if (!template) {\n      this.log('No template found in list', listElement);\n      return;\n    }\n\n    if (!append) {\n      // Clear only previously rendered expert cards\n      const existingCards = this.querySelectorAll(listElement, '.contra-rendered-item');\n      existingCards.forEach(card => card.remove());\n    }\n\n    const fragment = document.createDocumentFragment();\n    experts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert);\n      fragment.appendChild(expertCard);\n    });\n    listElement.appendChild(fragment);\n\n    this.log(`Rendered ${experts.length} expert cards into list`, listElement);\n  }\n\n  /**\n   * Populate expert card from template\n   */\n  private populateExpertCard(template: Element, expert: ExpertProfile): Element {\n    const card = template.cloneNode(true) as Element;\n    \n    // Add a marker class to identify this as a rendered card\n    card.classList.add('contra-rendered-item');\n    \n    // Remove template attribute and show the card\n    card.removeAttribute(`${ATTR_PREFIX}${ATTRS.template}`);\n    (card as HTMLElement).style.display = '';\n\n    // Populate field bindings\n    this.populateFields(card, expert);\n    \n    // Handle repeating elements (projects, social links)\n    this.populateRepeatingElements(card, expert);\n    \n    // Handle conditional display\n    this.handleConditionalDisplay(card, expert);\n\n    return card;\n  }\n\n  /**\n   * Populate data fields in the card\n   */\n  private populateFields(card: Element, expert: ExpertProfile): void {\n    const fieldElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.field}]`);\n    \n    fieldElements.forEach(element => {\n      const fieldName = this.getAttr(element, ATTRS.field) as ExpertField;\n      const format = this.getAttr(element, ATTRS.format);\n      \n      if (!fieldName || !(fieldName in expert)) return;\n\n      const value = expert[fieldName];\n      this.setElementValue(element, value, format);\n    });\n\n    // Handle star ratings\n    const starsElements = this.querySelectorAll(card, '[data-contra-stars]');\n    starsElements.forEach(element => {\n      if (expert.averageReviewScore) {\n        this.renderStarRating(element, expert.averageReviewScore);\n      }\n    });\n  }\n\n  /**\n   * Set element value with proper formatting\n   */\n  private setElementValue(element: Element, value: any, format?: string | null): void {\n    if (value == null || value === '') return;\n\n    // Media type detection and handling\n    if (this.isMediaField(element) && typeof value === 'string' && value.trim()) {\n      this.setMediaValue(element, value);\n      return;\n    }\n\n    if (element instanceof HTMLAnchorElement) {\n      element.href = String(value);\n      if (element.children.length === 0 && !element.textContent?.trim()) {\n        element.textContent = String(value);\n      }\n    } else if (element instanceof HTMLInputElement) {\n      element.value = String(value);\n    } else if (element instanceof HTMLImageElement) {\n      // Regular image handling for avatars and other images\n      element.src = String(value);\n      element.alt = element.alt || 'Image';\n    } else {\n      // Text content with formatting\n      let displayValue = String(value);\n      \n      if (format) {\n        switch (format) {\n          case 'currency':\n            displayValue = typeof value === 'number' ? `$${value}` : displayValue;\n            break;\n          case 'rate':\n            displayValue = utils.formatRate(typeof value === 'number' ? value : null);\n            break;\n          case 'rating':\n            // Format rating to one decimal place (5.0, 4.9, etc.)\n            displayValue = typeof value === 'number' ? value.toFixed(1) : displayValue;\n            break;\n          case 'earnings':\n            // Format earnings like $25k+\n            if (typeof value === 'number') {\n              if (value >= 1000000) {\n                displayValue = `$${Math.floor(value / 1000000)}M+`;\n              } else if (value >= 1000) {\n                displayValue = `$${Math.floor(value / 1000)}k+`;\n              } else {\n                displayValue = `$${value}`;\n              }\n            }\n            break;\n          case 'number':\n            displayValue = typeof value === 'number' ? value.toLocaleString() : displayValue;\n            break;\n          case 'truncate':\n            displayValue = displayValue.length > 100 ? displayValue.substring(0, 97) + '...' : displayValue;\n            break;\n          case 'boolean':\n            displayValue = value ? 'Yes' : 'No';\n            break;\n          case 'availability':\n            displayValue = value ? 'Available' : 'Not Available';\n            break;\n        }\n      }\n      \n      element.textContent = displayValue;\n    }\n  }\n\n  /**\n   * Star rating rendering with optional text display\n   */\n  private renderStarRating(element: Element, rating: number): void {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    let starsHtml = '';\n    \n    // Full stars\n    for (let i = 0; i < fullStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-full\">★</span>';\n    }\n    \n    // Half star\n    if (hasHalfStar) {\n      starsHtml += '<span class=\"contra-star contra-star-half\">★</span>';\n    }\n    \n    // Empty stars\n    for (let i = 0; i < emptyStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-empty\">☆</span>';\n    }\n    \n    element.innerHTML = starsHtml;\n    \n    // Also update any rating text elements in the same card\n    const card = element.closest('[data-contra-template]') || element.closest('.expert-card');\n    if (card) {\n      const ratingTextElements = this.querySelectorAll(card, '[data-contra-rating-text]');\n      ratingTextElements.forEach(textElement => {\n        textElement.textContent = rating.toFixed(1);\n      });\n    }\n  }\n\n  /**\n   * Media type detection and element handling\n   */\n  private isMediaField(element: Element): boolean {\n    const field = this.getAttr(element, ATTRS.field);\n    // Only apply advanced media handling to project cover URLs, not avatars\n    return field === 'coverUrl';\n  }\n\n  /**\n   * Media value setting with automatic type detection\n   */\n  private setMediaValue(element: Element, url: string): void {\n    const mediaType = this.detectMediaType(url);\n    const parent = element.parentElement;\n    \n    if (!parent) {\n      this.log('Media element has no parent for replacement', element);\n      return;\n    }\n\n    // Remove existing media element\n    element.remove();\n\n    // Create appropriate media element\n    let mediaElement: HTMLElement;\n    \n    switch (mediaType) {\n      case 'video':\n        mediaElement = this.createVideoElement(url, element);\n        break;\n      case 'image':\n      default:\n        mediaElement = this.createImageElement(url, element);\n        break;\n    }\n\n    // Preserve classes and attributes from original element\n    this.transferAttributes(element, mediaElement);\n    \n    // Insert new media element\n    parent.appendChild(mediaElement);\n    \n    this.log(`Created ${mediaType} element for URL: ${url}`);\n  }\n\n  /**\n   * Detect media type from URL\n   */\n  private detectMediaType(url: string): 'image' | 'video' {\n    if (!url || typeof url !== 'string') {\n      this.log('Invalid URL provided to detectMediaType:', url);\n      return 'image';\n    }\n    \n    const urlLower = url.toLowerCase();\n    \n    // Video formats\n    const videoExtensions = ['.mp4', '.webm', '.mov', '.avi', '.mkv', '.ogg'];\n    const isVideo = videoExtensions.some(ext => urlLower.includes(ext));\n    \n    // Special handling for Cloudinary video URLs\n    const isCloudinaryVideo = urlLower.includes('cloudinary.com/') && urlLower.includes('/video/');\n    \n    return (isVideo || isCloudinaryVideo) ? 'video' : 'image';\n  }\n\n  /**\n   * Create video element with fallback\n   */\n  private createVideoElement(url: string, originalElement: Element): HTMLVideoElement {\n    const video = document.createElement('video');\n    \n    // Video attributes\n    video.src = url;\n    video.muted = this.config.videoMuted;\n    video.loop = this.config.videoLoop;\n    video.playsInline = true;\n    video.preload = 'metadata';\n    video.controls = this.config.videoControls;\n    \n    // Maintain aspect ratio and object-fit from original\n    video.style.width = '100%';\n    video.style.height = '100%';\n    video.style.objectFit = 'cover';\n    video.style.borderRadius = 'inherit';\n    \n    // Autoplay configuration\n    if (this.config.videoAutoplay) {\n      video.autoplay = true;\n      video.setAttribute('autoplay', '');\n    }\n    \n    // Error handling with fallback to poster or placeholder\n    video.onerror = () => {\n      this.log(`Video failed to load: ${url}`);\n      // Try to extract a thumbnail from Cloudinary video URL\n      const posterUrl = this.extractVideoThumbnail(url);\n      if (posterUrl) {\n        const fallbackImg = this.createImageElement(posterUrl, originalElement);\n        video.parentElement?.replaceChild(fallbackImg, video);\n      } else {\n        // Show placeholder\n        video.style.background = '#f3f4f6';\n        video.style.position = 'relative';\n        video.innerHTML = '<div style=\"position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);color:#9ca3af;font-size:12px;\">Video unavailable</div>';\n      }\n    };\n\n    // Hover-to-play functionality (if enabled and not autoplay)\n    if (this.config.videoHoverPlay && !this.config.videoAutoplay) {\n      video.addEventListener('mouseenter', () => {\n        video.currentTime = 0;\n        video.play().catch(() => {\n          // Ignore play errors (browser policies)\n        });\n      });\n\n      video.addEventListener('mouseleave', () => {\n        video.pause();\n        video.currentTime = 0;\n      });\n    }\n\n    return video;\n  }\n\n  /**\n   * Create image element with error handling\n   */\n  private createImageElement(url: string, originalElement: Element): HTMLImageElement {\n    const img = document.createElement('img');\n    \n    img.src = url;\n    img.alt = originalElement.getAttribute('alt') || 'Media content';\n    img.loading = 'lazy';\n    \n    // Maintain styling\n    img.style.width = '100%';\n    img.style.height = '100%';\n    img.style.objectFit = 'cover';\n    img.style.borderRadius = 'inherit';\n    \n    // Error handling\n    img.onerror = () => {\n      this.log(`Image failed to load: ${url}`);\n      img.style.background = '#f3f4f6';\n      img.style.opacity = '0.5';\n      img.alt = 'Image unavailable';\n      \n      // Add broken image icon\n      img.style.position = 'relative';\n      const placeholder = document.createElement('div');\n      placeholder.style.cssText = `\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        color: #9ca3af;\n        font-size: 12px;\n        text-align: center;\n      `;\n      placeholder.textContent = '🖼️ Image unavailable';\n      img.parentElement?.appendChild(placeholder);\n    };\n\n    return img;\n  }\n\n  /**\n   * Extract video thumbnail from Cloudinary URL\n   */\n  private extractVideoThumbnail(videoUrl: string): string | null {\n    if (videoUrl.includes('cloudinary.com/') && videoUrl.includes('/video/')) {\n      // Convert video URL to image thumbnail\n      return videoUrl\n        .replace('/video/', '/image/')\n        .replace(/\\.(mp4|webm|mov|avi|mkv)$/i, '.jpg')\n        .replace('fl_progressive', 'f_auto,q_auto,c_fill');\n    }\n    return null;\n  }\n\n  /**\n   * Transfer attributes and classes from old element to new\n   */\n  private transferAttributes(from: Element, to: HTMLElement): void {\n    // Transfer classes\n    if (from.className) {\n      to.className = from.className;\n    }\n    \n    // Transfer data attributes (except contra-field)\n    Array.from(from.attributes).forEach(attr => {\n      if (attr.name.startsWith('data-') && attr.name !== `${ATTR_PREFIX}${ATTRS.field}`) {\n        to.setAttribute(attr.name, attr.value);\n      }\n    });\n    \n    // Transfer style\n    if (from.getAttribute('style')) {\n      const existingStyle = to.getAttribute('style') || '';\n      to.setAttribute('style', existingStyle + '; ' + from.getAttribute('style'));\n    }\n  }\n\n  /**\n   * Handle repeating elements (projects, social links)\n   */\n  private populateRepeatingElements(card: Element, expert: ExpertProfile): void {\n    const repeatElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.repeat}]`);\n    \n    repeatElements.forEach(container => {\n      const repeatType = this.getAttr(container, ATTRS.repeat);\n      const maxItems = parseInt(this.getAttr(container, ATTRS.max) || '10');\n      \n      if (repeatType === 'projects' && expert.projects) {\n        this.populateRepeatingContainer(container, expert.projects.slice(0, maxItems));\n      } else if (repeatType === 'socialLinks' && expert.socialLinks) {\n        this.populateRepeatingContainer(container, expert.socialLinks.slice(0, maxItems));\n      } else if (repeatType === 'skillTags' && expert.skillTags) {\n        this.populateRepeatingContainer(container, expert.skillTags.slice(0, maxItems).map((tag: string) => ({ name: tag })));\n      }\n    });\n  }\n\n  /**\n   * Populate a repeating container with items\n   */\n  private populateRepeatingContainer(container: Element, items: any[]): void {\n    const template = container.firstElementChild;\n    if (!template) return;\n\n    // Clear existing items\n    container.innerHTML = '';\n    \n    // Create items from template\n    items.forEach(item => {\n      const itemElement = template.cloneNode(true) as Element;\n      this.populateFields(itemElement, item);\n      container.appendChild(itemElement);\n    });\n    \n    // Hide container if no items\n    if (items.length === 0) {\n      (container as HTMLElement).style.display = 'none';\n    }\n  }\n\n  /**\n   * Handle conditional display based on data\n   */\n  private handleConditionalDisplay(card: Element, expert: ExpertProfile): void {\n    const conditionalElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.showWhen}], [${ATTR_PREFIX}${ATTRS.hideWhen}]`);\n    \n    conditionalElements.forEach(element => {\n      const showWhen = this.getAttr(element, ATTRS.showWhen);\n      const hideWhen = this.getAttr(element, ATTRS.hideWhen);\n      \n      let shouldShow = true;\n      \n      if (showWhen) {\n        shouldShow = this.evaluateCondition(expert, showWhen);\n      }\n      \n      if (hideWhen) {\n        shouldShow = shouldShow && !this.evaluateCondition(expert, hideWhen);\n      }\n      \n      (element as HTMLElement).style.display = shouldShow ? '' : 'none';\n    });\n  }\n\n  /**\n   * Evaluate a condition against expert data\n   */\n  private evaluateCondition(expert: ExpertProfile, condition: string): boolean {\n    if (!condition || typeof condition !== 'string') {\n      this.log('Invalid condition provided:', condition);\n      return false;\n    }\n    \n    // Parse condition: \"field:value\" or \"field:>value\" etc.\n    const parts = condition.split(':');\n    if (parts.length < 2) {\n      this.log('Invalid condition format:', condition);\n      return false;\n    }\n    \n    const field = parts[0];\n    const restOfCondition = parts.slice(1).join(':'); // Handle colons in values\n    const expertValue = (expert as any)[field];\n    \n    this.log(`Evaluating condition: ${field} (${expertValue}, type: ${typeof expertValue}) against ${restOfCondition}`);\n    \n    if (expertValue == null) {\n      this.log(`Field '${field}' is null/undefined, condition fails`);\n      return false;\n    }\n    \n    // Check for comparison operators\n    if (restOfCondition.startsWith('>=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) >= Number(value);\n      this.log(`Comparison: ${expertValue} >= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) <= Number(value);\n      this.log(`Comparison: ${expertValue} <= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('>')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) > Number(value);\n      this.log(`Comparison: ${expertValue} > ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) < Number(value);\n      this.log(`Comparison: ${expertValue} < ${value} = ${result}`);\n      return result;\n    } else {\n      // Direct value comparison with type-aware handling\n      let result = false;\n      \n      // Handle boolean fields specially\n      if (typeof expertValue === 'boolean') {\n        // Convert string condition to boolean for comparison\n        if (restOfCondition.toLowerCase() === 'true') {\n          result = expertValue === true;\n        } else if (restOfCondition.toLowerCase() === 'false') {\n          result = expertValue === false;\n        } else {\n          result = false;\n        }\n        this.log(`Boolean comparison: ${expertValue} === ${restOfCondition.toLowerCase() === 'true'} = ${result}`);\n      } else if (typeof expertValue === 'number') {\n        // Handle numeric comparisons\n        const numValue = Number(restOfCondition);\n        result = !isNaN(numValue) && expertValue === numValue;\n        this.log(`Number comparison: ${expertValue} === ${numValue} = ${result}`);\n      } else {\n        // String comparison (case-insensitive)\n        const expertStr = String(expertValue);\n        const valueStr = String(restOfCondition);\n        result = expertStr.toLowerCase() === valueStr.toLowerCase();\n        this.log(`String comparison: '${expertStr}' === '${valueStr}' = ${result}`);\n      }\n      \n      return result;\n    }\n  }\n\n  /**\n   * Update UI states based on current data for a specific list.\n   */\n  private updateUI(listElement: Element, listId: string): void {\n    const state = this.state.getState(listId);\n    const listEl = listElement as HTMLElement;\n\n    // Loading state\n    listEl.classList.toggle('is-loading', state.loading);\n\n    // Empty state\n    const isEmpty = !state.loading && state.experts.length === 0;\n    listEl.classList.toggle('is-empty', isEmpty);\n\n    // Load more button state\n    const loadMoreWrapper = this.querySelector(document.body, `.contra-load-more-wrapper`);\n    if (loadMoreWrapper) {\n        const hasMore = !state.loading && state.hasNextPage;\n        (loadMoreWrapper as HTMLElement).classList.toggle('has-more', hasMore);\n        \n        const btn = this.querySelector(loadMoreWrapper, 'button');\n        if(btn) {\n            (btn as HTMLButtonElement).disabled = state.loading;\n            btn.textContent = state.loading ? 'Loading...' : 'Load More';\n        }\n    }\n\n    // Error state\n    const errorElement = this.querySelector(listEl, `[${ATTR_PREFIX}${ATTRS.error}]`);\n    if (errorElement) {\n        if (state.error) {\n            errorElement.textContent = state.error.message;\n            (errorElement as HTMLElement).style.display = 'block';\n        } else {\n            (errorElement as HTMLElement).style.display = 'none';\n        }\n    }\n    this.log(`UI Updated for ${listId}: loading=${state.loading}, empty=${isEmpty}, hasMore=${state.hasNextPage}`);\n  }\n\n  /**\n   * Handle action buttons (just load-more for now).\n   */\n  private handleAction(action: string, targetListId: string, button: Element): void {\n    if (action === 'load-more') {\n      const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${targetListId}\"]`);\n      const programId = this.getAttr(listElement!, ATTRS.program);\n      if (listElement && programId) {\n        this.loadExperts(targetListId, programId, true); // `true` to append\n      } else {\n        this.log(`Could not find list or program for target: ${targetListId}`);\n      }\n    } else if (action === 'clear-filters') {\n      this.clearFilters(targetListId);\n    }\n  }\n\n  private clearFilters(targetListId: string): void {\n    const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${targetListId}\"]`);\n    if (!listElement) {\n        this.log(`Cannot find list element with ID: ${targetListId} to clear filters.`);\n        return;\n    }\n    const programId = this.getAttr(listElement, ATTRS.program);\n    if (!programId) {\n        this.log(`Cannot find programId for list: ${targetListId}`);\n        return;\n    }\n\n    this.log(`Clearing filters for list: ${targetListId}`);\n\n    // 1. Reset state\n    this.state.updateState(targetListId, { filters: {}, offset: 0 });\n\n    // 2. Reset controls visually\n    const filterControls = this.querySelectorAll(document.body, `[data-contra-filter][data-contra-list-target=\"${targetListId}\"]`);\n    filterControls.forEach(control => {\n        this.resetControlValue(control as HTMLInputElement | HTMLSelectElement);\n    });\n\n    // 3. Reload data\n    this.loadExperts(targetListId, programId, false); // false to replace, not append\n  }\n\n  private resetControlValue(control: HTMLInputElement | HTMLSelectElement): void {\n    if (control instanceof HTMLInputElement) {\n        switch (control.type) {\n            case 'checkbox':\n            case 'radio':\n                control.checked = false;\n                break;\n            case 'number':\n            case 'range':\n                control.value = '';\n                break;\n            default: // text, search, etc.\n                control.value = '';\n                break;\n        }\n    } else if (control instanceof HTMLSelectElement) {\n        control.selectedIndex = 0; // Reset to the first option\n    }\n  }\n\n  private updateFilterAndReload(listId: string, programId: string, filterKey: string, value: any): void {\n    const state = this.state.getState(listId);\n    const newFilters = { ...state.filters };\n\n    // Process and set value\n    let processedValue = value;\n    if (filterKey === 'available') {\n      // If checkbox is checked, value is true. If unchecked, it's false.\n      // We only want to apply the filter when it's true.\n      processedValue = value ? true : undefined;\n    } else if (['minRate', 'maxRate'].includes(filterKey)) {\n      processedValue = (value === '' || value === null) ? undefined : Number(value);\n    } else if (filterKey === 'languages' && typeof value === 'string') {\n        processedValue = value.split(',').map(v => v.trim()).filter(v => v);\n        if (processedValue.length === 0) {\n            processedValue = undefined;\n        }\n    }\n\n    if (processedValue !== undefined && processedValue !== '') {\n        const apiKey = this.filterNameMap[filterKey] || filterKey;\n        (newFilters as any)[apiKey] = processedValue;\n    } else {\n        const apiKey = this.filterNameMap[filterKey] || filterKey;\n        delete (newFilters as any)[apiKey];\n    }\n    \n    // Reset offset and update state\n    this.state.updateState(listId, { filters: newFilters, offset: 0 });\n\n    this.log(`Filter updated for list ${listId}, reloading. New filters:`, newFilters);\n    \n    // Reload the list\n    this.loadExperts(listId, programId, false);\n  }\n\n  private wireFilterControls(): void {\n    const filterControls = this.querySelectorAll(document.body, `[data-contra-filter]`);\n    this.log(`Found ${filterControls.length} filter controls to wire.`);\n\n    filterControls.forEach(control => {\n        const filterKey = control.getAttribute('data-contra-filter');\n        const targetListId = control.getAttribute('data-contra-list-target');\n\n        if (!filterKey || !targetListId) {\n            this.log('Filter control missing required attributes: data-contra-filter or data-contra-list-target', control);\n            return;\n        }\n\n        const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}list-id=\"${targetListId}\"]`);\n        if (!listElement) return;\n        const programId = this.getAttr(listElement, ATTRS.program);\n        if (!programId) return;\n\n        const debounceTime = (control instanceof HTMLInputElement && ['text', 'search'].includes(control.type)) ? 300 : 0;\n        \n        const handler = () => {\n            const value = this.getControlValue(control as HTMLInputElement | HTMLSelectElement);\n            this.updateFilterAndReload(targetListId, programId, filterKey, value);\n        };\n        \n        const debouncedHandler = this.debounce(handler, debounceTime);\n        \n        const eventType = (control instanceof HTMLInputElement && ['text', 'search'].includes(control.type)) ? 'input' : 'change';\n        control.addEventListener(eventType, debouncedHandler);\n    });\n  }\n\n  private debounce(func: (...args: any[]) => void, delay: number): (...args: any[]) => void {\n    let timeoutId: number;\n    return (...args: any[]) => {\n        clearTimeout(timeoutId);\n        if (delay > 0) {\n            timeoutId = window.setTimeout(() => func.apply(this, args), delay);\n        } else {\n            func.apply(this, args);\n        }\n    };\n  }\n\n  /**\n   * Utility Methods\n   */\n  private getAttr(element: Element, name: string): string | null {\n    return element.getAttribute(`${ATTR_PREFIX}${name}`);\n  }\n\n  private querySelector(element: Element, selector: string): Element | null {\n    return element.querySelector(selector);\n  }\n\n  private querySelectorAll(element: Element, selector: string): Element[] {\n    return Array.from(element.querySelectorAll(selector));\n  }\n\n  private parseFiltersFromElement(element: Element): ExpertFilters {\n    const filters: ExpertFilters = {};\n    \n    // Parse filter attributes\n    const filterMap = {\n      'available': 'available',\n      'languages': 'languages', \n      'location': 'location',\n      'min-rate': 'minRate',\n      'max-rate': 'maxRate',\n      'sort': 'sortBy',\n      'limit': 'limit',\n      'offset': 'offset'\n    };\n\n    Object.entries(filterMap).forEach(([attr, filterKey]) => {\n      const value = this.getAttr(element, attr);\n      if (value != null) {\n        if (filterKey === 'available') {\n          (filters as any)[filterKey] = value === 'true';\n        } else if (filterKey === 'languages') {\n          (filters as any)[filterKey] = value.split(',').map(v => v.trim());\n        } else if (['minRate', 'maxRate', 'limit', 'offset'].includes(filterKey)) {\n          (filters as any)[filterKey] = parseInt(value);\n        } else {\n          (filters as any)[filterKey] = value;\n        }\n      }\n    });\n\n    // Ensure offset defaults to 0 if not specified\n    if (filters.offset === undefined) {\n      filters.offset = 0;\n    }\n\n    return filters;\n  }\n\n  private getControlValue(control: HTMLInputElement | HTMLSelectElement): any {\n    if (control instanceof HTMLInputElement) {\n      switch (control.type) {\n        case 'checkbox':\n          return control.checked;\n        case 'number':\n        case 'range':\n          return control.valueAsNumber;\n        default:\n          return control.value;\n      }\n    } else if (control instanceof HTMLSelectElement) {\n      if (control.multiple) {\n        return Array.from(control.selectedOptions).map(option => option.value);\n      }\n      return control.value;\n    }\n    return null;\n  }\n\n  private showLoading(container: Element, show: boolean): void {\n    const loadingElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n    if (loadingElement) {\n      (loadingElement as HTMLElement).style.display = show ? 'block' : 'none';\n    }\n    (container as HTMLElement).classList.toggle(this.config.loadingClass, show);\n  }\n\n  private showError(container: Element, error: Error): void {\n    const errorElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.error}]`);\n    if (errorElement) {\n      errorElement.textContent = error.message;\n      (errorElement as HTMLElement).style.display = '';\n    }\n    \n    (container as HTMLElement).classList.add(this.config.errorClass);\n    this.log('Error displayed', error);\n  }\n\n  private dispatchEvent(target: Element | Document, eventName: string, detail: any): void {\n    const event = new CustomEvent(`contra:${eventName}`, { detail });\n    target.dispatchEvent(event);\n  }\n\n  private log(message: string, ...args: any[]): void {\n    if (this.config.debug) {\n      console.log(`[ContraWebflow] ${message}`, ...args);\n    }\n  }\n\n  private async getAvailableFilters(programId: string): Promise<any[]> {\n    const url = `https://contra.com/public-api/programs/${programId}/filters`;\n    this.log(`Fetching available filters for program: ${programId}`);\n    try {\n        const response = await fetch(url, {\n            headers: {\n                'X-API-Key': this.config.apiKey,\n                'Accept': 'application/json'\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Failed to fetch filters: ${response.statusText}`);\n        }\n        const data = await response.json();\n        this.log('Successfully fetched filters', data.data);\n        return data.data || [];\n    } catch (error) {\n        this.log('Error fetching available filters', error);\n        return [];\n    }\n  }\n  \n  private getFilterOptionLabel(filterKey: string, value: string): string {\n    const labels = this.filterOptionLabels[filterKey];\n    if (labels && labels[value]) {\n      return labels[value];\n    }\n    // Capitalize the first letter and lowercase the rest as a fallback\n    return value.charAt(0).toUpperCase() + value.slice(1).toLowerCase();\n  }\n\n  private populateAllFilterControls(programFilters: Map<string, any[]>): void {\n    this.log('Populating all filter controls on the page...');\n    const allControls = this.querySelectorAll(document.body, `[data-contra-filter]`);\n\n    allControls.forEach(control => {\n      const targetListId = control.getAttribute('data-contra-list-target');\n      if (!targetListId) return;\n\n      const targetList = this.querySelector(document.body, `[data-contra-list-id=\"${targetListId}\"]`);\n      if (!targetList) return;\n\n      const programId = this.getAttr(targetList, ATTRS.program);\n      if (!programId) return;\n\n      const filters = programFilters.get(programId);\n      if (!filters) return;\n\n      const filterKey = control.getAttribute('data-contra-filter');\n      const filterDef = filters.find(f => f.name === filterKey);\n\n      if (!filterDef) return;\n\n      // Handle number input ranges\n      if (filterDef.type === 'number' && control instanceof HTMLInputElement) {\n        if (filterDef.minimum !== undefined) control.min = String(filterDef.minimum);\n        if (filterDef.maximum !== undefined) control.max = String(filterDef.maximum);\n      }\n      \n      // Handle populating controls with options (select, datalist)\n      if (filterDef.options) {\n          if (control instanceof HTMLSelectElement) {\n              this.populateSelectControl(control, filterKey!, filterDef.options);\n          } else if (control instanceof HTMLInputElement && control.getAttribute('list')) {\n              this.populateDatalistControl(control, filterKey!, filterDef.options);\n          }\n      }\n    });\n  }\n\n  private populateSelectControl(control: HTMLSelectElement, filterKey: string, options: any[]): void {\n    this.log(`Populating options for filter '${filterKey}' on control`, control);\n    \n    const placeholder = control.firstElementChild?.cloneNode(true) as Element | null;\n    control.innerHTML = '';\n    if (placeholder && placeholder.getAttribute('value') === '') {\n      control.appendChild(placeholder);\n    }\n\n    options.forEach((option: any) => {\n      const optionElement = document.createElement('option');\n      const value = typeof option === 'object' && option.value !== undefined ? option.value : String(option);\n      \n      optionElement.value = value;\n\n      let label: string;\n      if (filterKey === 'locations') {\n        const labelMatch = value.match(/^(.*?)\\s*\\(/);\n        label = labelMatch ? labelMatch[1].trim() : value;\n      } else {\n        label = this.getFilterOptionLabel(filterKey!, value);\n      }\n      optionElement.textContent = label;\n      \n      if (filterKey === 'sortBy' && value === 'relevance') {\n        optionElement.selected = true;\n      }\n      control.appendChild(optionElement);\n    });\n  }\n\n  private populateDatalistControl(control: HTMLInputElement, filterKey: string, options: any[]): void {\n      const datalistId = control.getAttribute('list');\n      if (!datalistId) return;\n\n      const datalist = document.getElementById(datalistId);\n      if (!datalist) {\n          this.log(`Datalist with id '${datalistId}' not found for input control.`, control);\n          return;\n      }\n\n      this.log(`Populating datalist '#${datalistId}' for filter '${filterKey}'`);\n      datalist.innerHTML = ''; // Clear existing options\n\n      options.forEach((option: any) => {\n          const optionElement = document.createElement('option');\n          const value = typeof option === 'object' && option.value !== undefined ? option.value : String(option);\n          \n          let displayValue = value;\n          // For locations, we want a cleaner value for the user to select.\n          if (filterKey === 'locations') {\n              const labelMatch = value.match(/^(.*?)\\s*\\(/);\n              displayValue = labelMatch ? labelMatch[1].trim() : value;\n          }\n\n          optionElement.value = displayValue;\n          datalist.appendChild(optionElement);\n      });\n  }\n}\n\n/**\n * Auto-initialize runtime when DOM is ready\n */\nfunction autoInit(): void {\n  const configElement = document.getElementById('contra-config');\n  if (!configElement) {\n    console.warn('[ContraWebflow] No config element found. Runtime not initialized.');\n    return;\n  }\n\n  try {\n    const config = JSON.parse(configElement.textContent || '{}');\n    \n    // Validate required config\n    if (!config.apiKey) {\n      console.error('[ContraWebflow] API key is required in config.');\n      return;\n    }\n    \n    const initializeRuntime = () => {\n    const runtime = new ContraWebflowRuntime(config);\n    \n    // Expose runtime globally for debugging\n    (window as any).contraRuntime = runtime;\n    \n    runtime.init().catch(error => {\n      console.error('[ContraWebflow] Runtime initialization failed:', error);\n    });\n    };\n    \n    // Use setTimeout to ensure DOM is fully ready\n    setTimeout(initializeRuntime, 100);\n    \n  } catch (error) {\n    console.error('[ContraWebflow] Failed to parse config:', error);\n  }\n}\n\n// Auto-initialize when DOM is ready with multiple fallbacks\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', autoInit);\n} else if (document.readyState === 'interactive') {\n  // DOM is ready but resources might still be loading\n  setTimeout(autoInit, 50);\n} else {\n  // DOM and resources are ready\n  autoInit();\n}\n\n// Export runtime class for manual initialization\nexport { ContraWebflowRuntime as default }; "]}
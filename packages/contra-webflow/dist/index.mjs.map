{"version":3,"sources":["../src/runtime.ts"],"names":["ATTR_PREFIX","ATTRS","RuntimeState","programId","updates","state","pageNumber","experts","oldestPage","loading","ContraWebflowRuntime","config","ContraClient","allContainers","containers","container","error","baseProgramId","paginationMode","containerIndex","element","initialFilters","debouncedReload","utils","mode","isScrolling","handleScroll","scrollPosition","documentHeight","threshold","button","filterControls","control","filterKey","filterType","eventType","action","target","e","isPageNavigation","currentPage","cachedExperts","response","limit","offset","totalPages","hasNextPage","hasPreviousPage","isLoadMore","allExperts","filters","totalCount","template","card","expert","expertCard","fieldName","format","value","displayValue","rating","fullStars","hasHalfStar","emptyStars","starsHtml","i","textElement","url","mediaType","parent","mediaElement","urlLower","isVideo","ext","isCloudinaryVideo","originalElement","video","posterUrl","fallbackImg","img","placeholder","videoUrl","from","to","attr","existingStyle","repeatType","maxItems","tag","items","item","itemElement","showWhen","hideWhen","shouldShow","condition","parts","field","restOfCondition","expertValue","result","numValue","expertStr","valueStr","emptyElement","pageSize","activeFilters","_key","key","_target","currentOffset","nextOffset","prevOffset","lastPageOffset","errorText","loadMoreButtons","btnElement","prevButtons","nextButtons","firstButtons","lastButtons","paginationSection","loadedCount","paginationControls","indicator","newExperts","fragment","name","selector","selectors","foundElements","elements","allContraElements","containerCandidates","div","hasLimit","hasTemplate","hasContraClass","uniqueContainers","v","option","type","newFilters","processedValue","currentArray","event","show","loadingElement","errorElement","eventName","detail","message","args","autoInit","configElement","runtime"],"mappings":"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","file":"index.mjs","sourcesContent":["import { ContraClient, utils } from '@contra/client';\nimport type {\n  ExpertProfile,\n  ExpertFilters,\n  FilterChangeEvent,\n  ExpertLoadEvent,\n  ErrorEvent,\n  ExpertField\n} from '@contra/types';\n\n/**\n * Webflow Runtime for Contra Experts\n * Features: Performance optimization, filtering, error handling, loading states\n */\n\n// Configuration interface\ninterface RuntimeConfig {\n  apiKey: string;\n  program?: string;  // Program ID from config\n  debug?: boolean;\n  loadingClass?: string;\n  errorClass?: string;\n  emptyClass?: string;\n  autoReload?: boolean;\n  debounceDelay?: number;\n  maxRetries?: number;\n  \n  // Pagination Configuration\n  paginationMode?: 'traditional' | 'infinite' | 'hybrid';\n  infiniteScrollThreshold?: number;        // Pixels from bottom to trigger load\n  preloadNextPage?: boolean;              // Preload next page for performance\n  maxCachedPages?: number;                // Max pages to keep in memory\n  smoothScrollBehavior?: 'auto' | 'smooth';\n  loadMoreText?: string;                  // Custom \"Load More\" button text\n  \n  // Video configuration\n  videoAutoplay?: boolean;\n  videoHoverPlay?: boolean;\n  videoMuted?: boolean;\n  videoLoop?: boolean;\n  videoControls?: boolean;\n}\n\n// Attribute constants\nconst ATTR_PREFIX = 'data-contra-';\nconst ATTRS = {\n  // Core attributes\n  program: 'program',\n  template: 'template',\n  loading: 'loading',\n  error: 'error',\n  empty: 'empty',\n  \n  // Field binding\n  field: 'field',\n  format: 'format',\n  \n  // Repeating elements\n  repeat: 'repeat',\n  max: 'max',\n  \n  // Filter controls\n  filter: 'filter',\n  filterType: 'filter-type',\n  \n  // Filter attributes\n  available: 'available',\n  \n  // Sorting and pagination\n  sort: 'sort',\n  page: 'page',\n  limit: 'limit',\n  \n  // Pagination mode and controls\n  paginationMode: 'pagination-mode',\n  infiniteLoading: 'infinite-loading',\n  paginationInfo: 'pagination-info',\n  \n  // UI states\n  showWhen: 'show-when',\n  hideWhen: 'hide-when',\n  \n  // Actions\n  action: 'action',\n  target: 'target'\n} as const;\n\n// State management\nclass RuntimeState {\n  private states = new Map<string, {\n    filters: ExpertFilters;\n    experts: ExpertProfile[];\n    loading: boolean;\n    error: Error | null;\n    currentPage: number;\n    totalCount: number;\n    // Advanced pagination state\n    cachedPages: Map<number, ExpertProfile[]>;\n    loadingPages: Set<number>;\n    hasNextPage: boolean;\n    hasPreviousPage: boolean;\n    isInfiniteLoading: boolean;\n    lastScrollPosition: number;\n    paginationMode: 'traditional' | 'infinite' | 'hybrid';\n  }>();\n\n  getState(programId: string) {\n    if (!this.states.has(programId)) {\n      this.states.set(programId, {\n        filters: {},\n        experts: [],\n        loading: false,\n        error: null,\n        currentPage: 1,\n        totalCount: 0,\n        // Advanced pagination defaults\n        cachedPages: new Map(),\n        loadingPages: new Set(),\n        hasNextPage: false,\n        hasPreviousPage: false,\n        isInfiniteLoading: false,\n        lastScrollPosition: 0,\n        paginationMode: 'traditional'\n      });\n    }\n    return this.states.get(programId)!;\n  }\n\n  updateState(programId: string, updates: Partial<ReturnType<RuntimeState['getState']>>) {\n    const state = this.getState(programId);\n    Object.assign(state, updates);\n    this.states.set(programId, state);\n  }\n\n  // Advanced pagination helpers\n  cachePage(programId: string, pageNumber: number, experts: ExpertProfile[]) {\n    const state = this.getState(programId);\n    state.cachedPages.set(pageNumber, experts);\n    \n    // Implement LRU cache cleanup\n    if (state.cachedPages.size > 5) { // maxCachedPages from config\n      const oldestPage = Math.min(...state.cachedPages.keys());\n      state.cachedPages.delete(oldestPage);\n    }\n  }\n\n  getCachedPage(programId: string, pageNumber: number): ExpertProfile[] | null {\n    const state = this.getState(programId);\n    return state.cachedPages.get(pageNumber) || null;\n  }\n\n  setPageLoading(programId: string, pageNumber: number, loading: boolean) {\n    const state = this.getState(programId);\n    if (loading) {\n      state.loadingPages.add(pageNumber);\n    } else {\n      state.loadingPages.delete(pageNumber);\n    }\n  }\n\n  isPageLoading(programId: string, pageNumber: number): boolean {\n    const state = this.getState(programId);\n    return state.loadingPages.has(pageNumber);\n  }\n}\n\n/**\n * Main Runtime Class\n */\nexport class ContraWebflowRuntime {\n  private client: ContraClient;\n  private config: Required<RuntimeConfig>;\n  private state = new RuntimeState();\n  private debouncedReload: Map<string, () => void> = new Map();\n\n  constructor(config: RuntimeConfig) {\n    this.config = {\n      debug: false,\n      program: '',  // Default empty program\n      loadingClass: 'loading',\n      errorClass: 'error',\n      emptyClass: 'empty',\n      autoReload: true,\n      debounceDelay: 300,\n      maxRetries: 3,\n      // Pagination Configuration defaults\n      paginationMode: 'traditional',\n      infiniteScrollThreshold: 500,\n      preloadNextPage: true,\n      maxCachedPages: 5,\n      smoothScrollBehavior: 'auto',\n      loadMoreText: 'Load More',\n      // Video configuration defaults\n      videoAutoplay: false,      // No autoplay by default (better UX)\n      videoHoverPlay: true,       // Hover to play by default\n      videoMuted: true,           // Muted for autoplay compatibility\n      videoLoop: true,            // Loop videos\n      videoControls: false,       // No controls for cleaner look\n      ...config\n    };\n\n    this.client = new ContraClient({\n      apiKey: this.config.apiKey,\n      debug: this.config.debug\n    });\n\n    this.log('Runtime initialized', this.config);\n  }\n\n  /**\n   * Initialize the runtime and find all expert containers\n   */\n  async init(): Promise<void> {\n    this.log('Initializing runtime...');\n\n    try {\n      // Find all expert containers\n      const allContainers = this.findExpertContainers();\n      // Filter out already initialized containers\n      const containers = allContainers.filter(container => \n        !container.hasAttribute('data-contra-initialized')\n      );\n      \n      this.log(`Found ${containers.length} uninitialised expert containers (${allContainers.length} total)`);\n\n      // Initialize each container\n      for (const container of containers) {\n        await this.initContainer(container);\n      }\n\n      this.log('Runtime initialization complete');\n    } catch (error) {\n      this.log('Runtime initialization failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize a single expert container\n   */\n  private async initContainer(container: Element): Promise<void> {\n    // Get base program ID from config\n    const baseProgramId = this.config.program;\n    if (!baseProgramId) {\n      this.log('No program ID found in config', container);\n      return;\n    }\n\n    // Create unique program ID for this container to avoid state conflicts\n    const paginationMode = this.determinePaginationMode(container);\n    const containerIndex = Array.from(document.querySelectorAll('[data-contra-limit], [data-contra-pagination-mode]')).indexOf(container);\n    const programId = `${baseProgramId}-${paginationMode}-${containerIndex}`;\n\n    this.log(`Initializing container for program: ${programId} (base: ${baseProgramId}, mode: ${paginationMode})`);\n\n    try {\n      // Setup container state\n      this.setupContainer(container, programId, baseProgramId);\n      \n      // Wire up filter controls\n      this.wireFilterControls(container, programId);\n      \n      // Wire up action buttons\n      this.wireActionButtons(container, programId);\n      \n      // Load initial data\n      await this.loadExperts(container, programId);\n\n    } catch (error) {\n      this.log(`Failed to initialize container for program ${programId}`, error);\n      this.showError(container, error as Error);\n    }\n  }\n\n  /**\n   * Setup container with initial state and classes\n   */\n  private setupContainer(container: Element, programId: string, baseProgramId: string): void {\n    const element = container as HTMLElement;\n    \n    // Add runtime classes and unique identifier\n    element.classList.add('contra-runtime');\n    element.setAttribute('data-contra-initialized', 'true');\n    element.setAttribute('data-program-id', programId); // Use unique program ID\n    element.setAttribute('data-base-program-id', baseProgramId); // Store base program ID for API calls\n    \n    // Parse initial filters from attributes\n    const initialFilters = this.parseFiltersFromElement(container);\n    \n    // Determine pagination mode\n    const paginationMode = this.determinePaginationMode(container);\n    \n    this.state.updateState(programId, { \n      filters: initialFilters,\n      paginationMode: paginationMode\n    });\n    \n    // Setup pagination\n    this.setupPagination(container, programId, paginationMode);\n    \n    // Create debounced reload function\n    const debouncedReload = utils.debounce(() => {\n      this.loadExperts(container, programId);\n    }, this.config.debounceDelay);\n    \n    this.debouncedReload.set(programId, debouncedReload);\n    \n    this.log(`Container setup complete for program: ${programId}`, { initialFilters, paginationMode });\n  }\n\n  /**\n   * Determine pagination mode from container attributes or config\n   */\n  private determinePaginationMode(container: Element): 'traditional' | 'infinite' | 'hybrid' {\n    const explicitMode = this.getAttr(container, 'pagination-mode') as 'traditional' | 'infinite' | 'hybrid';\n    return explicitMode || this.config.paginationMode;\n  }\n\n  /**\n   * Setup pagination system based on mode\n   */\n  private setupPagination(container: Element, programId: string, mode: 'traditional' | 'infinite' | 'hybrid'): void {\n    this.log(`Setting up ${mode} pagination for program: ${programId}`);\n    \n    if (mode === 'infinite' || mode === 'hybrid') {\n      this.setupInfiniteScroll(container, programId);\n    }\n    \n    if (mode === 'traditional' || mode === 'hybrid') {\n      this.setupTraditionalPagination(container, programId);\n    }\n    \n    // Setup load more button for hybrid/infinite modes\n    if (mode === 'infinite' || mode === 'hybrid') {\n      this.setupLoadMoreButton(container, programId);\n    }\n  }\n\n  /**\n   * Setup infinite scroll functionality\n   */\n  private setupInfiniteScroll(container: Element, programId: string): void {\n    let isScrolling = false;\n    \n    const handleScroll = utils.throttle(() => {\n      if (isScrolling) return;\n      \n      const state = this.state.getState(programId);\n      if (state.isInfiniteLoading || !state.hasNextPage) return;\n      \n      const scrollPosition = window.scrollY + window.innerHeight;\n      const documentHeight = document.documentElement.scrollHeight;\n      const threshold = this.config.infiniteScrollThreshold;\n      \n      if (scrollPosition >= documentHeight - threshold) {\n        isScrolling = true;\n        this.loadNextPageInfinite(container, programId).finally(() => {\n          isScrolling = false;\n        });\n      }\n    }, 100);\n    \n    window.addEventListener('scroll', handleScroll);\n    \n    // Store cleanup function\n    (container as any).__infiniteScrollCleanup = () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }\n\n  /**\n   * Setup traditional pagination button states\n   */\n  private setupTraditionalPagination(container: Element, programId: string): void {\n    // Will be handled in updatePaginationControls\n    this.updatePaginationControls(container, programId);\n  }\n\n  /**\n   * Setup load more button for infinite scroll\n   */\n  private setupLoadMoreButton(container: Element, programId: string): void {\n    const loadMoreButtons = this.querySelectorAll(container, '[data-contra-action=\"load-more\"]');\n    \n    loadMoreButtons.forEach(button => {\n      if (!button.textContent?.trim()) {\n        button.textContent = this.config.loadMoreText;\n      }\n    });\n  }\n\n  /**\n   * Wire up filter controls to auto-update\n   */\n  private wireFilterControls(container: Element, programId: string): void {\n    const filterControls = this.querySelectorAll(container, `[${ATTR_PREFIX}${ATTRS.filter}]`);\n    \n    this.log(`Found ${filterControls.length} filter controls for program: ${programId}`);\n\n    filterControls.forEach(control => {\n      const filterKey = this.getAttr(control, ATTRS.filter);\n      const filterType = this.getAttr(control, ATTRS.filterType) || 'replace';\n      \n      if (!filterKey) return;\n\n      // Add event listeners based on control type\n      if (control instanceof HTMLInputElement) {\n        const eventType = control.type === 'range' || control.type === 'number' ? 'input' : 'change';\n        \n        control.addEventListener(eventType, () => {\n          this.updateFilter(programId, filterKey, this.getControlValue(control), filterType);\n          if (this.config.autoReload) {\n            this.debouncedReload.get(programId)?.();\n          }\n        });\n        \n      } else if (control instanceof HTMLSelectElement) {\n        control.addEventListener('change', () => {\n          this.updateFilter(programId, filterKey, this.getControlValue(control), filterType);\n          if (this.config.autoReload) {\n            this.debouncedReload.get(programId)?.();\n          }\n        });\n      }\n      \n      this.log(`Wired filter control: ${filterKey} (${filterType})`, control);\n    });\n  }\n\n  /**\n   * Wire up action buttons (pagination, sorting, etc.)\n   */\n  private wireActionButtons(container: Element, programId: string): void {\n    const actionButtons = this.querySelectorAll(container, `[${ATTR_PREFIX}${ATTRS.action}]`);\n    \n    actionButtons.forEach(button => {\n      const action = this.getAttr(button, ATTRS.action);\n      const target = this.getAttr(button, ATTRS.target);\n      \n      if (!action) return;\n\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.handleAction(programId, action, target, button);\n      });\n    });\n  }\n\n  /**\n   * Load experts for a program with proper pagination handling\n   */\n  private async loadExperts(container: Element, programId: string, isPageNavigation = false): Promise<void> {\n    const state = this.state.getState(programId);\n    \n    // Get base program ID for API calls\n    const baseProgramId = (container as HTMLElement).getAttribute('data-base-program-id') || this.config.program;\n    \n    this.log(`Loading experts for program: ${programId} (API: ${baseProgramId})`, state.filters);\n\n    try {\n      // Show loading state\n      this.showLoading(container, true);\n      this.state.updateState(programId, { loading: true, error: null });\n\n      // For traditional pagination, check cache first\n      if (isPageNavigation && state.paginationMode === 'traditional') {\n        const currentPage = this.calculateCurrentPage(state.filters);\n        const cachedExperts = this.state.getCachedPage(programId, currentPage);\n        if (cachedExperts) {\n          this.log(`Using cached page ${currentPage}`);\n          this.renderExperts(container, cachedExperts);\n          this.updatePaginationState(programId, cachedExperts, state.totalCount, state.filters);\n          this.showLoading(container, false);\n          return;\n        }\n      }\n\n      // Fetch experts from API using base program ID\n      const response = await this.client.listExperts(baseProgramId, state.filters);\n      \n      this.log(`Loaded ${response.data.length} experts`, response);\n\n      // Update pagination state based on mode\n      if (state.paginationMode === 'traditional') {\n        this.handleTraditionalPaginationResponse(programId, container, response);\n      } else {\n        this.handleInfinitePaginationResponse(programId, container, response);\n      }\n\n    } catch (error) {\n      this.log(`Failed to load experts for program: ${programId}`, error);\n      \n      this.state.updateState(programId, { \n        loading: false, \n        error: error as Error \n      });\n      \n      this.showError(container, error as Error);\n      \n      // Dispatch error event\n      this.dispatchEvent(container, 'expertsError', {\n        error: error as Error,\n        context: `Loading experts for program ${programId}`\n      } as ErrorEvent);\n    } finally {\n      this.showLoading(container, false);\n    }\n  }\n\n  /**\n   * Handle traditional pagination response (page-based navigation)\n   */\n  private handleTraditionalPaginationResponse(\n    programId: string, \n    container: Element, \n    response: { data: ExpertProfile[], totalCount: number }\n  ): void {\n    const state = this.state.getState(programId);\n    \n    // Calculate pagination metadata\n    const limit = state.filters.limit || 20;\n    const offset = state.filters.offset || 0;\n    const currentPage = Math.floor(offset / limit) + 1;\n    const totalPages = Math.ceil(response.totalCount / limit);\n    const hasNextPage = currentPage < totalPages;\n    const hasPreviousPage = currentPage > 1;\n\n    // Update state\n    this.state.updateState(programId, {\n      experts: response.data,\n      totalCount: response.totalCount,\n      currentPage: currentPage,\n      hasNextPage: hasNextPage,\n      hasPreviousPage: hasPreviousPage,\n      loading: false\n    });\n\n    // Cache the page\n    this.state.cachePage(programId, currentPage, response.data);\n\n    // Render experts (replace mode for traditional pagination)\n    this.renderExperts(container, response.data);\n    \n    // Update UI\n    this.updateUIStates(container, programId);\n    this.updatePaginationControls(container, programId);\n    \n    // Dispatch event\n    this.dispatchEvent(container, 'expertsLoaded', {\n      experts: response.data,\n      totalCount: response.totalCount,\n      filters: state.filters,\n      page: currentPage,\n      totalPages: totalPages,\n      hasNextPage: hasNextPage,\n      hasPreviousPage: hasPreviousPage,\n      paginationMode: 'traditional'\n    } as ExpertLoadEvent);\n\n    this.log(`Traditional pagination: Page ${currentPage}/${totalPages}, ${response.data.length} experts loaded`);\n  }\n\n  /**\n   * Handle infinite pagination response (cumulative loading)\n   */\n  private handleInfinitePaginationResponse(\n    programId: string, \n    container: Element, \n    response: { data: ExpertProfile[], totalCount: number }\n  ): void {\n    const state = this.state.getState(programId);\n    const isLoadMore = state.experts.length > 0;\n    \n    // For infinite loading, append to existing experts\n    const allExperts = isLoadMore ? [...state.experts, ...response.data] : response.data;\n    const hasNextPage = allExperts.length < response.totalCount;\n    \n    // Update state\n    this.state.updateState(programId, {\n      experts: allExperts,\n      totalCount: response.totalCount,\n      hasNextPage: hasNextPage,\n      hasPreviousPage: false, // Not applicable for infinite scroll\n      loading: false,\n      isInfiniteLoading: false\n    });\n\n    // Render experts (append mode for infinite loading)\n    if (isLoadMore) {\n      this.renderNewExperts(container, response.data);\n    } else {\n      this.renderExperts(container, response.data);\n    }\n    \n    // Update UI\n    this.updateUIStates(container, programId);\n    this.updatePaginationControls(container, programId);\n    \n    // Dispatch event\n    this.dispatchEvent(container, 'expertsLoaded', {\n      experts: response.data,\n      totalExperts: allExperts,\n      totalCount: response.totalCount,\n      filters: state.filters,\n      hasNextPage: hasNextPage,\n      isLoadMore: isLoadMore,\n      paginationMode: 'infinite'\n    } as ExpertLoadEvent);\n\n    this.log(`Infinite pagination: ${allExperts.length}/${response.totalCount} experts loaded`);\n  }\n\n  /**\n   * Calculate current page from filters\n   */\n  private calculateCurrentPage(filters: ExpertFilters): number {\n    const limit = filters.limit || 20;\n    const offset = filters.offset || 0;\n    return Math.floor(offset / limit) + 1;\n  }\n\n  /**\n   * Update pagination state consistently\n   */\n  private updatePaginationState(\n    programId: string, \n    experts: ExpertProfile[], \n    totalCount: number, \n    filters: ExpertFilters\n  ): void {\n    const limit = filters.limit || 20;\n    const offset = filters.offset || 0;\n    const currentPage = Math.floor(offset / limit) + 1;\n    const totalPages = Math.ceil(totalCount / limit);\n    \n    this.state.updateState(programId, {\n      experts: experts,\n      totalCount: totalCount,\n      currentPage: currentPage,\n      hasNextPage: currentPage < totalPages,\n      hasPreviousPage: currentPage > 1,\n      loading: false\n    });\n  }\n\n  /**\n   * Render experts into the container\n   */\n  private renderExperts(container: Element, experts: ExpertProfile[]): void {\n    const template = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    if (!template) {\n      this.log('No template found in container', container);\n      return;\n    }\n\n    // Clear existing expert cards (keep template)\n    const existingCards = this.querySelectorAll(container, ':scope > *:not([data-contra-template]):not([data-contra-loading]):not([data-contra-error]):not([data-contra-empty])');\n    existingCards.forEach(card => card.remove());\n\n    // Render expert cards\n    experts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert);\n      container.appendChild(expertCard);\n    });\n\n    this.log(`Rendered ${experts.length} expert cards`);\n  }\n\n  /**\n   * Populate expert card from template\n   */\n  private populateExpertCard(template: Element, expert: ExpertProfile): Element {\n    const card = template.cloneNode(true) as Element;\n    \n    // Remove template attribute and show the card\n    card.removeAttribute(`${ATTR_PREFIX}${ATTRS.template}`);\n    (card as HTMLElement).style.display = '';\n\n    // Populate field bindings\n    this.populateFields(card, expert);\n    \n    // Handle repeating elements (projects, social links)\n    this.populateRepeatingElements(card, expert);\n    \n    // Handle conditional display\n    this.handleConditionalDisplay(card, expert);\n\n    return card;\n  }\n\n  /**\n   * Populate data fields in the card\n   */\n  private populateFields(card: Element, expert: ExpertProfile): void {\n    const fieldElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.field}]`);\n    \n    fieldElements.forEach(element => {\n      const fieldName = this.getAttr(element, ATTRS.field) as ExpertField;\n      const format = this.getAttr(element, ATTRS.format);\n      \n      if (!fieldName || !(fieldName in expert)) return;\n\n      const value = expert[fieldName];\n      this.setElementValue(element, value, format);\n    });\n\n    // Handle star ratings\n    const starsElements = this.querySelectorAll(card, '[data-contra-stars]');\n    starsElements.forEach(element => {\n      if (expert.averageReviewScore) {\n        this.renderStarRating(element, expert.averageReviewScore);\n      }\n    });\n  }\n\n  /**\n   * Set element value with proper formatting\n   */\n  private setElementValue(element: Element, value: any, format?: string | null): void {\n    if (value == null || value === '') return;\n\n    // Media type detection and handling\n    if (this.isMediaField(element) && typeof value === 'string' && value.trim()) {\n      this.setMediaValue(element, value);\n      return;\n    }\n\n    if (element instanceof HTMLAnchorElement) {\n      element.href = String(value);\n      if (!element.textContent?.trim()) {\n        element.textContent = String(value);\n      }\n    } else if (element instanceof HTMLInputElement) {\n      element.value = String(value);\n    } else if (element instanceof HTMLImageElement) {\n      // Regular image handling for avatars and other images\n      element.src = String(value);\n      element.alt = element.alt || 'Image';\n    } else {\n      // Text content with formatting\n      let displayValue = String(value);\n      \n      if (format) {\n        switch (format) {\n          case 'currency':\n            displayValue = typeof value === 'number' ? `$${value}` : displayValue;\n            break;\n          case 'rate':\n            displayValue = utils.formatRate(typeof value === 'number' ? value : null);\n            break;\n          case 'rating':\n            // Format rating to one decimal place (5.0, 4.9, etc.)\n            displayValue = typeof value === 'number' ? value.toFixed(1) : displayValue;\n            break;\n          case 'earnings':\n            // Format earnings like $25k+\n            if (typeof value === 'number') {\n              if (value >= 1000000) {\n                displayValue = `$${Math.floor(value / 1000000)}M+`;\n              } else if (value >= 1000) {\n                displayValue = `$${Math.floor(value / 1000)}k+`;\n              } else {\n                displayValue = `$${value}`;\n              }\n            }\n            break;\n          case 'number':\n            displayValue = typeof value === 'number' ? value.toLocaleString() : displayValue;\n            break;\n          case 'truncate':\n            displayValue = displayValue.length > 100 ? displayValue.substring(0, 97) + '...' : displayValue;\n            break;\n          case 'boolean':\n            displayValue = value ? 'Yes' : 'No';\n            break;\n          case 'availability':\n            displayValue = value ? 'Available' : 'Not Available';\n            break;\n        }\n      }\n      \n      element.textContent = displayValue;\n    }\n  }\n\n  /**\n   * Star rating rendering with optional text display\n   */\n  private renderStarRating(element: Element, rating: number): void {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    let starsHtml = '';\n    \n    // Full stars\n    for (let i = 0; i < fullStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-full\">★</span>';\n    }\n    \n    // Half star\n    if (hasHalfStar) {\n      starsHtml += '<span class=\"contra-star contra-star-half\">★</span>';\n    }\n    \n    // Empty stars\n    for (let i = 0; i < emptyStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-empty\">☆</span>';\n    }\n    \n    element.innerHTML = starsHtml;\n    \n    // Also update any rating text elements in the same card\n    const card = element.closest('[data-contra-template]') || element.closest('.expert-card');\n    if (card) {\n      const ratingTextElements = this.querySelectorAll(card, '[data-contra-rating-text]');\n      ratingTextElements.forEach(textElement => {\n        textElement.textContent = rating.toFixed(1);\n      });\n    }\n  }\n\n  /**\n   * Media type detection and element handling\n   */\n  private isMediaField(element: Element): boolean {\n    const field = this.getAttr(element, ATTRS.field);\n    // Only apply advanced media handling to project cover URLs, not avatars\n    return field === 'coverUrl';\n  }\n\n  /**\n   * Media value setting with automatic type detection\n   */\n  private setMediaValue(element: Element, url: string): void {\n    const mediaType = this.detectMediaType(url);\n    const parent = element.parentElement;\n    \n    if (!parent) {\n      this.log('Media element has no parent for replacement', element);\n      return;\n    }\n\n    // Remove existing media element\n    element.remove();\n\n    // Create appropriate media element\n    let mediaElement: HTMLElement;\n    \n    switch (mediaType) {\n      case 'video':\n        mediaElement = this.createVideoElement(url, element);\n        break;\n      case 'image':\n      default:\n        mediaElement = this.createImageElement(url, element);\n        break;\n    }\n\n    // Preserve classes and attributes from original element\n    this.transferAttributes(element, mediaElement);\n    \n    // Insert new media element\n    parent.appendChild(mediaElement);\n    \n    this.log(`Created ${mediaType} element for URL: ${url}`);\n  }\n\n  /**\n   * Detect media type from URL\n   */\n  private detectMediaType(url: string): 'image' | 'video' {\n    if (!url || typeof url !== 'string') {\n      this.log('Invalid URL provided to detectMediaType:', url);\n      return 'image';\n    }\n    \n    const urlLower = url.toLowerCase();\n    \n    // Video formats\n    const videoExtensions = ['.mp4', '.webm', '.mov', '.avi', '.mkv', '.ogg'];\n    const isVideo = videoExtensions.some(ext => urlLower.includes(ext));\n    \n    // Special handling for Cloudinary video URLs\n    const isCloudinaryVideo = urlLower.includes('cloudinary.com/') && urlLower.includes('/video/');\n    \n    return (isVideo || isCloudinaryVideo) ? 'video' : 'image';\n  }\n\n  /**\n   * Create video element with fallback\n   */\n  private createVideoElement(url: string, originalElement: Element): HTMLVideoElement {\n    const video = document.createElement('video');\n    \n    // Video attributes\n    video.src = url;\n    video.muted = this.config.videoMuted;\n    video.loop = this.config.videoLoop;\n    video.playsInline = true;\n    video.preload = 'metadata';\n    video.controls = this.config.videoControls;\n    \n    // Maintain aspect ratio and object-fit from original\n    video.style.width = '100%';\n    video.style.height = '100%';\n    video.style.objectFit = 'cover';\n    video.style.borderRadius = 'inherit';\n    \n    // Autoplay configuration\n    if (this.config.videoAutoplay) {\n      video.autoplay = true;\n      video.setAttribute('autoplay', '');\n    }\n    \n    // Error handling with fallback to poster or placeholder\n    video.onerror = () => {\n      this.log(`Video failed to load: ${url}`);\n      // Try to extract a thumbnail from Cloudinary video URL\n      const posterUrl = this.extractVideoThumbnail(url);\n      if (posterUrl) {\n        const fallbackImg = this.createImageElement(posterUrl, originalElement);\n        video.parentElement?.replaceChild(fallbackImg, video);\n      } else {\n        // Show placeholder\n        video.style.background = '#f3f4f6';\n        video.style.position = 'relative';\n        video.innerHTML = '<div style=\"position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);color:#9ca3af;font-size:12px;\">Video unavailable</div>';\n      }\n    };\n\n    // Hover-to-play functionality (if enabled and not autoplay)\n    if (this.config.videoHoverPlay && !this.config.videoAutoplay) {\n      video.addEventListener('mouseenter', () => {\n        video.currentTime = 0;\n        video.play().catch(() => {\n          // Ignore play errors (browser policies)\n        });\n      });\n\n      video.addEventListener('mouseleave', () => {\n        video.pause();\n        video.currentTime = 0;\n      });\n    }\n\n    return video;\n  }\n\n  /**\n   * Create image element with error handling\n   */\n  private createImageElement(url: string, originalElement: Element): HTMLImageElement {\n    const img = document.createElement('img');\n    \n    img.src = url;\n    img.alt = originalElement.getAttribute('alt') || 'Media content';\n    img.loading = 'lazy';\n    \n    // Maintain styling\n    img.style.width = '100%';\n    img.style.height = '100%';\n    img.style.objectFit = 'cover';\n    img.style.borderRadius = 'inherit';\n    \n    // Error handling\n    img.onerror = () => {\n      this.log(`Image failed to load: ${url}`);\n      img.style.background = '#f3f4f6';\n      img.style.opacity = '0.5';\n      img.alt = 'Image unavailable';\n      \n      // Add broken image icon\n      img.style.position = 'relative';\n      const placeholder = document.createElement('div');\n      placeholder.style.cssText = `\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        color: #9ca3af;\n        font-size: 12px;\n        text-align: center;\n      `;\n      placeholder.textContent = '🖼️ Image unavailable';\n      img.parentElement?.appendChild(placeholder);\n    };\n\n    return img;\n  }\n\n  /**\n   * Extract video thumbnail from Cloudinary URL\n   */\n  private extractVideoThumbnail(videoUrl: string): string | null {\n    if (videoUrl.includes('cloudinary.com/') && videoUrl.includes('/video/')) {\n      // Convert video URL to image thumbnail\n      return videoUrl\n        .replace('/video/', '/image/')\n        .replace(/\\.(mp4|webm|mov|avi|mkv)$/i, '.jpg')\n        .replace('fl_progressive', 'f_auto,q_auto,c_fill');\n    }\n    return null;\n  }\n\n  /**\n   * Transfer attributes and classes from old element to new\n   */\n  private transferAttributes(from: Element, to: HTMLElement): void {\n    // Transfer classes\n    if (from.className) {\n      to.className = from.className;\n    }\n    \n    // Transfer data attributes (except contra-field)\n    Array.from(from.attributes).forEach(attr => {\n      if (attr.name.startsWith('data-') && attr.name !== `${ATTR_PREFIX}${ATTRS.field}`) {\n        to.setAttribute(attr.name, attr.value);\n      }\n    });\n    \n    // Transfer style\n    if (from.getAttribute('style')) {\n      const existingStyle = to.getAttribute('style') || '';\n      to.setAttribute('style', existingStyle + '; ' + from.getAttribute('style'));\n    }\n  }\n\n  /**\n   * Handle repeating elements (projects, social links)\n   */\n  private populateRepeatingElements(card: Element, expert: ExpertProfile): void {\n    const repeatElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.repeat}]`);\n    \n    repeatElements.forEach(container => {\n      const repeatType = this.getAttr(container, ATTRS.repeat);\n      const maxItems = parseInt(this.getAttr(container, ATTRS.max) || '10');\n      \n      if (repeatType === 'projects' && expert.projects) {\n        this.populateRepeatingContainer(container, expert.projects.slice(0, maxItems));\n      } else if (repeatType === 'socialLinks' && expert.socialLinks) {\n        this.populateRepeatingContainer(container, expert.socialLinks.slice(0, maxItems));\n      } else if (repeatType === 'skillTags' && expert.skillTags) {\n        this.populateRepeatingContainer(container, expert.skillTags.slice(0, maxItems).map((tag: string) => ({ name: tag })));\n      }\n    });\n  }\n\n  /**\n   * Populate a repeating container with items\n   */\n  private populateRepeatingContainer(container: Element, items: any[]): void {\n    const template = container.firstElementChild;\n    if (!template) return;\n\n    // Clear existing items\n    container.innerHTML = '';\n    \n    // Create items from template\n    items.forEach(item => {\n      const itemElement = template.cloneNode(true) as Element;\n      this.populateFields(itemElement, item);\n      container.appendChild(itemElement);\n    });\n    \n    // Hide container if no items\n    if (items.length === 0) {\n      (container as HTMLElement).style.display = 'none';\n    }\n  }\n\n  /**\n   * Handle conditional display based on data\n   */\n  private handleConditionalDisplay(card: Element, expert: ExpertProfile): void {\n    const conditionalElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.showWhen}], [${ATTR_PREFIX}${ATTRS.hideWhen}]`);\n    \n    conditionalElements.forEach(element => {\n      const showWhen = this.getAttr(element, ATTRS.showWhen);\n      const hideWhen = this.getAttr(element, ATTRS.hideWhen);\n      \n      let shouldShow = true;\n      \n      if (showWhen) {\n        shouldShow = this.evaluateCondition(expert, showWhen);\n      }\n      \n      if (hideWhen) {\n        shouldShow = shouldShow && !this.evaluateCondition(expert, hideWhen);\n      }\n      \n      (element as HTMLElement).style.display = shouldShow ? '' : 'none';\n    });\n  }\n\n  /**\n   * Evaluate a condition against expert data\n   */\n  private evaluateCondition(expert: ExpertProfile, condition: string): boolean {\n    if (!condition || typeof condition !== 'string') {\n      this.log('Invalid condition provided:', condition);\n      return false;\n    }\n    \n    // Parse condition: \"field:value\" or \"field:>value\" etc.\n    const parts = condition.split(':');\n    if (parts.length < 2) {\n      this.log('Invalid condition format:', condition);\n      return false;\n    }\n    \n    const field = parts[0];\n    const restOfCondition = parts.slice(1).join(':'); // Handle colons in values\n    const expertValue = (expert as any)[field];\n    \n    this.log(`Evaluating condition: ${field} (${expertValue}, type: ${typeof expertValue}) against ${restOfCondition}`);\n    \n    if (expertValue == null) {\n      this.log(`Field '${field}' is null/undefined, condition fails`);\n      return false;\n    }\n    \n    // Check for comparison operators\n    if (restOfCondition.startsWith('>=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) >= Number(value);\n      this.log(`Comparison: ${expertValue} >= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) <= Number(value);\n      this.log(`Comparison: ${expertValue} <= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('>')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) > Number(value);\n      this.log(`Comparison: ${expertValue} > ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) < Number(value);\n      this.log(`Comparison: ${expertValue} < ${value} = ${result}`);\n      return result;\n    } else {\n      // Direct value comparison with type-aware handling\n      let result = false;\n      \n      // Handle boolean fields specially\n      if (typeof expertValue === 'boolean') {\n        // Convert string condition to boolean for comparison\n        if (restOfCondition.toLowerCase() === 'true') {\n          result = expertValue === true;\n        } else if (restOfCondition.toLowerCase() === 'false') {\n          result = expertValue === false;\n        } else {\n          result = false;\n        }\n        this.log(`Boolean comparison: ${expertValue} === ${restOfCondition.toLowerCase() === 'true'} = ${result}`);\n      } else if (typeof expertValue === 'number') {\n        // Handle numeric comparisons\n        const numValue = Number(restOfCondition);\n        result = !isNaN(numValue) && expertValue === numValue;\n        this.log(`Number comparison: ${expertValue} === ${numValue} = ${result}`);\n      } else {\n        // String comparison (case-insensitive)\n        const expertStr = String(expertValue);\n        const valueStr = String(restOfCondition);\n        result = expertStr.toLowerCase() === valueStr.toLowerCase();\n        this.log(`String comparison: '${expertStr}' === '${valueStr}' = ${result}`);\n      }\n      \n      return result;\n    }\n  }\n\n  /**\n   * Update UI states based on current data\n   */\n  private updateUIStates(container: Element, programId: string): void {\n    const state = this.state.getState(programId);\n    \n    // Show/hide empty state\n    const emptyElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (emptyElement) {\n      (emptyElement as HTMLElement).style.display = state.experts.length === 0 ? '' : 'none';\n    }\n    \n    // Update pagination info\n    const paginationElements = this.querySelectorAll(container, '[data-contra-pagination-info]');\n    paginationElements.forEach(element => {\n      const { currentPage, totalCount } = state;\n      const pageSize = state.filters.limit || 20;\n      const totalPages = Math.ceil(totalCount / pageSize);\n      \n      element.textContent = `Page ${currentPage} of ${totalPages} (${totalCount} total)`;\n    });\n    \n    // Update filter summaries\n    const filterSummaries = this.querySelectorAll(container, '[data-contra-filter-summary]');\n    filterSummaries.forEach(element => {\n      const activeFilters = Object.entries(state.filters)\n        .filter(([_key, value]) => value != null && value !== '')\n        .map(([key, value]) => `${key}: ${value}`)\n        .join(', ');\n      \n      element.textContent = activeFilters || 'No filters applied';\n    });\n  }\n\n  /**\n   * Handle action buttons with proper pagination logic\n   */\n  private handleAction(programId: string, action: string, _target?: string | null, button?: Element): void {\n    const state = this.state.getState(programId);\n    const container = document.querySelector(`[data-program-id=\"${programId}\"]`);\n    \n    if (!container) {\n      this.log(`Container not found for program: ${programId}`);\n      return;\n    }\n\n    // Show button feedback\n    if (button && button instanceof HTMLButtonElement) {\n      button.disabled = true;\n    }\n    \n    const limit = state.filters.limit || 20;\n    const currentOffset = state.filters.offset || 0;\n    \n    switch (action) {\n      case 'next-page':\n        if (state.paginationMode === 'traditional') {\n          const nextOffset = currentOffset + limit;\n          if (nextOffset < state.totalCount) {\n            this.updateFilter(programId, 'offset', nextOffset);\n            this.loadExperts(container as Element, programId, true);\n          }\n        } else {\n          // For infinite mode, use load more functionality\n          this.loadMoreExperts(container as Element, programId);\n        }\n        break;\n        \n      case 'prev-page':\n        if (state.paginationMode === 'traditional') {\n          const prevOffset = Math.max(0, currentOffset - limit);\n          this.updateFilter(programId, 'offset', prevOffset);\n          this.loadExperts(container as Element, programId, true);\n        }\n        break;\n        \n      case 'first-page':\n        if (state.paginationMode === 'traditional') {\n          this.updateFilter(programId, 'offset', 0);\n          this.loadExperts(container as Element, programId, true);\n        }\n        break;\n        \n      case 'last-page':\n        if (state.paginationMode === 'traditional') {\n          const totalPages = Math.ceil(state.totalCount / limit);\n          const lastPageOffset = (totalPages - 1) * limit;\n          this.updateFilter(programId, 'offset', lastPageOffset);\n          this.loadExperts(container as Element, programId, true);\n        }\n        break;\n        \n      case 'load-more':\n        // Handle load more for infinite/hybrid modes\n        this.loadMoreExperts(container as Element, programId).finally(() => {\n          if (button && button instanceof HTMLButtonElement) {\n            button.disabled = false;\n          }\n        });\n        return; // Exit early to avoid re-enabling button\n        \n      case 'clear-filters':\n        // Reset pagination when clearing filters\n        this.state.updateState(programId, { \n          filters: { limit: state.filters.limit, offset: 0 }, // Keep limit, reset offset\n          currentPage: 1,\n          cachedPages: new Map() // Clear cache\n        });\n        if (this.config.autoReload) {\n          this.debouncedReload.get(programId)?.();\n        }\n        break;\n        \n      case 'reload':\n        // Clear cache and reload\n        this.state.updateState(programId, { cachedPages: new Map() });\n        this.client.clearCache(`experts:${programId}`);\n        if (this.config.autoReload) {\n          this.debouncedReload.get(programId)?.();\n        }\n        break;\n    }\n    \n    // Re-enable button after action completes\n    if (button && button instanceof HTMLButtonElement && action !== 'load-more') {\n      setTimeout(() => {\n        button.disabled = false;\n      }, 100);\n    }\n  }\n\n  /**\n   * Load more experts for infinite scroll mode\n   */\n  private async loadMoreExperts(container: Element, programId: string): Promise<void> {\n    const state = this.state.getState(programId);\n    \n    // Only allow load more for infinite/hybrid modes\n    if (state.paginationMode === 'traditional') {\n      this.log('Load more not supported in traditional pagination mode');\n      return;\n    }\n    \n    // Get base program ID for API calls\n    const baseProgramId = (container as HTMLElement).getAttribute('data-base-program-id') || this.config.program;\n    \n    const limit = state.filters.limit || 20;\n    \n    // Calculate next offset based on currently loaded experts\n    const currentOffset = state.experts.length;\n    \n    this.log(`Loading more experts: currentOffset=${currentOffset}, limit=${limit}`);\n\n    try {\n      this.state.updateState(programId, { isInfiniteLoading: true });\n      this.updateLoadMoreButtonState(container, programId, true);\n\n      // Fetch next batch using current expert count as offset\n      const response = await this.client.listExperts(baseProgramId, {\n        ...state.filters,\n        offset: currentOffset,\n        limit: limit\n      });\n\n      this.log(`Loaded ${response.data.length} more experts from offset ${currentOffset}`);\n\n      // Handle the response using the infinite pagination handler\n      this.handleInfinitePaginationResponse(programId, container, response);\n\n    } catch (error) {\n      this.log(`Failed to load more experts`, error);\n      this.state.updateState(programId, { isInfiniteLoading: false });\n      \n      // Show error in load more button\n      this.updateLoadMoreButtonState(container, programId, false, 'Error loading more');\n      \n      setTimeout(() => {\n        this.updateLoadMoreButtonState(container, programId, false);\n      }, 3000);\n    } finally {\n      this.updateLoadMoreButtonState(container, programId, false);\n    }\n  }\n\n  /**\n   * Update load more button state\n   */\n  private updateLoadMoreButtonState(container: Element, programId: string, loading: boolean, errorText?: string): void {\n    const loadMoreButtons = this.querySelectorAll(container, '[data-contra-action=\"load-more\"]');\n    const state = this.state.getState(programId);\n    \n    loadMoreButtons.forEach(button => {\n      const btnElement = button as HTMLButtonElement;\n      \n      if (errorText) {\n        btnElement.textContent = errorText;\n        btnElement.disabled = true;\n        btnElement.classList.add('error');\n        return;\n      }\n      \n      btnElement.classList.remove('error');\n      \n      if (loading) {\n        btnElement.textContent = 'Loading...';\n        btnElement.disabled = true;\n        btnElement.classList.add('loading');\n      } else {\n        btnElement.classList.remove('loading');\n        const hasMore = state.experts.length < state.totalCount;\n        \n        if (hasMore) {\n          btnElement.textContent = this.config.loadMoreText;\n          btnElement.disabled = false;\n        } else {\n          btnElement.textContent = 'All experts loaded';\n          btnElement.disabled = true;\n          btnElement.classList.add('disabled');\n        }\n      }\n    });\n  }\n\n  /**\n   * Load next page for infinite scroll\n   */\n  private async loadNextPageInfinite(container: Element, programId: string): Promise<void> {\n    // Use the unified loadMoreExperts method\n    return this.loadMoreExperts(container, programId);\n  }\n\n  /**\n   * Update pagination control states based on current mode and state\n   */\n  private updatePaginationControls(container: Element, programId: string): void {\n    const state = this.state.getState(programId);\n    const limit = state.filters.limit || 20;\n    const totalPages = Math.ceil(state.totalCount / limit);\n    \n    if (state.paginationMode === 'traditional') {\n      this.updateTraditionalPaginationControls(container, state, totalPages);\n    } else {\n      this.updateInfinitePaginationControls(container, state);\n    }\n\n    this.log(`Pagination controls updated: mode=${state.paginationMode}, page=${state.currentPage}/${totalPages}, hasNext=${state.hasNextPage}`);\n  }\n\n  /**\n   * Update traditional pagination controls (Previous/Next buttons, page numbers)\n   */\n  private updateTraditionalPaginationControls(container: Element, state: any, totalPages: number): void {\n    // Update navigation buttons\n    const prevButtons = this.querySelectorAll(container, '[data-contra-action=\"prev-page\"]');\n    const nextButtons = this.querySelectorAll(container, '[data-contra-action=\"next-page\"]');\n    const firstButtons = this.querySelectorAll(container, '[data-contra-action=\"first-page\"]');\n    const lastButtons = this.querySelectorAll(container, '[data-contra-action=\"last-page\"]');\n\n    // Previous page buttons\n    prevButtons.forEach(button => {\n      const btnElement = button as HTMLButtonElement;\n      btnElement.disabled = !state.hasPreviousPage;\n      btnElement.classList.toggle('disabled', !state.hasPreviousPage);\n    });\n\n    // Next page buttons\n    nextButtons.forEach(button => {\n      const btnElement = button as HTMLButtonElement;\n      btnElement.disabled = !state.hasNextPage;\n      btnElement.classList.toggle('disabled', !state.hasNextPage);\n    });\n\n    // First page buttons\n    firstButtons.forEach(button => {\n      const btnElement = button as HTMLButtonElement;\n      btnElement.disabled = state.currentPage <= 1;\n      btnElement.classList.toggle('disabled', state.currentPage <= 1);\n    });\n\n    // Last page buttons\n    lastButtons.forEach(button => {\n      const btnElement = button as HTMLButtonElement;\n      btnElement.disabled = state.currentPage >= totalPages;\n      btnElement.classList.toggle('disabled', state.currentPage >= totalPages);\n    });\n\n    // Update pagination info elements\n    const paginationInfoElements = this.querySelectorAll(container, '[data-contra-pagination-info]');\n    paginationInfoElements.forEach(element => {\n      element.textContent = `Page ${state.currentPage} of ${totalPages} (${state.totalCount} total)`;\n    });\n\n    // Show/hide pagination section based on whether there are multiple pages\n    const paginationSection = container.querySelector('.pagination-section');\n    if (paginationSection) {\n      (paginationSection as HTMLElement).style.display = totalPages > 1 ? 'block' : 'none';\n    }\n  }\n\n  /**\n   * Update infinite pagination controls (Load More button)\n   */\n  private updateInfinitePaginationControls(container: Element, state: any): void {\n    // Update load more buttons\n    this.updateLoadMoreButtonState(container, state.programId || 'default', state.isInfiniteLoading);\n\n    // Update pagination info elements for infinite mode\n    const paginationInfoElements = this.querySelectorAll(container, '[data-contra-pagination-info]');\n    paginationInfoElements.forEach(element => {\n      const loadedCount = state.experts.length;\n      const totalCount = state.totalCount;\n      element.textContent = `Showing ${loadedCount} of ${totalCount} experts`;\n    });\n\n    // Hide traditional pagination controls in infinite mode\n    const paginationControls = container.querySelector('.pagination-controls');\n    if (paginationControls) {\n      (paginationControls as HTMLElement).style.display = 'none';\n    }\n  }\n\n  /**\n   * Update infinite loading state\n   */\n  private updateInfiniteLoadingState(container: Element, loading: boolean): void {\n    const loadingIndicators = this.querySelectorAll(container, '[data-contra-infinite-loading]');\n    \n    loadingIndicators.forEach(indicator => {\n      (indicator as HTMLElement).style.display = loading ? '' : 'none';\n    });\n  }\n\n  /**\n   * Render new experts for infinite scroll (append mode)\n   */\n  private renderNewExperts(container: Element, newExperts: ExpertProfile[]): void {\n    const template = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    if (!template) {\n      this.log('No template found for rendering new experts', container);\n      return;\n    }\n\n    // Create a document fragment for efficient DOM manipulation\n    const fragment = document.createDocumentFragment();\n\n    newExperts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert);\n      fragment.appendChild(expertCard);\n    });\n\n    // Append all new cards at once\n    container.appendChild(fragment);\n\n    this.log(`Rendered ${newExperts.length} new expert cards for load more`);\n  }\n\n  // ... (utility methods continue below)\n\n  /**\n   * Utility Methods\n   */\n  private getAttr(element: Element, name: string): string | null {\n    return element.getAttribute(`${ATTR_PREFIX}${name}`);\n  }\n\n  private querySelector(element: Element, selector: string): Element | null {\n    return element.querySelector(selector);\n  }\n\n  private querySelectorAll(element: Element, selector: string): Element[] {\n    return Array.from(element.querySelectorAll(selector));\n  }\n\n  private findExpertContainers(): Element[] {\n    this.log('Looking for expert containers...');\n    this.log('Document ready state:', document.readyState);\n    this.log('Total elements in document:', document.querySelectorAll('*').length);\n    \n    // Simple and reliable approach: look for any element with key contra attributes\n    const selectors = [\n      '[data-contra-limit]',\n      '[data-contra-pagination-mode]', \n      '[data-contra-template]'\n    ];\n    \n    const foundElements: Element[] = [];\n    \n    for (const selector of selectors) {\n      const elements = Array.from(document.querySelectorAll(selector));\n      this.log(`Found ${elements.length} elements with selector: ${selector}`, elements);\n      foundElements.push(...elements);\n    }\n    \n    // If no elements found, try a broader search\n    if (foundElements.length === 0) {\n      this.log('No elements found with standard selectors, trying broader search...');\n      \n      // Look for any data-contra attributes\n      const allContraElements = Array.from(document.querySelectorAll('[data-contra-limit], [data-contra-template], [data-contra-pagination-mode]'));\n      this.log(`Found ${allContraElements.length} elements with any contra attributes:`, allContraElements);\n      \n      // Look for the specific container structure we expect\n      const containerCandidates = Array.from(document.querySelectorAll('div')).filter(div => {\n        const hasLimit = div.hasAttribute('data-contra-limit');\n        const hasTemplate = div.querySelector('[data-contra-template]');\n        const hasContraClass = div.className.includes('contra');\n        return hasLimit || hasTemplate || hasContraClass;\n      });\n      \n      this.log(`Found ${containerCandidates.length} potential container candidates:`, containerCandidates);\n      foundElements.push(...containerCandidates);\n    }\n    \n    // Get unique containers\n    const containers = new Set<Element>();\n    \n    for (const element of foundElements) {\n      // If element has limit or pagination-mode, it's a container\n      if (element.hasAttribute('data-contra-limit') || element.hasAttribute('data-contra-pagination-mode')) {\n        containers.add(element);\n        this.log('Found container (has limit/pagination):', element);\n      } \n      // If element is a template, its parent is the container\n      else if (element.hasAttribute('data-contra-template')) {\n        const parent = element.parentElement;\n        if (parent) {\n          containers.add(parent);\n          this.log('Found container (template parent):', parent);\n        }\n      }\n      // If element has contra class, check if it's a container\n      else if (element.className.includes('contra')) {\n        // Check if this element or its children have the structure we need\n        const hasTemplate = element.querySelector('[data-contra-template]');\n        if (hasTemplate) {\n          containers.add(element);\n          this.log('Found container (has contra class and template):', element);\n        }\n      }\n    }\n    \n    const uniqueContainers = Array.from(containers);\n    this.log(`Total unique containers found: ${uniqueContainers.length}`, uniqueContainers);\n    \n    // If still no containers found, log detailed debugging info\n    if (uniqueContainers.length === 0) {\n      this.log('❌ No containers found! Debugging info:');\n      this.log('- Document body HTML:', document.body?.innerHTML?.substring(0, 500) + '...');\n      this.log('- All divs:', Array.from(document.querySelectorAll('div')).slice(0, 10));\n      this.log('- Elements with data attributes:', Array.from(document.querySelectorAll('[data-contra-limit], [data-contra-template], [data-contra-pagination-mode]')));\n    }\n    \n    return uniqueContainers;\n  }\n\n  private parseFiltersFromElement(element: Element): ExpertFilters {\n    const filters: ExpertFilters = {};\n    \n    // Parse filter attributes\n    const filterMap = {\n      'available': 'available',\n      'languages': 'languages', \n      'location': 'location',\n      'min-rate': 'minRate',\n      'max-rate': 'maxRate',\n      'sort': 'sortBy',\n      'limit': 'limit',\n      'offset': 'offset'\n    };\n\n    Object.entries(filterMap).forEach(([attr, filterKey]) => {\n      const value = this.getAttr(element, attr);\n      if (value != null) {\n        if (filterKey === 'available') {\n          (filters as any)[filterKey] = value === 'true';\n        } else if (filterKey === 'languages') {\n          (filters as any)[filterKey] = value.split(',').map(v => v.trim());\n        } else if (['minRate', 'maxRate', 'limit', 'offset'].includes(filterKey)) {\n          (filters as any)[filterKey] = parseInt(value);\n        } else {\n          (filters as any)[filterKey] = value;\n        }\n      }\n    });\n\n    // Ensure offset defaults to 0 if not specified\n    if (filters.offset === undefined) {\n      filters.offset = 0;\n    }\n\n    return filters;\n  }\n\n  private getControlValue(control: HTMLInputElement | HTMLSelectElement): any {\n    if (control instanceof HTMLInputElement) {\n      switch (control.type) {\n        case 'checkbox':\n          return control.checked;\n        case 'number':\n        case 'range':\n          return control.valueAsNumber;\n        default:\n          return control.value;\n      }\n    } else if (control instanceof HTMLSelectElement) {\n      if (control.multiple) {\n        return Array.from(control.selectedOptions).map(option => option.value);\n      }\n      return control.value;\n    }\n    return null;\n  }\n\n  private updateFilter(programId: string, filterKey: string, value: any, type: string = 'replace'): void {\n    const state = this.state.getState(programId);\n    const newFilters = { ...state.filters };\n\n    // Handle special cases for filter value conversion\n    let processedValue = value;\n    \n    if (filterKey === 'available') {\n      // Convert string values to boolean for availability filter\n      if (typeof value === 'string') {\n        if (value === 'true') {\n          processedValue = true;\n        } else if (value === 'false') {\n          processedValue = false;\n        } else if (value === '' || value === null) {\n          processedValue = undefined; // No filter\n        }\n      }\n    } else if (filterKey === 'minRate' || filterKey === 'maxRate') {\n      // Convert empty strings to undefined for rate filters\n      if (value === '' || value === null) {\n        processedValue = undefined;\n      } else {\n        processedValue = Number(value);\n      }\n    }\n\n    if (type === 'append' && Array.isArray(newFilters[filterKey as keyof ExpertFilters])) {\n      const currentArray = newFilters[filterKey as keyof ExpertFilters] as any[];\n      newFilters[filterKey as keyof ExpertFilters] = [...currentArray, processedValue] as any;\n    } else {\n      (newFilters as any)[filterKey] = processedValue;\n    }\n\n    // Reset offset to 0 when any filter changes (except offset itself)\n    // This ensures we start from the beginning when filters change\n    if (filterKey !== 'offset') {\n      newFilters.offset = 0;\n    }\n\n    this.state.updateState(programId, { filters: newFilters });\n    \n    this.log(`Filter updated: ${filterKey} = ${processedValue} (original: ${value})`);\n    \n    // Dispatch filter change event\n    const event: FilterChangeEvent = {\n      filters: newFilters,\n      element: document.querySelector(`[data-program-id=\"${programId}\"]`) as HTMLElement\n    };\n    \n    this.dispatchEvent(document as any, 'filterChange', event);\n  }\n\n  private showLoading(container: Element, show: boolean): void {\n    const loadingElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n    if (loadingElement) {\n      (loadingElement as HTMLElement).style.display = show ? '' : 'none';\n    }\n    \n    (container as HTMLElement).classList.toggle(this.config.loadingClass, show);\n  }\n\n  private showError(container: Element, error: Error): void {\n    const errorElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.error}]`);\n    if (errorElement) {\n      errorElement.textContent = error.message;\n      (errorElement as HTMLElement).style.display = '';\n    }\n    \n    (container as HTMLElement).classList.add(this.config.errorClass);\n    this.log('Error displayed', error);\n  }\n\n  private dispatchEvent(target: Element | Document, eventName: string, detail: any): void {\n    const event = new CustomEvent(`contra:${eventName}`, { detail });\n    target.dispatchEvent(event);\n  }\n\n  private log(message: string, ...args: any[]): void {\n    if (this.config.debug) {\n      console.log(`[ContraWebflow] ${message}`, ...args);\n    }\n  }\n}\n\n/**\n * Auto-initialize runtime when DOM is ready\n */\nfunction autoInit(): void {\n  const configElement = document.getElementById('contra-config');\n  if (!configElement) {\n    console.warn('[ContraWebflow] No config element found. Runtime not initialized.');\n    return;\n  }\n\n  try {\n    const config = JSON.parse(configElement.textContent || '{}');\n    \n    // Validate required config\n    if (!config.apiKey) {\n      console.error('[ContraWebflow] API key is required in config.');\n      return;\n    }\n    \n    if (!config.program) {\n      console.error('[ContraWebflow] Program ID is required in config.');\n      return;\n    }\n    \n    // Add a small delay to ensure all DOM elements are ready\n    const initializeRuntime = () => {\n      const runtime = new ContraWebflowRuntime(config);\n      \n      // Expose runtime globally for debugging\n      (window as any).contraRuntime = runtime;\n      \n      runtime.init().catch(error => {\n        console.error('[ContraWebflow] Runtime initialization failed:', error);\n      });\n    };\n    \n    // Use setTimeout to ensure DOM is fully ready\n    setTimeout(initializeRuntime, 100);\n    \n  } catch (error) {\n    console.error('[ContraWebflow] Failed to parse config:', error);\n  }\n}\n\n// Auto-initialize when DOM is ready with multiple fallbacks\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', autoInit);\n} else if (document.readyState === 'interactive') {\n  // DOM is ready but resources might still be loading\n  setTimeout(autoInit, 50);\n} else {\n  // DOM and resources are ready\n  autoInit();\n}\n\n// Export runtime class for manual initialization\nexport { ContraWebflowRuntime as default }; "]}
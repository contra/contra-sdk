{"version":3,"sources":["../src/runtime.ts","../../contra-client/src/client.ts"],"sourcesContent":["import { ContraClient, utils } from '@contra/client';\nimport type {\n  ExpertProfile,\n  ExpertFilters,\n  FilterChangeEvent,\n  ExpertLoadEvent,\n  ErrorEvent,\n  ExpertField\n} from '@contra/types';\n\n/**\n * Webflow Runtime for Contra Experts\n * Simplified for flexibility and predictability.\n */\n\n// Simplified configuration\ninterface RuntimeConfig {\n  apiKey: string;\n  debug?: boolean;\n  loadingClass?: string;\n  errorClass?: string;\n  emptyClass?: string;\n  // Video configuration\n  videoAutoplay?: boolean;\n  videoHoverPlay?: boolean;\n  videoMuted?: boolean;\n  videoLoop?: boolean;\n  videoControls?: boolean;\n}\n\n// Attribute constants\nconst ATTR_PREFIX = 'data-contra-';\nconst ATTRS = {\n  // Core list attributes\n  listId: 'list-id',\n  program: 'program',\n  template: 'template',\n  \n  // States\n  loading: 'loading',\n  error: 'error',\n  empty: 'empty',\n  \n  // Field binding\n  field: 'field',\n  format: 'format',\n  \n  // Repeating elements\n  repeat: 'repeat',\n  max: 'max',\n  \n  // Sorting and pagination\n  limit: 'limit',\n  \n  // Actions\n  action: 'action',\n  listTarget: 'list-target',\n\n  // Conditional display\n  showWhen: 'show-when',\n  hideWhen: 'hide-when'\n} as const;\n\n// State management is now keyed by the list's unique ID\nclass RuntimeState {\n  private states = new Map<string, {\n    filters: ExpertFilters;\n    experts: ExpertProfile[];\n    loading: boolean;\n    error: Error | null;\n    offset: number;\n    limit: number;\n    totalCount: number;\n    hasNextPage: boolean;\n  }>();\n\n  getState(listId: string) {\n    if (!this.states.has(listId)) {\n      this.states.set(listId, {\n        filters: {},\n        experts: [],\n        loading: false,\n        error: null,\n        offset: 0,\n        limit: 20, // Default limit\n        totalCount: 0,\n        hasNextPage: false\n      });\n    }\n    return this.states.get(listId)!;\n  }\n\n  updateState(listId: string, updates: Partial<ReturnType<RuntimeState['getState']>>) {\n    const state = this.getState(listId);\n    Object.assign(state, updates);\n    this.states.set(listId, state);\n  }\n}\n\n/**\n * Main Runtime Class\n */\nexport class ContraWebflowRuntime {\n  private client: ContraClient;\n  private config: Required<RuntimeConfig>;\n  private state = new RuntimeState();\n  private debouncedReload: Map<string, () => void> = new Map();\n  private filterNameMap: Record<string, string> = {\n    locations: 'location',\n  };\n  private filterOptionLabels: Record<string, Record<string, string>> = {\n    sortBy: {\n      relevance: 'Relevance',\n      oldest: 'Oldest',\n      newest: 'Newest',\n      rate_asc: 'Rate (Low to High)',\n      rate_desc: 'Rate (High to Low)'\n    }\n  };\n\n  constructor(config: RuntimeConfig) {\n    this.config = {\n      debug: false,\n      loadingClass: 'loading',\n      errorClass: 'error',\n      emptyClass: 'empty',\n      // Video configuration defaults\n      videoAutoplay: false,\n      videoHoverPlay: true,\n      videoMuted: true,\n      videoLoop: true,\n      videoControls: false,\n      ...config\n    };\n\n    this.client = new ContraClient({\n      apiKey: this.config.apiKey,\n      debug: this.config.debug\n    });\n\n    this.log('Runtime initialized', this.config);\n  }\n\n  /**\n   * Initialize the runtime by finding and setting up all lists.\n   */\n  async init(): Promise<void> {\n    this.log('Initializing runtime...');\n\n    try {\n      // 1. Discover all lists and unique programs to fetch filters for\n      const listElements = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.listId}]`);\n      this.log(`Found ${listElements.length} lists to initialize.`);\n      \n      const programFilters = new Map<string, any[]>();\n      for (const listElement of listElements) {\n        const programId = this.getAttr(listElement, ATTRS.program);\n        if (programId && !programFilters.has(programId)) {\n          this.log(`Fetching filters for program: ${programId}`);\n          programFilters.set(programId, await this.getAvailableFilters(programId));\n        }\n      }\n\n      // 2. Populate all filter controls on the page once\n      this.populateAllFilterControls(programFilters);\n\n      // 3. Initialize each list\n      for (const listElement of listElements) {\n        await this.initList(listElement);\n      }\n\n      // 4. Wire up all action buttons and filter controls\n      this.wireActionButtons();\n      this.wireFilterControls();\n\n      this.log('Runtime initialization complete');\n    } catch (error) {\n      this.log('Runtime initialization failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize a single expert list.\n   */\n  private async initList(listElement: Element): Promise<void> {\n    const listId = this.getAttr(listElement, ATTRS.listId);\n    const programId = this.getAttr(listElement, ATTRS.program);\n\n    if (!listId || !programId) {\n      this.log('List element is missing required attributes `data-contra-list-id` or `data-contra-program`.', listElement);\n      return;\n    }\n\n    this.log(`Initializing list: ${listId} for program: ${programId}`);\n\n    try {\n      // Mark as initialized\n      (listElement as HTMLElement).setAttribute('data-contra-initialized', 'true');\n      \n      // Find and hide the template immediately to prevent flash of un-rendered content.\n      const template = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.template}]`);\n      if (template) {\n          (template as HTMLElement).style.display = 'none';\n          this.log(`Template found and hidden for list: ${listId}`);\n      }\n\n      // Parse initial filters from the list element itself\n      const initialFilters = this.parseFiltersFromElement(listElement);\n      const limit = parseInt(this.getAttr(listElement, ATTRS.limit) || '20', 10);\n      \n      // Update state with these initial settings\n      this.state.updateState(listId, { \n      filters: initialFilters,\n        limit: limit,\n        offset: initialFilters.offset || 0,\n      });\n      \n      this.log(`List setup complete for: ${listId}`, { initialFilters, limit });\n      \n      // Load initial data for the list\n      await this.loadExperts(listId, programId);\n\n    } catch (error) {\n      this.log(`Failed to initialize list ${listId}`, error);\n      this.showError(listElement, error as Error);\n    }\n  }\n\n  /**\n   * Wire up all action buttons on the page.\n   */\n  private wireActionButtons(): void {\n    const actionButtons = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.action}]`);\n    \n    actionButtons.forEach(button => {\n      const action = this.getAttr(button, ATTRS.action);\n      const targetListId = this.getAttr(button, ATTRS.listTarget);\n      \n      if (!action || !targetListId) {\n        this.log('Action button is missing required `data-contra-action` or `data-contra-list-target` attributes.', button);\n        return;\n      }\n\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.handleAction(action, targetListId, button);\n      });\n    });\n  }\n\n  /**\n   * Load experts for a given list.\n   */\n  private async loadExperts(listId: string, programId: string, append = false): Promise<void> {\n    const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${listId}\"]`);\n    if (!listElement) {\n      this.log(`Cannot find list element with ID: ${listId}`);\n      return;\n    }\n\n    // When reloading the list (not appending), we must hide the empty state message first.\n    const emptyElement = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (!append && emptyElement) {\n        (emptyElement as HTMLElement).style.display = 'none';\n    }\n\n    const state = this.state.getState(listId);\n    const filters = {\n      ...state.filters,\n      limit: state.limit,\n      offset: state.offset,\n    };\n    \n    this.log(`Loading experts for list: ${listId}`, filters);\n\n    try {\n      this.showLoading(listElement, true);\n      this.state.updateState(listId, { loading: true, error: null });\n\n      const response = await this.client.listExperts(programId, filters);\n      \n      this.log(`Loaded ${response.data.length} experts for list ${listId}`, response);\n\n      const newExperts = response.data;\n      const allExperts = append ? [...state.experts, ...newExperts] : newExperts;\n\n      // Update state\n      this.state.updateState(listId, {\n        experts: allExperts,\n        totalCount: response.totalCount,\n        offset: state.offset + newExperts.length,\n        hasNextPage: newExperts.length === state.limit,\n        loading: false\n      });\n\n      // Render experts\n      this.renderExperts(listElement, newExperts, append);\n      \n      // Update UI states\n      this.updateUIStates(listElement, listId);\n\n    } catch (error) {\n      this.log(`Failed to load experts for list: ${listId}`, error);\n      \n      this.state.updateState(listId, { \n        loading: false, \n        error: error as Error \n      });\n      \n      this.showError(listElement, error as Error);\n      \n    } finally {\n      this.showLoading(listElement, false);\n    }\n  }\n\n  /**\n   * Render experts into the container. Can clear or append.\n   */\n  private renderExperts(listElement: Element, experts: ExpertProfile[], append: boolean): void {\n    const template = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    if (!template) {\n      this.log('No template found in list', listElement);\n      return;\n    }\n\n    if (!append) {\n      // Clear only previously rendered expert cards\n      const existingCards = this.querySelectorAll(listElement, '.contra-rendered-item');\n      existingCards.forEach(card => card.remove());\n    }\n\n    const fragment = document.createDocumentFragment();\n    experts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert);\n      fragment.appendChild(expertCard);\n    });\n    listElement.appendChild(fragment);\n\n    this.log(`Rendered ${experts.length} expert cards into list`, listElement);\n  }\n\n  /**\n   * Populate expert card from template\n   */\n  private populateExpertCard(template: Element, expert: ExpertProfile): Element {\n    const card = template.cloneNode(true) as Element;\n    \n    // Add a marker class to identify this as a rendered card\n    card.classList.add('contra-rendered-item');\n    \n    // Remove template attribute and show the card\n    card.removeAttribute(`${ATTR_PREFIX}${ATTRS.template}`);\n    (card as HTMLElement).style.display = '';\n\n    // Populate field bindings\n    this.populateFields(card, expert);\n    \n    // Handle repeating elements (projects, social links)\n    this.populateRepeatingElements(card, expert);\n    \n    // Handle conditional display\n    this.handleConditionalDisplay(card, expert);\n\n    return card;\n  }\n\n  /**\n   * Populate data fields in the card\n   */\n  private populateFields(card: Element, expert: ExpertProfile): void {\n    const fieldElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.field}]`);\n    \n    fieldElements.forEach(element => {\n      const fieldName = this.getAttr(element, ATTRS.field) as ExpertField;\n      const format = this.getAttr(element, ATTRS.format);\n      \n      if (!fieldName || !(fieldName in expert)) return;\n\n      const value = expert[fieldName];\n      this.setElementValue(element, value, format);\n    });\n\n    // Handle star ratings\n    const starsElements = this.querySelectorAll(card, '[data-contra-stars]');\n    starsElements.forEach(element => {\n      if (expert.averageReviewScore) {\n        this.renderStarRating(element, expert.averageReviewScore);\n      }\n    });\n  }\n\n  /**\n   * Set element value with proper formatting\n   */\n  private setElementValue(element: Element, value: any, format?: string | null): void {\n    if (value == null || value === '') return;\n\n    // Media type detection and handling\n    if (this.isMediaField(element) && typeof value === 'string' && value.trim()) {\n      this.setMediaValue(element, value);\n      return;\n    }\n\n    if (element instanceof HTMLAnchorElement) {\n      element.href = String(value);\n      if (element.children.length === 0 && !element.textContent?.trim()) {\n        element.textContent = String(value);\n      }\n    } else if (element instanceof HTMLInputElement) {\n      element.value = String(value);\n    } else if (element instanceof HTMLImageElement) {\n      // Regular image handling for avatars and other images\n      element.src = String(value);\n      element.alt = element.alt || 'Image';\n    } else {\n      // Text content with formatting\n      let displayValue = String(value);\n      \n      if (format) {\n        switch (format) {\n          case 'currency':\n            displayValue = typeof value === 'number' ? `$${value}` : displayValue;\n            break;\n          case 'rate':\n            displayValue = utils.formatRate(typeof value === 'number' ? value : null);\n            break;\n          case 'rating':\n            // Format rating to one decimal place (5.0, 4.9, etc.)\n            displayValue = typeof value === 'number' ? value.toFixed(1) : displayValue;\n            break;\n          case 'earnings':\n            // Format earnings like $25k+\n            if (typeof value === 'number') {\n              if (value >= 1000000) {\n                displayValue = `$${Math.floor(value / 1000000)}M+`;\n              } else if (value >= 1000) {\n                displayValue = `$${Math.floor(value / 1000)}k+`;\n              } else {\n                displayValue = `$${value}`;\n              }\n            }\n            break;\n          case 'number':\n            displayValue = typeof value === 'number' ? value.toLocaleString() : displayValue;\n            break;\n          case 'truncate':\n            displayValue = displayValue.length > 100 ? displayValue.substring(0, 97) + '...' : displayValue;\n            break;\n          case 'boolean':\n            displayValue = value ? 'Yes' : 'No';\n            break;\n          case 'availability':\n            displayValue = value ? 'Available' : 'Not Available';\n            break;\n        }\n      }\n      \n      element.textContent = displayValue;\n    }\n  }\n\n  /**\n   * Star rating rendering with optional text display\n   */\n  private renderStarRating(element: Element, rating: number): void {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    let starsHtml = '';\n    \n    // Full stars\n    for (let i = 0; i < fullStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-full\">★</span>';\n    }\n    \n    // Half star\n    if (hasHalfStar) {\n      starsHtml += '<span class=\"contra-star contra-star-half\">★</span>';\n    }\n    \n    // Empty stars\n    for (let i = 0; i < emptyStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-empty\">☆</span>';\n    }\n    \n    element.innerHTML = starsHtml;\n    \n    // Also update any rating text elements in the same card\n    const card = element.closest('[data-contra-template]') || element.closest('.expert-card');\n    if (card) {\n      const ratingTextElements = this.querySelectorAll(card, '[data-contra-rating-text]');\n      ratingTextElements.forEach(textElement => {\n        textElement.textContent = rating.toFixed(1);\n      });\n    }\n  }\n\n  /**\n   * Media type detection and element handling\n   */\n  private isMediaField(element: Element): boolean {\n    const field = this.getAttr(element, ATTRS.field);\n    // Only apply advanced media handling to project cover URLs, not avatars\n    return field === 'coverUrl';\n  }\n\n  /**\n   * Media value setting with automatic type detection\n   */\n  private setMediaValue(element: Element, url: string): void {\n    const mediaType = this.detectMediaType(url);\n    const parent = element.parentElement;\n    \n    if (!parent) {\n      this.log('Media element has no parent for replacement', element);\n      return;\n    }\n\n    // Remove existing media element\n    element.remove();\n\n    // Create appropriate media element\n    let mediaElement: HTMLElement;\n    \n    switch (mediaType) {\n      case 'video':\n        mediaElement = this.createVideoElement(url, element);\n        break;\n      case 'image':\n      default:\n        mediaElement = this.createImageElement(url, element);\n        break;\n    }\n\n    // Preserve classes and attributes from original element\n    this.transferAttributes(element, mediaElement);\n    \n    // Insert new media element\n    parent.appendChild(mediaElement);\n    \n    this.log(`Created ${mediaType} element for URL: ${url}`);\n  }\n\n  /**\n   * Detect media type from URL\n   */\n  private detectMediaType(url: string): 'image' | 'video' {\n    if (!url || typeof url !== 'string') {\n      this.log('Invalid URL provided to detectMediaType:', url);\n      return 'image';\n    }\n    \n    const urlLower = url.toLowerCase();\n    \n    // Video formats\n    const videoExtensions = ['.mp4', '.webm', '.mov', '.avi', '.mkv', '.ogg'];\n    const isVideo = videoExtensions.some(ext => urlLower.includes(ext));\n    \n    // Special handling for Cloudinary video URLs\n    const isCloudinaryVideo = urlLower.includes('cloudinary.com/') && urlLower.includes('/video/');\n    \n    return (isVideo || isCloudinaryVideo) ? 'video' : 'image';\n  }\n\n  /**\n   * Create video element with fallback\n   */\n  private createVideoElement(url: string, originalElement: Element): HTMLVideoElement {\n    const video = document.createElement('video');\n    \n    // Video attributes\n    video.src = url;\n    video.muted = this.config.videoMuted;\n    video.loop = this.config.videoLoop;\n    video.playsInline = true;\n    video.preload = 'metadata';\n    video.controls = this.config.videoControls;\n    \n    // Maintain aspect ratio and object-fit from original\n    video.style.width = '100%';\n    video.style.height = '100%';\n    video.style.objectFit = 'cover';\n    video.style.borderRadius = 'inherit';\n    \n    // Autoplay configuration\n    if (this.config.videoAutoplay) {\n      video.autoplay = true;\n      video.setAttribute('autoplay', '');\n    }\n    \n    // Error handling with fallback to poster or placeholder\n    video.onerror = () => {\n      this.log(`Video failed to load: ${url}`);\n      // Try to extract a thumbnail from Cloudinary video URL\n      const posterUrl = this.extractVideoThumbnail(url);\n      if (posterUrl) {\n        const fallbackImg = this.createImageElement(posterUrl, originalElement);\n        video.parentElement?.replaceChild(fallbackImg, video);\n      } else {\n        // Show placeholder\n        video.style.background = '#f3f4f6';\n        video.style.position = 'relative';\n        video.innerHTML = '<div style=\"position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);color:#9ca3af;font-size:12px;\">Video unavailable</div>';\n      }\n    };\n\n    // Hover-to-play functionality (if enabled and not autoplay)\n    if (this.config.videoHoverPlay && !this.config.videoAutoplay) {\n      video.addEventListener('mouseenter', () => {\n        video.currentTime = 0;\n        video.play().catch(() => {\n          // Ignore play errors (browser policies)\n        });\n      });\n\n      video.addEventListener('mouseleave', () => {\n        video.pause();\n        video.currentTime = 0;\n      });\n    }\n\n    return video;\n  }\n\n  /**\n   * Create image element with error handling\n   */\n  private createImageElement(url: string, originalElement: Element): HTMLImageElement {\n    const img = document.createElement('img');\n    \n    img.src = url;\n    img.alt = originalElement.getAttribute('alt') || 'Media content';\n    img.loading = 'lazy';\n    \n    // Maintain styling\n    img.style.width = '100%';\n    img.style.height = '100%';\n    img.style.objectFit = 'cover';\n    img.style.borderRadius = 'inherit';\n    \n    // Error handling\n    img.onerror = () => {\n      this.log(`Image failed to load: ${url}`);\n      img.style.background = '#f3f4f6';\n      img.style.opacity = '0.5';\n      img.alt = 'Image unavailable';\n      \n      // Add broken image icon\n      img.style.position = 'relative';\n      const placeholder = document.createElement('div');\n      placeholder.style.cssText = `\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        color: #9ca3af;\n        font-size: 12px;\n        text-align: center;\n      `;\n      placeholder.textContent = '🖼️ Image unavailable';\n      img.parentElement?.appendChild(placeholder);\n    };\n\n    return img;\n  }\n\n  /**\n   * Extract video thumbnail from Cloudinary URL\n   */\n  private extractVideoThumbnail(videoUrl: string): string | null {\n    if (videoUrl.includes('cloudinary.com/') && videoUrl.includes('/video/')) {\n      // Convert video URL to image thumbnail\n      return videoUrl\n        .replace('/video/', '/image/')\n        .replace(/\\.(mp4|webm|mov|avi|mkv)$/i, '.jpg')\n        .replace('fl_progressive', 'f_auto,q_auto,c_fill');\n    }\n    return null;\n  }\n\n  /**\n   * Transfer attributes and classes from old element to new\n   */\n  private transferAttributes(from: Element, to: HTMLElement): void {\n    // Transfer classes\n    if (from.className) {\n      to.className = from.className;\n    }\n    \n    // Transfer data attributes (except contra-field)\n    Array.from(from.attributes).forEach(attr => {\n      if (attr.name.startsWith('data-') && attr.name !== `${ATTR_PREFIX}${ATTRS.field}`) {\n        to.setAttribute(attr.name, attr.value);\n      }\n    });\n    \n    // Transfer style\n    if (from.getAttribute('style')) {\n      const existingStyle = to.getAttribute('style') || '';\n      to.setAttribute('style', existingStyle + '; ' + from.getAttribute('style'));\n    }\n  }\n\n  /**\n   * Handle repeating elements (projects, social links)\n   */\n  private populateRepeatingElements(card: Element, expert: ExpertProfile): void {\n    const repeatElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.repeat}]`);\n    \n    repeatElements.forEach(container => {\n      const repeatType = this.getAttr(container, ATTRS.repeat);\n      const maxItems = parseInt(this.getAttr(container, ATTRS.max) || '10');\n      \n      if (repeatType === 'projects' && expert.projects) {\n        this.populateRepeatingContainer(container, expert.projects.slice(0, maxItems));\n      } else if (repeatType === 'socialLinks' && expert.socialLinks) {\n        this.populateRepeatingContainer(container, expert.socialLinks.slice(0, maxItems));\n      } else if (repeatType === 'skillTags' && expert.skillTags) {\n        this.populateRepeatingContainer(container, expert.skillTags.slice(0, maxItems).map((tag: string) => ({ name: tag })));\n      }\n    });\n  }\n\n  /**\n   * Populate a repeating container with items\n   */\n  private populateRepeatingContainer(container: Element, items: any[]): void {\n    const template = container.firstElementChild;\n    if (!template) return;\n\n    // Clear existing items\n    container.innerHTML = '';\n    \n    // Create items from template\n    items.forEach(item => {\n      const itemElement = template.cloneNode(true) as Element;\n      this.populateFields(itemElement, item);\n      container.appendChild(itemElement);\n    });\n    \n    // Hide container if no items\n    if (items.length === 0) {\n      (container as HTMLElement).style.display = 'none';\n    }\n  }\n\n  /**\n   * Handle conditional display based on data\n   */\n  private handleConditionalDisplay(card: Element, expert: ExpertProfile): void {\n    const conditionalElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.showWhen}], [${ATTR_PREFIX}${ATTRS.hideWhen}]`);\n    \n    conditionalElements.forEach(element => {\n      const showWhen = this.getAttr(element, ATTRS.showWhen);\n      const hideWhen = this.getAttr(element, ATTRS.hideWhen);\n      \n      let shouldShow = true;\n      \n      if (showWhen) {\n        shouldShow = this.evaluateCondition(expert, showWhen);\n      }\n      \n      if (hideWhen) {\n        shouldShow = shouldShow && !this.evaluateCondition(expert, hideWhen);\n      }\n      \n      (element as HTMLElement).style.display = shouldShow ? '' : 'none';\n    });\n  }\n\n  /**\n   * Evaluate a condition against expert data\n   */\n  private evaluateCondition(expert: ExpertProfile, condition: string): boolean {\n    if (!condition || typeof condition !== 'string') {\n      this.log('Invalid condition provided:', condition);\n      return false;\n    }\n    \n    // Parse condition: \"field:value\" or \"field:>value\" etc.\n    const parts = condition.split(':');\n    if (parts.length < 2) {\n      this.log('Invalid condition format:', condition);\n      return false;\n    }\n    \n    const field = parts[0];\n    const restOfCondition = parts.slice(1).join(':'); // Handle colons in values\n    const expertValue = (expert as any)[field];\n    \n    this.log(`Evaluating condition: ${field} (${expertValue}, type: ${typeof expertValue}) against ${restOfCondition}`);\n    \n    if (expertValue == null) {\n      this.log(`Field '${field}' is null/undefined, condition fails`);\n      return false;\n    }\n    \n    // Check for comparison operators\n    if (restOfCondition.startsWith('>=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) >= Number(value);\n      this.log(`Comparison: ${expertValue} >= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) <= Number(value);\n      this.log(`Comparison: ${expertValue} <= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('>')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) > Number(value);\n      this.log(`Comparison: ${expertValue} > ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) < Number(value);\n      this.log(`Comparison: ${expertValue} < ${value} = ${result}`);\n      return result;\n    } else {\n      // Direct value comparison with type-aware handling\n      let result = false;\n      \n      // Handle boolean fields specially\n      if (typeof expertValue === 'boolean') {\n        // Convert string condition to boolean for comparison\n        if (restOfCondition.toLowerCase() === 'true') {\n          result = expertValue === true;\n        } else if (restOfCondition.toLowerCase() === 'false') {\n          result = expertValue === false;\n        } else {\n          result = false;\n        }\n        this.log(`Boolean comparison: ${expertValue} === ${restOfCondition.toLowerCase() === 'true'} = ${result}`);\n      } else if (typeof expertValue === 'number') {\n        // Handle numeric comparisons\n        const numValue = Number(restOfCondition);\n        result = !isNaN(numValue) && expertValue === numValue;\n        this.log(`Number comparison: ${expertValue} === ${numValue} = ${result}`);\n      } else {\n        // String comparison (case-insensitive)\n        const expertStr = String(expertValue);\n        const valueStr = String(restOfCondition);\n        result = expertStr.toLowerCase() === valueStr.toLowerCase();\n        this.log(`String comparison: '${expertStr}' === '${valueStr}' = ${result}`);\n      }\n      \n      return result;\n    }\n  }\n\n  /**\n   * Update UI states based on current data for a specific list.\n   */\n  private updateUIStates(listElement: Element, listId: string): void {\n    const state = this.state.getState(listId);\n    \n    // Show/hide empty state based on the final expert list and loading status.\n    const emptyElement = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (emptyElement) {\n      const showEmpty = !state.loading && state.experts.length === 0;\n      (emptyElement as HTMLElement).style.display = showEmpty ? '' : 'none';\n      this.log(`List ${listId}: Empty state is ${showEmpty ? 'visible' : 'hidden'}. Reason: loading=${state.loading}, experts=${state.experts.length}`);\n    }\n    \n    // Update and control visibility of the load more button\n    const loadMoreButton = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.action}=\"load-more\"][${ATTR_PREFIX}${ATTRS.listTarget}=\"${listId}\"]`);\n    if (loadMoreButton) {\n      const btn = loadMoreButton as HTMLButtonElement;\n      const hasMore = state.hasNextPage;\n\n      btn.style.display = hasMore ? '' : 'none';\n      btn.disabled = state.loading;\n      btn.textContent = state.loading ? 'Loading...' : 'Load More';\n    }\n  }\n\n  /**\n   * Handle action buttons (just load-more for now).\n   */\n  private handleAction(action: string, targetListId: string, button: Element): void {\n    if (action === 'load-more') {\n      const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${targetListId}\"]`);\n      const programId = this.getAttr(listElement!, ATTRS.program);\n      if (listElement && programId) {\n        this.loadExperts(targetListId, programId, true); // `true` to append\n      } else {\n        this.log(`Could not find list or program for target: ${targetListId}`);\n      }\n    } else if (action === 'clear-filters') {\n      this.clearFilters(targetListId);\n    }\n  }\n\n  private clearFilters(targetListId: string): void {\n    const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${targetListId}\"]`);\n    if (!listElement) {\n        this.log(`Cannot find list element with ID: ${targetListId} to clear filters.`);\n        return;\n    }\n    const programId = this.getAttr(listElement, ATTRS.program);\n    if (!programId) {\n        this.log(`Cannot find programId for list: ${targetListId}`);\n        return;\n    }\n\n    this.log(`Clearing filters for list: ${targetListId}`);\n\n    // 1. Reset state\n    this.state.updateState(targetListId, { filters: {}, offset: 0 });\n\n    // 2. Reset controls visually\n    const filterControls = this.querySelectorAll(document.body, `[data-contra-filter][data-contra-list-target=\"${targetListId}\"]`);\n    filterControls.forEach(control => {\n        this.resetControlValue(control as HTMLInputElement | HTMLSelectElement);\n    });\n\n    // 3. Reload data\n    this.loadExperts(targetListId, programId, false); // false to replace, not append\n  }\n\n  private resetControlValue(control: HTMLInputElement | HTMLSelectElement): void {\n    if (control instanceof HTMLInputElement) {\n        switch (control.type) {\n            case 'checkbox':\n            case 'radio':\n                control.checked = false;\n                break;\n            case 'number':\n            case 'range':\n                control.value = '';\n                break;\n            default: // text, search, etc.\n                control.value = '';\n                break;\n        }\n    } else if (control instanceof HTMLSelectElement) {\n        control.selectedIndex = 0; // Reset to the first option\n    }\n  }\n\n  private updateFilterAndReload(listId: string, programId: string, filterKey: string, value: any): void {\n    const state = this.state.getState(listId);\n    const newFilters = { ...state.filters };\n\n    // Process and set value\n    let processedValue = value;\n    if (filterKey === 'available') {\n      // If checkbox is checked, value is true. If unchecked, it's false.\n      // We only want to apply the filter when it's true.\n      processedValue = value ? true : undefined;\n    } else if (['minRate', 'maxRate'].includes(filterKey)) {\n      processedValue = (value === '' || value === null) ? undefined : Number(value);\n    } else if (filterKey === 'languages' && typeof value === 'string') {\n        processedValue = value.split(',').map(v => v.trim()).filter(v => v);\n        if (processedValue.length === 0) {\n            processedValue = undefined;\n        }\n    }\n\n    if (processedValue !== undefined && processedValue !== '') {\n        const apiKey = this.filterNameMap[filterKey] || filterKey;\n        (newFilters as any)[apiKey] = processedValue;\n    } else {\n        const apiKey = this.filterNameMap[filterKey] || filterKey;\n        delete (newFilters as any)[apiKey];\n    }\n    \n    // Reset offset and update state\n    this.state.updateState(listId, { filters: newFilters, offset: 0 });\n\n    this.log(`Filter updated for list ${listId}, reloading. New filters:`, newFilters);\n    \n    // Reload the list\n    this.loadExperts(listId, programId, false);\n  }\n\n  private wireFilterControls(): void {\n    const filterControls = this.querySelectorAll(document.body, `[data-contra-filter]`);\n    this.log(`Found ${filterControls.length} filter controls to wire.`);\n\n    filterControls.forEach(control => {\n        const filterKey = control.getAttribute('data-contra-filter');\n        const targetListId = control.getAttribute('data-contra-list-target');\n\n        if (!filterKey || !targetListId) {\n            this.log('Filter control missing required attributes: data-contra-filter or data-contra-list-target', control);\n            return;\n        }\n\n        const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}list-id=\"${targetListId}\"]`);\n        if (!listElement) return;\n        const programId = this.getAttr(listElement, ATTRS.program);\n        if (!programId) return;\n\n        const debounceTime = (control instanceof HTMLInputElement && ['text', 'search'].includes(control.type)) ? 300 : 0;\n        \n        const handler = () => {\n            const value = this.getControlValue(control as HTMLInputElement | HTMLSelectElement);\n            this.updateFilterAndReload(targetListId, programId, filterKey, value);\n        };\n        \n        const debouncedHandler = this.debounce(handler, debounceTime);\n        \n        const eventType = (control instanceof HTMLInputElement && ['text', 'search'].includes(control.type)) ? 'input' : 'change';\n        control.addEventListener(eventType, debouncedHandler);\n    });\n  }\n\n  private debounce(func: (...args: any[]) => void, delay: number): (...args: any[]) => void {\n    let timeoutId: number;\n    return (...args: any[]) => {\n        clearTimeout(timeoutId);\n        if (delay > 0) {\n            timeoutId = window.setTimeout(() => func.apply(this, args), delay);\n        } else {\n            func.apply(this, args);\n        }\n    };\n  }\n\n  /**\n   * Utility Methods\n   */\n  private getAttr(element: Element, name: string): string | null {\n    return element.getAttribute(`${ATTR_PREFIX}${name}`);\n  }\n\n  private querySelector(element: Element, selector: string): Element | null {\n    return element.querySelector(selector);\n  }\n\n  private querySelectorAll(element: Element, selector: string): Element[] {\n    return Array.from(element.querySelectorAll(selector));\n  }\n\n  private parseFiltersFromElement(element: Element): ExpertFilters {\n    const filters: ExpertFilters = {};\n    \n    // Parse filter attributes\n    const filterMap = {\n      'available': 'available',\n      'languages': 'languages', \n      'location': 'location',\n      'min-rate': 'minRate',\n      'max-rate': 'maxRate',\n      'sort': 'sortBy',\n      'limit': 'limit',\n      'offset': 'offset'\n    };\n\n    Object.entries(filterMap).forEach(([attr, filterKey]) => {\n      const value = this.getAttr(element, attr);\n      if (value != null) {\n        if (filterKey === 'available') {\n          (filters as any)[filterKey] = value === 'true';\n        } else if (filterKey === 'languages') {\n          (filters as any)[filterKey] = value.split(',').map(v => v.trim());\n        } else if (['minRate', 'maxRate', 'limit', 'offset'].includes(filterKey)) {\n          (filters as any)[filterKey] = parseInt(value);\n        } else {\n          (filters as any)[filterKey] = value;\n        }\n      }\n    });\n\n    // Ensure offset defaults to 0 if not specified\n    if (filters.offset === undefined) {\n      filters.offset = 0;\n    }\n\n    return filters;\n  }\n\n  private getControlValue(control: HTMLInputElement | HTMLSelectElement): any {\n    if (control instanceof HTMLInputElement) {\n      switch (control.type) {\n        case 'checkbox':\n          return control.checked;\n        case 'number':\n        case 'range':\n          return control.valueAsNumber;\n        default:\n          return control.value;\n      }\n    } else if (control instanceof HTMLSelectElement) {\n      if (control.multiple) {\n        return Array.from(control.selectedOptions).map(option => option.value);\n      }\n      return control.value;\n    }\n    return null;\n  }\n\n  private showLoading(container: Element, show: boolean): void {\n    const loadingElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n    if (loadingElement) {\n      (loadingElement as HTMLElement).style.display = show ? '' : 'none';\n    }\n    \n    (container as HTMLElement).classList.toggle(this.config.loadingClass, show);\n  }\n\n  private showError(container: Element, error: Error): void {\n    const errorElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.error}]`);\n    if (errorElement) {\n      errorElement.textContent = error.message;\n      (errorElement as HTMLElement).style.display = '';\n    }\n    \n    (container as HTMLElement).classList.add(this.config.errorClass);\n    this.log('Error displayed', error);\n  }\n\n  private dispatchEvent(target: Element | Document, eventName: string, detail: any): void {\n    const event = new CustomEvent(`contra:${eventName}`, { detail });\n    target.dispatchEvent(event);\n  }\n\n  private log(message: string, ...args: any[]): void {\n    if (this.config.debug) {\n      console.log(`[ContraWebflow] ${message}`, ...args);\n    }\n  }\n\n  private async getAvailableFilters(programId: string): Promise<any[]> {\n    const url = `https://contra.com/public-api/programs/${programId}/filters`;\n    this.log(`Fetching available filters for program: ${programId}`);\n    try {\n        const response = await fetch(url, {\n            headers: {\n                'X-API-Key': this.config.apiKey,\n                'Accept': 'application/json'\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Failed to fetch filters: ${response.statusText}`);\n        }\n        const data = await response.json();\n        this.log('Successfully fetched filters', data.data);\n        return data.data || [];\n    } catch (error) {\n        this.log('Error fetching available filters', error);\n        return [];\n    }\n  }\n  \n  private getFilterOptionLabel(filterKey: string, value: string): string {\n    const labels = this.filterOptionLabels[filterKey];\n    if (labels && labels[value]) {\n      return labels[value];\n    }\n    // Capitalize the first letter and lowercase the rest as a fallback\n    return value.charAt(0).toUpperCase() + value.slice(1).toLowerCase();\n  }\n\n  private populateAllFilterControls(programFilters: Map<string, any[]>): void {\n    this.log('Populating all filter controls on the page...');\n    const allControls = this.querySelectorAll(document.body, `[data-contra-filter]`);\n\n    allControls.forEach(control => {\n      const targetListId = control.getAttribute('data-contra-list-target');\n      if (!targetListId) return;\n\n      const targetList = this.querySelector(document.body, `[data-contra-list-id=\"${targetListId}\"]`);\n      if (!targetList) return;\n\n      const programId = this.getAttr(targetList, ATTRS.program);\n      if (!programId) return;\n\n      const filters = programFilters.get(programId);\n      if (!filters) return;\n\n      const filterKey = control.getAttribute('data-contra-filter');\n      const filterDef = filters.find(f => f.name === filterKey);\n\n      if (!filterDef) return;\n\n      // Handle number input ranges\n      if (filterDef.type === 'number' && control instanceof HTMLInputElement) {\n        if (filterDef.minimum !== undefined) control.min = String(filterDef.minimum);\n        if (filterDef.maximum !== undefined) control.max = String(filterDef.maximum);\n      }\n      \n      // Handle populating controls with options (select, datalist)\n      if (filterDef.options) {\n          if (control instanceof HTMLSelectElement) {\n              this.populateSelectControl(control, filterKey!, filterDef.options);\n          } else if (control instanceof HTMLInputElement && control.getAttribute('list')) {\n              this.populateDatalistControl(control, filterKey!, filterDef.options);\n          }\n      }\n    });\n  }\n\n  private populateSelectControl(control: HTMLSelectElement, filterKey: string, options: any[]): void {\n    this.log(`Populating options for filter '${filterKey}' on control`, control);\n    \n    const placeholder = control.firstElementChild?.cloneNode(true) as Element | null;\n    control.innerHTML = '';\n    if (placeholder && placeholder.getAttribute('value') === '') {\n      control.appendChild(placeholder);\n    }\n\n    options.forEach((option: any) => {\n      const optionElement = document.createElement('option');\n      const value = typeof option === 'object' && option.value !== undefined ? option.value : String(option);\n      \n      optionElement.value = value;\n\n      let label: string;\n      if (filterKey === 'locations') {\n        const labelMatch = value.match(/^(.*?)\\s*\\(/);\n        label = labelMatch ? labelMatch[1].trim() : value;\n      } else {\n        label = this.getFilterOptionLabel(filterKey!, value);\n      }\n      optionElement.textContent = label;\n      \n      if (filterKey === 'sortBy' && value === 'relevance') {\n        optionElement.selected = true;\n      }\n      control.appendChild(optionElement);\n    });\n  }\n\n  private populateDatalistControl(control: HTMLInputElement, filterKey: string, options: any[]): void {\n      const datalistId = control.getAttribute('list');\n      if (!datalistId) return;\n\n      const datalist = document.getElementById(datalistId);\n      if (!datalist) {\n          this.log(`Datalist with id '${datalistId}' not found for input control.`, control);\n          return;\n      }\n\n      this.log(`Populating datalist '#${datalistId}' for filter '${filterKey}'`);\n      datalist.innerHTML = ''; // Clear existing options\n\n      options.forEach((option: any) => {\n          const optionElement = document.createElement('option');\n          const value = typeof option === 'object' && option.value !== undefined ? option.value : String(option);\n          \n          let displayValue = value;\n          // For locations, we want a cleaner value for the user to select.\n          if (filterKey === 'locations') {\n              const labelMatch = value.match(/^(.*?)\\s*\\(/);\n              displayValue = labelMatch ? labelMatch[1].trim() : value;\n          }\n\n          optionElement.value = displayValue;\n          datalist.appendChild(optionElement);\n      });\n  }\n}\n\n/**\n * Auto-initialize runtime when DOM is ready\n */\nfunction autoInit(): void {\n  const configElement = document.getElementById('contra-config');\n  if (!configElement) {\n    console.warn('[ContraWebflow] No config element found. Runtime not initialized.');\n    return;\n  }\n\n  try {\n    const config = JSON.parse(configElement.textContent || '{}');\n    \n    // Validate required config\n    if (!config.apiKey) {\n      console.error('[ContraWebflow] API key is required in config.');\n      return;\n    }\n    \n    const initializeRuntime = () => {\n    const runtime = new ContraWebflowRuntime(config);\n    \n    // Expose runtime globally for debugging\n    (window as any).contraRuntime = runtime;\n    \n    runtime.init().catch(error => {\n      console.error('[ContraWebflow] Runtime initialization failed:', error);\n    });\n    };\n    \n    // Use setTimeout to ensure DOM is fully ready\n    setTimeout(initializeRuntime, 100);\n    \n  } catch (error) {\n    console.error('[ContraWebflow] Failed to parse config:', error);\n  }\n}\n\n// Auto-initialize when DOM is ready with multiple fallbacks\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', autoInit);\n} else if (document.readyState === 'interactive') {\n  // DOM is ready but resources might still be loading\n  setTimeout(autoInit, 50);\n} else {\n  // DOM and resources are ready\n  autoInit();\n}\n\n// Export runtime class for manual initialization\nexport { ContraWebflowRuntime as default }; ","import type {\n  ClientConfig,\n  ExpertProfile,\n  ExpertFilters,\n  ProgramSummary,\n  ListResponse,\n  ApiResponse,\n  ErrorResponse,\n  Filter,\n  FilterListResponse\n} from '@contra/types';\n\n/**\n * Professional Contra API Client\n * Features: Caching, retry logic, error handling, request deduplication\n */\nexport class ContraClient {\n  private config: Required<ClientConfig>;\n  private cache = new Map<string, { data: any; timestamp: number; ttl: number }>();\n  private pendingRequests = new Map<string, Promise<any>>();\n  \n  // Cache TTL settings (in milliseconds)\n  private static readonly CACHE_TTL = {\n    experts: 5 * 60 * 1000,      // 5 minutes for expert lists\n    expert: 10 * 60 * 1000,     // 10 minutes for individual experts\n    program: 30 * 60 * 1000,    // 30 minutes for program info\n    filters: 60 * 60 * 1000,    // 1 hour for available filters\n  };\n\n  constructor(config: ClientConfig) {\n    this.config = {\n      baseUrl: 'https://contra.com',\n      timeout: 10000,\n      debug: false,\n      ...config,\n    };\n\n    if (this.config.debug) {\n      console.log('[ContraClient] Initialized with config:', this.config);\n    }\n  }\n\n  /**\n   * Core fetch method with retry logic and error handling\n   */\n  private async fetch<T>(\n    endpoint: string,\n    options: RequestInit = {},\n    retries = 3\n  ): Promise<T> {\n    const url = `${this.config.baseUrl}${endpoint}`;\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), this.config.timeout);\n\n    const requestOptions: RequestInit = {\n      ...options,\n      signal: controller.signal,\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': this.config.apiKey,\n        'X-API-Key': this.config.apiKey,\n        ...options.headers,\n      },\n    };\n\n    try {\n      if (this.config.debug) {\n        console.log(`[ContraClient] Fetching: ${url}`, requestOptions);\n      }\n\n      const response = await fetch(url, requestOptions);\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        // Try to parse error response\n        let errorData: ErrorResponse;\n        try {\n          errorData = await response.json();\n        } catch {\n          errorData = {\n            code: `HTTP_${response.status}`,\n            message: response.statusText || 'Unknown error'\n          };\n        }\n\n        // Retry on 5xx errors or rate limits\n        if ((response.status >= 500 || response.status === 429) && retries > 0) {\n          const delay = Math.pow(2, 3 - retries) * 1000; // Exponential backoff\n          await new Promise(resolve => setTimeout(resolve, delay));\n          return this.fetch<T>(endpoint, options, retries - 1);\n        }\n\n        throw new ContraAPIError(errorData.message, errorData.code, response.status);\n      }\n\n      const data = await response.json();\n      \n      if (this.config.debug) {\n        console.log(`[ContraClient] Response:`, data);\n      }\n\n      return data;\n\n    } catch (error) {\n      clearTimeout(timeoutId);\n      \n      if (error instanceof ContraAPIError) {\n        throw error;\n      }\n\n      if (error instanceof Error && error.name === 'AbortError') {\n        throw new ContraAPIError(`Request timeout after ${this.config.timeout}ms`, 'TIMEOUT');\n      }\n\n      // Network or other errors - retry if we have retries left\n      if (retries > 0) {\n        const delay = Math.pow(2, 3 - retries) * 1000;\n        await new Promise(resolve => setTimeout(resolve, delay));\n        return this.fetch<T>(endpoint, options, retries - 1);\n      }\n\n      throw new ContraAPIError(\n        error instanceof Error ? error.message : 'Unknown error',\n        'NETWORK_ERROR'\n      );\n    }\n  }\n\n  /**\n   * Get from cache or fetch with request deduplication\n   */\n  private async fetchWithCache<T>(\n    cacheKey: string,\n    endpoint: string,\n    ttl: number,\n    options?: RequestInit\n  ): Promise<T> {\n    // Check cache first\n    const cached = this.cache.get(cacheKey);\n    if (cached && Date.now() - cached.timestamp < cached.ttl) {\n      if (this.config.debug) {\n        console.log(`[ContraClient] Cache hit: ${cacheKey}`);\n      }\n      return cached.data;\n    }\n\n    // Check for pending request (deduplication)\n    const pendingKey = `${endpoint}${JSON.stringify(options)}`;\n    if (this.pendingRequests.has(pendingKey)) {\n      if (this.config.debug) {\n        console.log(`[ContraClient] Request deduplication: ${pendingKey}`);\n      }\n      return this.pendingRequests.get(pendingKey)!;\n    }\n\n    // Make the request\n    const requestPromise = this.fetch<T>(endpoint, options);\n    this.pendingRequests.set(pendingKey, requestPromise);\n\n    try {\n      const data = await requestPromise;\n      \n      // Cache the result\n      this.cache.set(cacheKey, {\n        data,\n        timestamp: Date.now(),\n        ttl\n      });\n\n      return data;\n    } finally {\n      this.pendingRequests.delete(pendingKey);\n    }\n  }\n\n  /**\n   * Build query string from filters\n   */\n  private buildQueryString(filters: ExpertFilters): string {\n    const params = new URLSearchParams();\n    \n    Object.entries(filters).forEach(([key, value]) => {\n      if (value != null && value !== '') {\n        if (Array.isArray(value)) {\n          params.set(key, value.join(','));\n        } else {\n          params.set(key, String(value));\n        }\n      }\n    });\n\n    const queryString = params.toString();\n    return queryString ? `?${queryString}` : '';\n  }\n\n  /**\n   * Get program information\n   */\n  async getProgram(programNid: string): Promise<ProgramSummary> {\n    const cacheKey = `program:${programNid}`;\n    const endpoint = `/public-api/programs/${programNid}`;\n    \n    const response = await this.fetchWithCache<ApiResponse<ProgramSummary>>(\n      cacheKey,\n      endpoint,\n      ContraClient.CACHE_TTL.program\n    );\n    \n    return response.data;\n  }\n\n  /**\n   * List experts with advanced filtering and caching\n   */\n  async listExperts(\n    programNid: string,\n    filters: ExpertFilters = {}\n  ): Promise<ListResponse<ExpertProfile>> {\n    const queryString = this.buildQueryString(filters);\n    const cacheKey = `experts:${programNid}:${JSON.stringify(filters)}`;\n    const endpoint = `/public-api/programs/${programNid}/experts${queryString}`;\n    \n    return this.fetchWithCache<ListResponse<ExpertProfile>>(\n      cacheKey,\n      endpoint,\n      ContraClient.CACHE_TTL.experts\n    );\n  }\n\n  /**\n   * Search experts (using the main experts endpoint with filters)\n   */\n  async searchExperts(\n    programNid: string,\n    query: string,\n    filters: ExpertFilters = {}\n  ): Promise<ListResponse<ExpertProfile>> {\n    // Search is handled by client-side filtering since API doesn't support text search\n    const experts = await this.listExperts(programNid, filters);\n    \n    // Client-side filtering for search (since API doesn't support text search)\n    if (query.trim()) {\n      const searchTerm = query.toLowerCase();\n      experts.data = experts.data.filter(expert => \n        (expert.name && expert.name.toLowerCase().includes(searchTerm)) ||\n        (expert.oneLiner && expert.oneLiner.toLowerCase().includes(searchTerm)) ||\n        (expert.skillTags && expert.skillTags.some(tag => tag && tag.toLowerCase().includes(searchTerm)))\n      );\n    }\n    \n    return experts;\n  }\n\n  /**\n   * Get available filter options for a program\n   */\n  async getFilterOptions(programNid: string): Promise<FilterListResponse> {\n    const cacheKey = `filters:${programNid}`;\n    const endpoint = `/public-api/programs/${programNid}/filters`;\n    \n    return this.fetchWithCache<FilterListResponse>(\n      cacheKey,\n      endpoint,\n      ContraClient.CACHE_TTL.filters\n    );\n  }\n\n  /**\n   * Clear cache (useful for forced refreshes)\n   */\n  clearCache(pattern?: string): void {\n    if (pattern) {\n      // Clear specific cache entries\n      for (const key of this.cache.keys()) {\n        if (key.includes(pattern)) {\n          this.cache.delete(key);\n        }\n      }\n    } else {\n      // Clear all cache\n      this.cache.clear();\n    }\n\n    if (this.config.debug) {\n      console.log(`[ContraClient] Cache cleared${pattern ? ` (pattern: ${pattern})` : ''}`);\n    }\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getCacheStats(): {\n    size: number;\n    entries: Array<{ key: string; age: number; ttl: number }>;\n  } {\n    const now = Date.now();\n    const entries = Array.from(this.cache.entries()).map(([key, value]) => ({\n      key,\n      age: now - value.timestamp,\n      ttl: value.ttl\n    }));\n\n    return {\n      size: this.cache.size,\n      entries\n    };\n  }\n}\n\n/**\n * Custom error class for API errors\n */\nexport class ContraAPIError extends Error {\n  constructor(\n    message: string,\n    public code: string,\n    public status?: number\n  ) {\n    super(message);\n    this.name = 'ContraAPIError';\n  }\n}\n\n/**\n * Utility functions\n */\nexport const utils = {\n  /**\n   * Format hourly rate with proper handling of null values\n   */\n  formatRate(rate: number | null): string {\n    return rate ? `$${rate}/hr` : 'Rate on request';\n  },\n\n  /**\n   * Generate star rating HTML\n   */\n  renderStars(rating: number): string {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = (rating % 1) >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    let html = '';\n    \n    // Full stars\n    for (let i = 0; i < fullStars; i++) {\n      html += `<svg class=\"star star-full\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"#FFD700\">\n        <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>\n      </svg>`;\n    }\n    \n    // Half star\n    if (hasHalfStar) {\n      html += `<svg class=\"star star-half\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\n        <defs>\n          <linearGradient id=\"half-${rating}\">\n            <stop offset=\"50%\" stop-color=\"#FFD700\"/>\n            <stop offset=\"50%\" stop-color=\"#E5E5E5\"/>\n          </linearGradient>\n        </defs>\n        <path fill=\"url(#half-${rating})\" d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>\n      </svg>`;\n    }\n    \n    // Empty stars\n    for (let i = 0; i < emptyStars; i++) {\n      html += `<svg class=\"star star-empty\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"#E5E5E5\">\n        <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>\n      </svg>`;\n    }\n    \n    return html;\n  },\n\n  /**\n   * Debounce function for search inputs\n   */\n  debounce<T extends (...args: any[]) => any>(\n    func: T,\n    wait: number\n  ): (...args: Parameters<T>) => void {\n    let timeout: NodeJS.Timeout;\n    return (...args: Parameters<T>) => {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => func(...args), wait);\n    };\n  },\n\n  /**\n   * Throttle function for scroll events\n   */\n  throttle<T extends (...args: any[]) => any>(\n    func: T,\n    limit: number\n  ): (...args: Parameters<T>) => void {\n    let inThrottle: boolean;\n    return (...args: Parameters<T>) => {\n      if (!inThrottle) {\n        func(...args);\n        inThrottle = true;\n        setTimeout(() => inThrottle = false, limit);\n      }\n    };\n  }\n}; "],"mappings":"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","names":["runtime_exports","__export","ContraWebflowRuntime","_ContraClient","config","endpoint","options","retries","url","controller","timeoutId","requestOptions","response","errorData","delay","resolve","ContraAPIError","data","error","cacheKey","ttl","cached","pendingKey","requestPromise","filters","params","key","value","queryString","programNid","query","experts","searchTerm","expert","tag","pattern","now","entries","ContraClient","message","code","status","utils","rate","rating","fullStars","hasHalfStar","emptyStars","html","i","func","wait","timeout","args","limit","inThrottle","ATTR_PREFIX","ATTRS","RuntimeState","listId","updates","state","ContraWebflowRuntime","config","f","listElements","programFilters","listElement","programId","error","template","initialFilters","limit","button","action","targetListId","e","append","emptyElement","filters","response","newExperts","allExperts","experts","card","fragment","expert","expertCard","element","fieldName","format","value","displayValue","d","rating","fullStars","hasHalfStar","emptyStars","starsHtml","i","textElement","url","mediaType","parent","mediaElement","urlLower","isVideo","ext","isCloudinaryVideo","originalElement","video","posterUrl","fallbackImg","img","placeholder","videoUrl","from","to","attr","existingStyle","container","repeatType","maxItems","tag","items","item","itemElement","showWhen","hideWhen","shouldShow","condition","parts","field","restOfCondition","expertValue","result","numValue","expertStr","valueStr","showEmpty","loadMoreButton","btn","hasMore","control","filterKey","newFilters","processedValue","v","apiKey","filterControls","debounceTime","handler","debouncedHandler","eventType","func","delay","timeoutId","args","name","selector","option","show","loadingElement","errorElement","target","eventName","detail","event","message","data","labels","targetList","filterDef","options","optionElement","label","labelMatch","datalistId","datalist","autoInit","configElement","runtime"]}
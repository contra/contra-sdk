{"version":3,"sources":["../src/runtime.ts"],"names":["ATTR_PREFIX","ATTRS","RuntimeState","programId","updates","state","pageNumber","experts","oldestPage","loading","ContraWebflowRuntime","config","ContraClient","allContainers","containers","container","error","containerId","timeout","element","paginationMode","limit","filterControls","control","filterKey","filterType","eventType","button","action","target","e","isPageNavigation","response","offset","currentPage","totalPages","hasNextPage","hasPreviousPage","isLoadMore","allExperts","filters","totalCount","template","targetContainer","expertGrid","card","expert","expertCard","fieldName","format","value","displayValue","utils","rating","fullStars","hasHalfStar","emptyStars","starsHtml","i","textElement","url","mediaType","parent","mediaElement","urlLower","isVideo","ext","isCloudinaryVideo","originalElement","video","posterUrl","fallbackImg","img","placeholder","videoUrl","from","to","attr","existingStyle","repeatType","maxItems","tag","items","item","itemElement","showWhen","hideWhen","shouldShow","condition","parts","field","expertValue","result","restOfCondition","numValue","expertStr","valueStr","emptyElement","pageSize","activeFilters","_key","key","_target","currentOffset","nextOffset","prevOffset","lastPageOffset","errorText","loadMoreButtons","btnElement","prevButtons","nextButtons","firstButtons","lastButtons","paginationSections","section","loadedCount","paginationControls","indicator","newExperts","fragment","name","selector","v","option","type","newFilters","processedValue","currentArray","event","show","loadingElement","errorElement","eventName","detail","message","args","autoInit","configElement","runtime"],"mappings":"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","file":"index.js","sourcesContent":["import { ContraClient, utils } from '@contra/client';\nimport type {\n  ExpertProfile,\n  ExpertFilters,\n  FilterChangeEvent,\n  ExpertLoadEvent,\n  ErrorEvent,\n  ExpertField\n} from '@contra/types';\n\n/**\n * Webflow Runtime for Contra Experts\n * Features: Performance optimization, filtering, error handling, loading states\n */\n\n// Configuration interface\ninterface RuntimeConfig {\n  apiKey: string;\n  program?: string;  // Program ID from config\n  debug?: boolean;\n  loadingClass?: string;\n  errorClass?: string;\n  emptyClass?: string;\n  autoReload?: boolean;\n  debounceDelay?: number;\n  maxRetries?: number;\n  \n  // Pagination Configuration\n  paginationMode?: 'traditional' | 'infinite' | 'hybrid';\n  infiniteScrollThreshold?: number;        // Pixels from bottom to trigger load\n  preloadNextPage?: boolean;              // Preload next page for performance\n  maxCachedPages?: number;                // Max pages to keep in memory\n  smoothScrollBehavior?: 'auto' | 'smooth';\n  loadMoreText?: string;                  // Custom \"Load More\" button text\n  \n  // Video configuration\n  videoAutoplay?: boolean;\n  videoHoverPlay?: boolean;\n  videoMuted?: boolean;\n  videoLoop?: boolean;\n  videoControls?: boolean;\n}\n\n// Attribute constants\nconst ATTR_PREFIX = 'data-contra-';\nconst ATTRS = {\n  // Core attributes\n  program: 'program',\n  template: 'template',\n  loading: 'loading',\n  error: 'error',\n  empty: 'empty',\n  \n  // Field binding\n  field: 'field',\n  format: 'format',\n  \n  // Repeating elements\n  repeat: 'repeat',\n  max: 'max',\n  \n  // Filter controls\n  filter: 'filter',\n  filterType: 'filter-type',\n  \n  // Filter attributes\n  available: 'available',\n  \n  // Sorting and pagination\n  sort: 'sort',\n  page: 'page',\n  limit: 'limit',\n  \n  // Pagination mode and controls\n  paginationMode: 'pagination-mode',\n  infiniteLoading: 'infinite-loading',\n  paginationInfo: 'pagination-info',\n  \n  // UI states\n  showWhen: 'show-when',\n  hideWhen: 'hide-when',\n  \n  // Actions\n  action: 'action',\n  target: 'target'\n} as const;\n\n// State management\nclass RuntimeState {\n  private states = new Map<string, {\n    filters: ExpertFilters;\n    experts: ExpertProfile[];\n    loading: boolean;\n    error: Error | null;\n    currentPage: number;\n    totalCount: number;\n    // Advanced pagination state\n    cachedPages: Map<number, ExpertProfile[]>;\n    loadingPages: Set<number>;\n    hasNextPage: boolean;\n    hasPreviousPage: boolean;\n    isInfiniteLoading: boolean;\n    lastScrollPosition: number;\n    paginationMode: 'traditional' | 'infinite' | 'hybrid';\n    programId: string;\n  }>();\n\n  getState(programId: string) {\n    if (!this.states.has(programId)) {\n      this.states.set(programId, {\n        filters: {},\n        experts: [],\n        loading: false,\n        error: null,\n        currentPage: 1,\n        totalCount: 0,\n        // Advanced pagination defaults\n        cachedPages: new Map(),\n        loadingPages: new Set(),\n        hasNextPage: false,\n        hasPreviousPage: false,\n        isInfiniteLoading: false,\n        lastScrollPosition: 0,\n        paginationMode: 'traditional',\n        programId: ''\n      });\n    }\n    return this.states.get(programId)!;\n  }\n\n  updateState(programId: string, updates: Partial<ReturnType<RuntimeState['getState']>>) {\n    const state = this.getState(programId);\n    Object.assign(state, updates);\n    this.states.set(programId, state);\n  }\n\n  // Advanced pagination helpers\n  cachePage(programId: string, pageNumber: number, experts: ExpertProfile[]) {\n    const state = this.getState(programId);\n    state.cachedPages.set(pageNumber, experts);\n    \n    // Implement LRU cache cleanup\n    if (state.cachedPages.size > 5) { // maxCachedPages from config\n      const oldestPage = Math.min(...state.cachedPages.keys());\n      state.cachedPages.delete(oldestPage);\n    }\n  }\n\n  getCachedPage(programId: string, pageNumber: number): ExpertProfile[] | null {\n    const state = this.getState(programId);\n    return state.cachedPages.get(pageNumber) || null;\n  }\n\n  setPageLoading(programId: string, pageNumber: number, loading: boolean) {\n    const state = this.getState(programId);\n    if (loading) {\n      state.loadingPages.add(pageNumber);\n    } else {\n      state.loadingPages.delete(pageNumber);\n    }\n  }\n\n  isPageLoading(programId: string, pageNumber: number): boolean {\n    const state = this.getState(programId);\n    return state.loadingPages.has(pageNumber);\n  }\n}\n\n/**\n * Main Runtime Class\n */\nexport class ContraWebflowRuntime {\n  private client: ContraClient;\n  private config: Required<RuntimeConfig>;\n  private state = new RuntimeState();\n  private debouncedReload: Map<string, () => void> = new Map();\n\n  constructor(config: RuntimeConfig) {\n    this.config = {\n      debug: false,\n      program: '',  // Default empty program\n      loadingClass: 'loading',\n      errorClass: 'error',\n      emptyClass: 'empty',\n      autoReload: true,\n      debounceDelay: 300,\n      maxRetries: 3,\n      // Pagination Configuration defaults\n      paginationMode: 'traditional',\n      infiniteScrollThreshold: 500,\n      preloadNextPage: true,\n      maxCachedPages: 5,\n      smoothScrollBehavior: 'auto',\n      loadMoreText: 'Load More',\n      // Video configuration defaults\n      videoAutoplay: false,      // No autoplay by default (better UX)\n      videoHoverPlay: true,       // Hover to play by default\n      videoMuted: true,           // Muted for autoplay compatibility\n      videoLoop: true,            // Loop videos\n      videoControls: false,       // No controls for cleaner look\n      ...config\n    };\n\n    this.client = new ContraClient({\n      apiKey: this.config.apiKey,\n      debug: this.config.debug\n    });\n\n    this.log('Runtime initialized', this.config);\n  }\n\n  /**\n   * Initialize the runtime and find all expert containers\n   */\n  async init(): Promise<void> {\n    this.log('Initializing runtime...');\n\n    try {\n      // Find all expert containers\n      const allContainers = this.findExpertContainers();\n      // Filter out already initialized containers\n      const containers = allContainers.filter(container => \n        !container.hasAttribute('data-contra-initialized')\n      );\n      \n      this.log(`Found ${containers.length} uninitialised expert containers (${allContainers.length} total)`);\n\n      // Initialize each container\n      for (const container of containers) {\n        await this.initContainer(container);\n      }\n\n      this.log('Runtime initialization complete');\n    } catch (error) {\n      this.log('Runtime initialization failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize a single expert container\n   */\n  private async initContainer(container: Element): Promise<void> {\n    // Get program ID from config\n    const programId = this.config.program;\n    if (!programId) {\n      this.log('No program ID found in config', container);\n      return;\n    }\n\n    // Create simple container identifier\n    const containers = document.querySelectorAll('[data-contra-limit], [data-contra-pagination]');\n    const containerIndex = Array.from(containers).indexOf(container);\n    const containerId = `container-${containerIndex}`;\n\n    this.log(`Initializing container ${containerId} for program: ${programId}`);\n\n    try {\n      // Setup container state\n      this.setupContainer(container, containerId, programId);\n      \n      // Wire up filter controls\n      this.wireFilterControls(container, containerId);\n      \n      // Wire up action buttons\n      this.wireActionButtons(container, containerId);\n      \n      // Setup debounced reload for this container\n      this.setupDebouncedReload(containerId);\n      \n      // Load initial data\n      await this.loadExperts(container, containerId);\n\n    } catch (error) {\n      this.log(`Failed to initialize container ${containerId}`, error);\n      this.showError(container, error as Error);\n    }\n  }\n\n  /**\n   * Setup debounced reload for a container\n   */\n  private setupDebouncedReload(containerId: string): void {\n    let timeout: NodeJS.Timeout;\n    this.debouncedReload.set(containerId, () => {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        const container = document.querySelector(`[data-container-id=\"${containerId}\"]`);\n        if (container) {\n          this.loadExperts(container as Element, containerId);\n        }\n      }, this.config.debounceDelay);\n    });\n  }\n\n  /**\n   * Setup container with initial state and classes\n   */\n  private setupContainer(container: Element, containerId: string, programId: string): void {\n    const element = container as HTMLElement;\n    \n    // Add runtime classes and identifier\n    element.classList.add('contra-runtime');\n    element.setAttribute('data-contra-initialized', 'true');\n    element.setAttribute('data-container-id', containerId);\n    \n    // Parse pagination mode and settings\n    const paginationMode = this.getAttr(container, 'pagination') || 'traditional';\n    const limit = parseInt(this.getAttr(container, 'limit') || '20');\n    \n    // Initialize container state\n    this.state.updateState(containerId, { \n      filters: { limit, offset: 0 },\n      paginationMode: paginationMode as 'traditional' | 'infinite',\n      experts: [],\n      loading: false,\n      error: null,\n      currentPage: 1,\n      totalCount: 0,\n      hasNextPage: false,\n      hasPreviousPage: false,\n      cachedPages: new Map(),\n      loadingPages: new Set(),\n      isInfiniteLoading: false,\n      lastScrollPosition: 0,\n      programId: programId\n    });\n    \n    this.log(`Container ${containerId} setup complete:`, { paginationMode, limit });\n  }\n\n  /**\n   * Wire up filter controls to auto-update\n   */\n  private wireFilterControls(container: Element, containerId: string): void {\n    const filterControls = this.querySelectorAll(container, `[${ATTR_PREFIX}${ATTRS.filter}]`);\n    \n    this.log(`Found ${filterControls.length} filter controls for container: ${containerId}`);\n\n    filterControls.forEach(control => {\n      const filterKey = this.getAttr(control, ATTRS.filter);\n      const filterType = this.getAttr(control, ATTRS.filterType) || 'replace';\n      \n      if (!filterKey) return;\n\n      // Add event listeners based on control type\n      if (control instanceof HTMLInputElement) {\n        const eventType = control.type === 'range' || control.type === 'number' ? 'input' : 'change';\n        \n        control.addEventListener(eventType, () => {\n          this.updateFilter(containerId, filterKey, this.getControlValue(control), filterType);\n          if (this.config.autoReload) {\n            this.debouncedReload.get(containerId)?.();\n          }\n        });\n        \n      } else if (control instanceof HTMLSelectElement) {\n        control.addEventListener('change', () => {\n          this.updateFilter(containerId, filterKey, this.getControlValue(control), filterType);\n          if (this.config.autoReload) {\n            this.debouncedReload.get(containerId)?.();\n          }\n        });\n      }\n      \n      this.log(`Wired filter control: ${filterKey} (${filterType})`, control);\n    });\n  }\n\n  /**\n   * Wire up action buttons (pagination, sorting, etc.)\n   */\n  private wireActionButtons(container: Element, containerId: string): void {\n    const actionButtons = this.querySelectorAll(container, `[${ATTR_PREFIX}${ATTRS.action}]`);\n    \n    actionButtons.forEach(button => {\n      const action = this.getAttr(button, ATTRS.action);\n      const target = this.getAttr(button, ATTRS.target);\n      \n      if (!action) return;\n\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.handleAction(containerId, action, target, button);\n      });\n    });\n  }\n\n  /**\n   * Load experts for a container with proper pagination handling\n   */\n  private async loadExperts(container: Element, containerId: string, isPageNavigation = false): Promise<void> {\n    const state = this.state.getState(containerId);\n    const programId = state.programId;\n    \n    this.log(`Loading experts for container: ${containerId}, program: ${programId}`, state.filters);\n\n    try {\n      // Show loading state\n      this.showLoading(container, true);\n      this.state.updateState(containerId, { loading: true, error: null });\n\n      // Fetch experts from API\n      const response = await this.client.listExperts(programId, state.filters);\n      \n      this.log(`Loaded ${response.data.length} experts`, response);\n\n      // Update pagination state based on mode\n      if (state.paginationMode === 'traditional') {\n        this.handleTraditionalPaginationResponse(containerId, container, response);\n      } else {\n        this.handleInfinitePaginationResponse(containerId, container, response);\n      }\n\n    } catch (error) {\n      this.log(`Failed to load experts for container: ${containerId}`, error);\n      \n      this.state.updateState(containerId, { \n        loading: false, \n        error: error as Error \n      });\n      \n      this.showError(container, error as Error);\n      \n      // Dispatch error event\n      this.dispatchEvent(container, 'expertsError', {\n        error: error as Error,\n        context: `Loading experts for container ${containerId}`\n      } as ErrorEvent);\n    } finally {\n      this.showLoading(container, false);\n    }\n  }\n\n  /**\n   * Handle traditional pagination response (page-based navigation)\n   */\n  private handleTraditionalPaginationResponse(\n    containerId: string, \n    container: Element, \n    response: { data: ExpertProfile[], totalCount: number }\n  ): void {\n    const state = this.state.getState(containerId);\n    \n    // Calculate pagination metadata\n    const limit = state.filters.limit || 20;\n    const offset = state.filters.offset || 0;\n    const currentPage = Math.floor(offset / limit) + 1;\n    const totalPages = Math.ceil(response.totalCount / limit);\n    const hasNextPage = currentPage < totalPages;\n    const hasPreviousPage = currentPage > 1;\n\n    // Update state\n    this.state.updateState(containerId, {\n      experts: response.data,\n      totalCount: response.totalCount,\n      currentPage: currentPage,\n      hasNextPage: hasNextPage,\n      hasPreviousPage: hasPreviousPage,\n      loading: false\n    });\n\n    // Cache the page\n    this.state.cachePage(containerId, currentPage, response.data);\n\n    // Render experts (replace mode for traditional pagination)\n    this.renderExperts(container, response.data);\n    \n    // Update UI\n    this.updateUIStates(container, containerId);\n    this.updatePaginationControls(container, containerId);\n    \n    // Dispatch event\n    this.dispatchEvent(container, 'expertsLoaded', {\n      experts: response.data,\n      totalCount: response.totalCount,\n      filters: state.filters,\n      page: currentPage,\n      totalPages: totalPages,\n      hasNextPage: hasNextPage,\n      hasPreviousPage: hasPreviousPage,\n      paginationMode: 'traditional'\n    } as ExpertLoadEvent);\n\n    this.log(`Traditional pagination: Page ${currentPage}/${totalPages}, ${response.data.length} experts loaded`);\n  }\n\n  /**\n   * Handle infinite pagination response (cumulative loading)\n   */\n  private handleInfinitePaginationResponse(\n    containerId: string, \n    container: Element, \n    response: { data: ExpertProfile[], totalCount: number }\n  ): void {\n    const state = this.state.getState(containerId);\n    const isLoadMore = state.experts.length > 0;\n    \n    // For infinite loading, append to existing experts\n    const allExperts = isLoadMore ? [...state.experts, ...response.data] : response.data;\n    const hasNextPage = allExperts.length < response.totalCount;\n    \n    // Update state\n    this.state.updateState(containerId, {\n      experts: allExperts,\n      totalCount: response.totalCount,\n      hasNextPage: hasNextPage,\n      hasPreviousPage: false, // Not applicable for infinite scroll\n      loading: false,\n      isInfiniteLoading: false\n    });\n\n    // Render experts (append mode for infinite loading)\n    if (isLoadMore) {\n      this.renderNewExperts(container, response.data);\n    } else {\n      this.renderExperts(container, response.data);\n    }\n    \n    // Update UI\n    this.updateUIStates(container, containerId);\n    this.updatePaginationControls(container, containerId);\n    \n    // Dispatch event\n    this.dispatchEvent(container, 'expertsLoaded', {\n      experts: response.data,\n      totalExperts: allExperts,\n      totalCount: response.totalCount,\n      filters: state.filters,\n      hasNextPage: hasNextPage,\n      isLoadMore: isLoadMore,\n      paginationMode: 'infinite'\n    } as ExpertLoadEvent);\n\n    this.log(`Infinite pagination: ${allExperts.length}/${response.totalCount} experts loaded`);\n  }\n\n  /**\n   * Calculate current page from filters\n   */\n  private calculateCurrentPage(filters: ExpertFilters): number {\n    const limit = filters.limit || 20;\n    const offset = filters.offset || 0;\n    return Math.floor(offset / limit) + 1;\n  }\n\n  /**\n   * Update pagination state consistently\n   */\n  private updatePaginationState(\n    programId: string, \n    experts: ExpertProfile[], \n    totalCount: number, \n    filters: ExpertFilters\n  ): void {\n    const limit = filters.limit || 20;\n    const offset = filters.offset || 0;\n    const currentPage = Math.floor(offset / limit) + 1;\n    const totalPages = Math.ceil(totalCount / limit);\n    \n    this.state.updateState(programId, {\n      experts: experts,\n      totalCount: totalCount,\n      currentPage: currentPage,\n      hasNextPage: currentPage < totalPages,\n      hasPreviousPage: currentPage > 1,\n      loading: false\n    });\n  }\n\n  /**\n   * Render experts into the container\n   */\n  private renderExperts(container: Element, experts: ExpertProfile[]): void {\n    // Look for template in the container or its expert-grid child\n    let template = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    let targetContainer = container;\n    \n    // If template not found directly, look in expert-grid child\n    if (!template) {\n      const expertGrid = this.querySelector(container, '.expert-grid');\n      if (expertGrid) {\n        template = this.querySelector(expertGrid, `[${ATTR_PREFIX}${ATTRS.template}]`);\n        targetContainer = expertGrid;\n      }\n    }\n    \n    if (!template) {\n      this.log('No template found in container or expert-grid', container);\n      return;\n    }\n\n    // Clear existing expert cards (only remove cards that were previously rendered)\n    // Keep template, state elements, filters, pagination, and other controls\n    const existingCards = this.querySelectorAll(targetContainer, '.expert-card:not([data-contra-template])');\n    existingCards.forEach(card => card.remove());\n\n    // Render expert cards\n    experts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert);\n      targetContainer.appendChild(expertCard);\n    });\n\n    this.log(`Rendered ${experts.length} expert cards in`, targetContainer);\n  }\n\n  /**\n   * Populate expert card from template\n   */\n  private populateExpertCard(template: Element, expert: ExpertProfile): Element {\n    const card = template.cloneNode(true) as Element;\n    \n    // Remove template attribute and show the card\n    card.removeAttribute(`${ATTR_PREFIX}${ATTRS.template}`);\n    (card as HTMLElement).style.display = '';\n\n    // Populate field bindings\n    this.populateFields(card, expert);\n    \n    // Handle repeating elements (projects, social links)\n    this.populateRepeatingElements(card, expert);\n    \n    // Handle conditional display\n    this.handleConditionalDisplay(card, expert);\n\n    return card;\n  }\n\n  /**\n   * Populate data fields in the card\n   */\n  private populateFields(card: Element, expert: ExpertProfile): void {\n    const fieldElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.field}]`);\n    \n    fieldElements.forEach(element => {\n      const fieldName = this.getAttr(element, ATTRS.field) as ExpertField;\n      const format = this.getAttr(element, ATTRS.format);\n      \n      if (!fieldName || !(fieldName in expert)) return;\n\n      const value = expert[fieldName];\n      this.setElementValue(element, value, format);\n    });\n\n    // Handle star ratings\n    const starsElements = this.querySelectorAll(card, '[data-contra-stars]');\n    starsElements.forEach(element => {\n      if (expert.averageReviewScore) {\n        this.renderStarRating(element, expert.averageReviewScore);\n      }\n    });\n  }\n\n  /**\n   * Set element value with proper formatting\n   */\n  private setElementValue(element: Element, value: any, format?: string | null): void {\n    if (value == null || value === '') return;\n\n    // Media type detection and handling\n    if (this.isMediaField(element) && typeof value === 'string' && value.trim()) {\n      this.setMediaValue(element, value);\n      return;\n    }\n\n    if (element instanceof HTMLAnchorElement) {\n      element.href = String(value);\n      if (!element.textContent?.trim()) {\n        element.textContent = String(value);\n      }\n    } else if (element instanceof HTMLInputElement) {\n      element.value = String(value);\n    } else if (element instanceof HTMLImageElement) {\n      // Regular image handling for avatars and other images\n      element.src = String(value);\n      element.alt = element.alt || 'Image';\n    } else {\n      // Text content with formatting\n      let displayValue = String(value);\n      \n      if (format) {\n        switch (format) {\n          case 'currency':\n            displayValue = typeof value === 'number' ? `$${value}` : displayValue;\n            break;\n          case 'rate':\n            displayValue = utils.formatRate(typeof value === 'number' ? value : null);\n            break;\n          case 'rating':\n            // Format rating to one decimal place (5.0, 4.9, etc.)\n            displayValue = typeof value === 'number' ? value.toFixed(1) : displayValue;\n            break;\n          case 'earnings':\n            // Format earnings like $25k+\n            if (typeof value === 'number') {\n              if (value >= 1000000) {\n                displayValue = `$${Math.floor(value / 1000000)}M+`;\n              } else if (value >= 1000) {\n                displayValue = `$${Math.floor(value / 1000)}k+`;\n              } else {\n                displayValue = `$${value}`;\n              }\n            }\n            break;\n          case 'number':\n            displayValue = typeof value === 'number' ? value.toLocaleString() : displayValue;\n            break;\n          case 'truncate':\n            displayValue = displayValue.length > 100 ? displayValue.substring(0, 97) + '...' : displayValue;\n            break;\n          case 'boolean':\n            displayValue = value ? 'Yes' : 'No';\n            break;\n          case 'availability':\n            displayValue = value ? 'Available' : 'Not Available';\n            break;\n        }\n      }\n      \n      element.textContent = displayValue;\n    }\n  }\n\n  /**\n   * Star rating rendering with optional text display\n   */\n  private renderStarRating(element: Element, rating: number): void {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    let starsHtml = '';\n    \n    // Full stars\n    for (let i = 0; i < fullStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-full\">★</span>';\n    }\n    \n    // Half star\n    if (hasHalfStar) {\n      starsHtml += '<span class=\"contra-star contra-star-half\">★</span>';\n    }\n    \n    // Empty stars\n    for (let i = 0; i < emptyStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-empty\">☆</span>';\n    }\n    \n    element.innerHTML = starsHtml;\n    \n    // Also update any rating text elements in the same card\n    const card = element.closest('[data-contra-template]') || element.closest('.expert-card');\n    if (card) {\n      const ratingTextElements = this.querySelectorAll(card, '[data-contra-rating-text]');\n      ratingTextElements.forEach(textElement => {\n        textElement.textContent = rating.toFixed(1);\n      });\n    }\n  }\n\n  /**\n   * Media type detection and element handling\n   */\n  private isMediaField(element: Element): boolean {\n    const field = this.getAttr(element, ATTRS.field);\n    // Only apply advanced media handling to project cover URLs, not avatars\n    return field === 'coverUrl';\n  }\n\n  /**\n   * Media value setting with automatic type detection\n   */\n  private setMediaValue(element: Element, url: string): void {\n    const mediaType = this.detectMediaType(url);\n    const parent = element.parentElement;\n    \n    if (!parent) {\n      this.log('Media element has no parent for replacement', element);\n      return;\n    }\n\n    // Remove existing media element\n    element.remove();\n\n    // Create appropriate media element\n    let mediaElement: HTMLElement;\n    \n    switch (mediaType) {\n      case 'video':\n        mediaElement = this.createVideoElement(url, element);\n        break;\n      case 'image':\n      default:\n        mediaElement = this.createImageElement(url, element);\n        break;\n    }\n\n    // Preserve classes and attributes from original element\n    this.transferAttributes(element, mediaElement);\n    \n    // Insert new media element\n    parent.appendChild(mediaElement);\n    \n    this.log(`Created ${mediaType} element for URL: ${url}`);\n  }\n\n  /**\n   * Detect media type from URL\n   */\n  private detectMediaType(url: string): 'image' | 'video' {\n    if (!url || typeof url !== 'string') {\n      this.log('Invalid URL provided to detectMediaType:', url);\n      return 'image';\n    }\n    \n    const urlLower = url.toLowerCase();\n    \n    // Video formats\n    const videoExtensions = ['.mp4', '.webm', '.mov', '.avi', '.mkv', '.ogg'];\n    const isVideo = videoExtensions.some(ext => urlLower.includes(ext));\n    \n    // Special handling for Cloudinary video URLs\n    const isCloudinaryVideo = urlLower.includes('cloudinary.com/') && urlLower.includes('/video/');\n    \n    return (isVideo || isCloudinaryVideo) ? 'video' : 'image';\n  }\n\n  /**\n   * Create video element with fallback\n   */\n  private createVideoElement(url: string, originalElement: Element): HTMLVideoElement {\n    const video = document.createElement('video');\n    \n    // Video attributes\n    video.src = url;\n    video.muted = this.config.videoMuted;\n    video.loop = this.config.videoLoop;\n    video.playsInline = true;\n    video.preload = 'metadata';\n    video.controls = this.config.videoControls;\n    \n    // Maintain aspect ratio and object-fit from original\n    video.style.width = '100%';\n    video.style.height = '100%';\n    video.style.objectFit = 'cover';\n    video.style.borderRadius = 'inherit';\n    \n    // Autoplay configuration\n    if (this.config.videoAutoplay) {\n      video.autoplay = true;\n      video.setAttribute('autoplay', '');\n    }\n    \n    // Error handling with fallback to poster or placeholder\n    video.onerror = () => {\n      this.log(`Video failed to load: ${url}`);\n      // Try to extract a thumbnail from Cloudinary video URL\n      const posterUrl = this.extractVideoThumbnail(url);\n      if (posterUrl) {\n        const fallbackImg = this.createImageElement(posterUrl, originalElement);\n        video.parentElement?.replaceChild(fallbackImg, video);\n      } else {\n        // Show placeholder\n        video.style.background = '#f3f4f6';\n        video.style.position = 'relative';\n        video.innerHTML = '<div style=\"position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);color:#9ca3af;font-size:12px;\">Video unavailable</div>';\n      }\n    };\n\n    // Hover-to-play functionality (if enabled and not autoplay)\n    if (this.config.videoHoverPlay && !this.config.videoAutoplay) {\n      video.addEventListener('mouseenter', () => {\n        video.currentTime = 0;\n        video.play().catch(() => {\n          // Ignore play errors (browser policies)\n        });\n      });\n\n      video.addEventListener('mouseleave', () => {\n        video.pause();\n        video.currentTime = 0;\n      });\n    }\n\n    return video;\n  }\n\n  /**\n   * Create image element with error handling\n   */\n  private createImageElement(url: string, originalElement: Element): HTMLImageElement {\n    const img = document.createElement('img');\n    \n    img.src = url;\n    img.alt = originalElement.getAttribute('alt') || 'Media content';\n    img.loading = 'lazy';\n    \n    // Maintain styling\n    img.style.width = '100%';\n    img.style.height = '100%';\n    img.style.objectFit = 'cover';\n    img.style.borderRadius = 'inherit';\n    \n    // Error handling\n    img.onerror = () => {\n      this.log(`Image failed to load: ${url}`);\n      img.style.background = '#f3f4f6';\n      img.style.opacity = '0.5';\n      img.alt = 'Image unavailable';\n      \n      // Add broken image icon\n      img.style.position = 'relative';\n      const placeholder = document.createElement('div');\n      placeholder.style.cssText = `\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        color: #9ca3af;\n        font-size: 12px;\n        text-align: center;\n      `;\n      placeholder.textContent = '🖼️ Image unavailable';\n      img.parentElement?.appendChild(placeholder);\n    };\n\n    return img;\n  }\n\n  /**\n   * Extract video thumbnail from Cloudinary URL\n   */\n  private extractVideoThumbnail(videoUrl: string): string | null {\n    if (videoUrl.includes('cloudinary.com/') && videoUrl.includes('/video/')) {\n      // Convert video URL to image thumbnail\n      return videoUrl\n        .replace('/video/', '/image/')\n        .replace(/\\.(mp4|webm|mov|avi|mkv)$/i, '.jpg')\n        .replace('fl_progressive', 'f_auto,q_auto,c_fill');\n    }\n    return null;\n  }\n\n  /**\n   * Transfer attributes and classes from old element to new\n   */\n  private transferAttributes(from: Element, to: HTMLElement): void {\n    // Transfer classes\n    if (from.className) {\n      to.className = from.className;\n    }\n    \n    // Transfer data attributes (except contra-field)\n    Array.from(from.attributes).forEach(attr => {\n      if (attr.name.startsWith('data-') && attr.name !== `${ATTR_PREFIX}${ATTRS.field}`) {\n        to.setAttribute(attr.name, attr.value);\n      }\n    });\n    \n    // Transfer style\n    if (from.getAttribute('style')) {\n      const existingStyle = to.getAttribute('style') || '';\n      to.setAttribute('style', existingStyle + '; ' + from.getAttribute('style'));\n    }\n  }\n\n  /**\n   * Handle repeating elements (projects, social links)\n   */\n  private populateRepeatingElements(card: Element, expert: ExpertProfile): void {\n    const repeatElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.repeat}]`);\n    \n    repeatElements.forEach(container => {\n      const repeatType = this.getAttr(container, ATTRS.repeat);\n      const maxItems = parseInt(this.getAttr(container, ATTRS.max) || '10');\n      \n      if (repeatType === 'projects' && expert.projects) {\n        this.populateRepeatingContainer(container, expert.projects.slice(0, maxItems));\n      } else if (repeatType === 'socialLinks' && expert.socialLinks) {\n        this.populateRepeatingContainer(container, expert.socialLinks.slice(0, maxItems));\n      } else if (repeatType === 'skillTags' && expert.skillTags) {\n        this.populateRepeatingContainer(container, expert.skillTags.slice(0, maxItems).map((tag: string) => ({ name: tag })));\n      }\n    });\n  }\n\n  /**\n   * Populate a repeating container with items\n   */\n  private populateRepeatingContainer(container: Element, items: any[]): void {\n    const template = container.firstElementChild;\n    if (!template) return;\n\n    // Clear existing items\n    container.innerHTML = '';\n    \n    // Create items from template\n    items.forEach(item => {\n      const itemElement = template.cloneNode(true) as Element;\n      this.populateFields(itemElement, item);\n      container.appendChild(itemElement);\n    });\n    \n    // Hide container if no items\n    if (items.length === 0) {\n      (container as HTMLElement).style.display = 'none';\n    }\n  }\n\n  /**\n   * Handle conditional display based on data\n   */\n  private handleConditionalDisplay(card: Element, expert: ExpertProfile): void {\n    const conditionalElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.showWhen}], [${ATTR_PREFIX}${ATTRS.hideWhen}]`);\n    \n    conditionalElements.forEach(element => {\n      const showWhen = this.getAttr(element, ATTRS.showWhen);\n      const hideWhen = this.getAttr(element, ATTRS.hideWhen);\n      \n      let shouldShow = true;\n      \n      if (showWhen) {\n        shouldShow = this.evaluateCondition(expert, showWhen);\n      }\n      \n      if (hideWhen) {\n        shouldShow = shouldShow && !this.evaluateCondition(expert, hideWhen);\n      }\n      \n      (element as HTMLElement).style.display = shouldShow ? '' : 'none';\n    });\n  }\n\n  /**\n   * Evaluate a condition against expert data\n   */\n  private evaluateCondition(expert: ExpertProfile, condition: string): boolean {\n    if (!condition || typeof condition !== 'string') {\n      this.log('Invalid condition provided:', condition);\n      return false;\n    }\n    \n    const parts = condition.split(':');\n    const field = parts[0] as keyof ExpertProfile;\n    const expertValue = expert[field];\n\n    // Handle existence check (e.g., \"skillTags\" or \"projects\")\n    if (parts.length === 1) {\n      if (expertValue == null) return false;\n      \n      if (Array.isArray(expertValue)) {\n        const result = expertValue.length > 0;\n        this.log(`Existence check on array '${field}': length is ${expertValue.length}, result: ${result}`);\n        return result;\n      }\n      \n      const result = !!expertValue;\n      this.log(`Existence check on field '${field}': value is ${expertValue}, result: ${result}`);\n      return result;\n    }\n    \n    if (expertValue == null) {\n      this.log(`Field '${field}' is null/undefined, condition fails`);\n      return false;\n    }\n    \n    const restOfCondition = parts.slice(1).join(':'); // Handle colons in values\n    this.log(`Evaluating condition: ${field} (${expertValue}, type: ${typeof expertValue}) against ${restOfCondition}`);\n    \n    // Check for comparison operators\n    if (restOfCondition.startsWith('>=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) >= Number(value);\n      this.log(`Comparison: ${expertValue} >= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) <= Number(value);\n      this.log(`Comparison: ${expertValue} <= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('>')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) > Number(value);\n      this.log(`Comparison: ${expertValue} > ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) < Number(value);\n      this.log(`Comparison: ${expertValue} < ${value} = ${result}`);\n      return result;\n    } else {\n      // Direct value comparison with type-aware handling\n      let result = false;\n      \n      // Handle boolean fields specially\n      if (typeof expertValue === 'boolean') {\n        // Convert string condition to boolean for comparison\n        if (restOfCondition.toLowerCase() === 'true') {\n          result = expertValue === true;\n        } else if (restOfCondition.toLowerCase() === 'false') {\n          result = expertValue === false;\n        } else {\n          result = false;\n        }\n        this.log(`Boolean comparison: ${expertValue} === ${restOfCondition.toLowerCase() === 'true'} = ${result}`);\n      } else if (typeof expertValue === 'number') {\n        // Handle numeric comparisons\n        const numValue = Number(restOfCondition);\n        result = !isNaN(numValue) && expertValue === numValue;\n        this.log(`Number comparison: ${expertValue} === ${numValue} = ${result}`);\n      } else {\n        // String comparison (case-insensitive)\n        const expertStr = String(expertValue);\n        const valueStr = String(restOfCondition);\n        result = expertStr.toLowerCase() === valueStr.toLowerCase();\n        this.log(`String comparison: '${expertStr}' === '${valueStr}' = ${result}`);\n      }\n      \n      return result;\n    }\n  }\n\n  /**\n   * Update UI states based on current data\n   */\n  private updateUIStates(container: Element, programId: string): void {\n    const state = this.state.getState(programId);\n    \n    // Show/hide empty state\n    const emptyElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (emptyElement) {\n      (emptyElement as HTMLElement).style.display = state.experts.length === 0 ? '' : 'none';\n    }\n    \n    // Update pagination info\n    const paginationElements = this.querySelectorAll(container, '[data-contra-pagination-info]');\n    paginationElements.forEach(element => {\n      const { currentPage, totalCount } = state;\n      const pageSize = state.filters.limit || 20;\n      const totalPages = Math.ceil(totalCount / pageSize);\n      \n      element.textContent = `Page ${currentPage} of ${totalPages} (${totalCount} total)`;\n    });\n    \n    // Update filter summaries\n    const filterSummaries = this.querySelectorAll(container, '[data-contra-filter-summary]');\n    filterSummaries.forEach(element => {\n      const activeFilters = Object.entries(state.filters)\n        .filter(([_key, value]) => value != null && value !== '')\n        .map(([key, value]) => `${key}: ${value}`)\n        .join(', ');\n      \n      element.textContent = activeFilters || 'No filters applied';\n    });\n  }\n\n  /**\n   * Handle action buttons with proper pagination logic\n   */\n  private handleAction(containerId: string, action: string, _target?: string | null, button?: Element): void {\n    const state = this.state.getState(containerId);\n    const container = document.querySelector(`[data-container-id=\"${containerId}\"]`);\n    \n    if (!container) {\n      this.log(`Container not found: ${containerId}`);\n      return;\n    }\n\n    // Show button feedback\n    if (button && button instanceof HTMLButtonElement) {\n      button.disabled = true;\n    }\n    \n    const limit = state.filters.limit || 20;\n    const currentOffset = state.filters.offset || 0;\n    \n    switch (action) {\n      case 'next-page':\n        if (state.paginationMode === 'traditional') {\n          const nextOffset = currentOffset + limit;\n          if (nextOffset < state.totalCount) {\n            this.updateFilter(containerId, 'offset', nextOffset);\n            this.loadExperts(container as Element, containerId, true);\n          }\n        } else {\n          // For infinite mode, use load more functionality\n          this.loadMoreExperts(container as Element, containerId);\n        }\n        break;\n        \n      case 'prev-page':\n        if (state.paginationMode === 'traditional') {\n          const prevOffset = Math.max(0, currentOffset - limit);\n          this.updateFilter(containerId, 'offset', prevOffset);\n          this.loadExperts(container as Element, containerId, true);\n        }\n        break;\n        \n      case 'first-page':\n        if (state.paginationMode === 'traditional') {\n          this.updateFilter(containerId, 'offset', 0);\n          this.loadExperts(container as Element, containerId, true);\n        }\n        break;\n        \n      case 'last-page':\n        if (state.paginationMode === 'traditional') {\n          const totalPages = Math.ceil(state.totalCount / limit);\n          const lastPageOffset = (totalPages - 1) * limit;\n          this.updateFilter(containerId, 'offset', lastPageOffset);\n          this.loadExperts(container as Element, containerId, true);\n        }\n        break;\n        \n      case 'load-more':\n        // Handle load more for infinite/hybrid modes\n        this.loadMoreExperts(container as Element, containerId).finally(() => {\n          if (button && button instanceof HTMLButtonElement) {\n            button.disabled = false;\n          }\n        });\n        return; // Exit early to avoid re-enabling button\n        \n      case 'reload':\n        // Clear cache and reload\n        this.state.updateState(containerId, { cachedPages: new Map() });\n        this.loadExperts(container as Element, containerId);\n        break;\n    }\n    \n    // Re-enable button after action completes\n    if (button && button instanceof HTMLButtonElement && action !== 'load-more') {\n      setTimeout(() => {\n        button.disabled = false;\n      }, 100);\n    }\n  }\n\n  /**\n   * Load more experts for infinite scroll mode\n   */\n  private async loadMoreExperts(container: Element, programId: string): Promise<void> {\n    const state = this.state.getState(programId);\n    \n    // Only allow load more for infinite/hybrid modes\n    if (state.paginationMode === 'traditional') {\n      this.log('Load more not supported in traditional pagination mode');\n      return;\n    }\n    \n    const limit = state.filters.limit || 20;\n    \n    // Calculate next offset based on currently loaded experts\n    const currentOffset = state.experts.length;\n    \n    this.log(`Loading more experts: currentOffset=${currentOffset}, limit=${limit}`);\n\n    try {\n      this.state.updateState(programId, { isInfiniteLoading: true });\n      this.updateLoadMoreButtonState(container, programId, true);\n\n      // Fetch next batch using current expert count as offset\n      const response = await this.client.listExperts(programId, {\n        ...state.filters,\n        offset: currentOffset,\n        limit: limit\n      });\n\n      this.log(`Loaded ${response.data.length} more experts from offset ${currentOffset}`);\n\n      // Handle the response using the infinite pagination handler\n      this.handleInfinitePaginationResponse(programId, container, response);\n\n    } catch (error) {\n      this.log(`Failed to load more experts`, error);\n      this.state.updateState(programId, { isInfiniteLoading: false });\n      \n      // Show error in load more button\n      this.updateLoadMoreButtonState(container, programId, false, 'Error loading more');\n      \n      setTimeout(() => {\n        this.updateLoadMoreButtonState(container, programId, false);\n      }, 3000);\n    } finally {\n      this.updateLoadMoreButtonState(container, programId, false);\n    }\n  }\n\n  /**\n   * Update load more button state\n   */\n  private updateLoadMoreButtonState(container: Element, programId: string, loading: boolean, errorText?: string): void {\n    const loadMoreButtons = this.querySelectorAll(container, '[data-contra-action=\"load-more\"]');\n    const state = this.state.getState(programId);\n    \n    loadMoreButtons.forEach(button => {\n      const btnElement = button as HTMLButtonElement;\n      \n      if (errorText) {\n        btnElement.textContent = errorText;\n        btnElement.disabled = true;\n        btnElement.classList.add('error');\n        return;\n      }\n      \n      btnElement.classList.remove('error');\n      \n      if (loading) {\n        btnElement.textContent = 'Loading...';\n        btnElement.disabled = true;\n        btnElement.classList.add('loading');\n      } else {\n        btnElement.classList.remove('loading');\n        const hasMore = state.experts.length < state.totalCount;\n        \n        if (hasMore) {\n          btnElement.textContent = this.config.loadMoreText;\n          btnElement.disabled = false;\n        } else {\n          btnElement.textContent = 'All experts loaded';\n          btnElement.disabled = true;\n          btnElement.classList.add('disabled');\n        }\n      }\n    });\n  }\n\n  /**\n   * Load next page for infinite scroll\n   */\n  private async loadNextPageInfinite(container: Element, programId: string): Promise<void> {\n    // Use the unified loadMoreExperts method\n    return this.loadMoreExperts(container, programId);\n  }\n\n  /**\n   * Update pagination control states based on current mode and state\n   */\n  private updatePaginationControls(container: Element, programId: string): void {\n    const state = this.state.getState(programId);\n    const limit = state.filters.limit || 20;\n    const totalPages = Math.ceil(state.totalCount / limit);\n    \n    if (state.paginationMode === 'traditional') {\n      this.updateTraditionalPaginationControls(container, state, totalPages);\n    } else {\n      this.updateInfinitePaginationControls(container, state);\n    }\n\n    this.log(`Pagination controls updated: mode=${state.paginationMode}, page=${state.currentPage}/${totalPages}, hasNext=${state.hasNextPage}`);\n  }\n\n  /**\n   * Update traditional pagination controls (Previous/Next buttons, page numbers)\n   */\n  private updateTraditionalPaginationControls(container: Element, state: any, totalPages: number): void {\n    // Update navigation buttons\n    const prevButtons = this.querySelectorAll(container, '[data-contra-action=\"prev-page\"]');\n    const nextButtons = this.querySelectorAll(container, '[data-contra-action=\"next-page\"]');\n    const firstButtons = this.querySelectorAll(container, '[data-contra-action=\"first-page\"]');\n    const lastButtons = this.querySelectorAll(container, '[data-contra-action=\"last-page\"]');\n\n    // Previous page buttons\n    prevButtons.forEach(button => {\n      const btnElement = button as HTMLButtonElement;\n      btnElement.disabled = !state.hasPreviousPage;\n      btnElement.classList.toggle('disabled', !state.hasPreviousPage);\n    });\n\n    // Next page buttons\n    nextButtons.forEach(button => {\n      const btnElement = button as HTMLButtonElement;\n      btnElement.disabled = !state.hasNextPage;\n      btnElement.classList.toggle('disabled', !state.hasNextPage);\n    });\n\n    // First page buttons\n    firstButtons.forEach(button => {\n      const btnElement = button as HTMLButtonElement;\n      btnElement.disabled = state.currentPage <= 1;\n      btnElement.classList.toggle('disabled', state.currentPage <= 1);\n    });\n\n    // Last page buttons\n    lastButtons.forEach(button => {\n      const btnElement = button as HTMLButtonElement;\n      btnElement.disabled = state.currentPage >= totalPages;\n      btnElement.classList.toggle('disabled', state.currentPage >= totalPages);\n    });\n\n    // Update pagination info elements\n    const paginationInfoElements = this.querySelectorAll(container, '[data-contra-pagination-info]');\n    paginationInfoElements.forEach(element => {\n      if (state.totalCount > 0) {\n        element.textContent = `Page ${state.currentPage} of ${totalPages} (${state.totalCount} total experts)`;\n      } else {\n        element.textContent = 'No experts found.';\n      }\n    });\n\n    // --- FIX: Show pagination controls if there are ANY results, not just if there's more than one page.\n    const paginationSections = this.querySelectorAll(container, '.pagination-section');\n    this.log(`Updating pagination visibility. Total Pages: ${totalPages}, Total Count: ${state.totalCount}`);\n    paginationSections.forEach(section => {\n      // The old logic `totalPages > 1` was hiding the controls undesirably.\n      // The new logic shows the controls as long as there's something to show.\n      (section as HTMLElement).style.display = state.totalCount > 0 ? '' : 'none';\n    });\n  }\n\n  /**\n   * Update infinite pagination controls (Load More button)\n   */\n  private updateInfinitePaginationControls(container: Element, state: any): void {\n    // Update load more buttons\n    this.updateLoadMoreButtonState(container, state.programId || 'default', state.isInfiniteLoading);\n\n    // Update pagination info elements for infinite mode\n    const paginationInfoElements = this.querySelectorAll(container, '[data-contra-pagination-info]');\n    paginationInfoElements.forEach(element => {\n      const loadedCount = state.experts.length;\n      const totalCount = state.totalCount;\n      element.textContent = `Showing ${loadedCount} of ${totalCount} experts`;\n    });\n\n    // Hide traditional pagination controls in infinite mode\n    const paginationControls = container.querySelector('.pagination-controls');\n    if (paginationControls) {\n      (paginationControls as HTMLElement).style.display = 'none';\n    }\n  }\n\n  /**\n   * Update infinite loading state\n   */\n  private updateInfiniteLoadingState(container: Element, loading: boolean): void {\n    const loadingIndicators = this.querySelectorAll(container, '[data-contra-infinite-loading]');\n    \n    loadingIndicators.forEach(indicator => {\n      (indicator as HTMLElement).style.display = loading ? '' : 'none';\n    });\n  }\n\n  /**\n   * Render new experts for infinite scroll (append mode)\n   */\n  private renderNewExperts(container: Element, newExperts: ExpertProfile[]): void {\n    // Look for template in the container or its expert-grid child\n    let template = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    let targetContainer = container;\n    \n    // If template not found directly, look in expert-grid child\n    if (!template) {\n      const expertGrid = this.querySelector(container, '.expert-grid');\n      if (expertGrid) {\n        template = this.querySelector(expertGrid, `[${ATTR_PREFIX}${ATTRS.template}]`);\n        targetContainer = expertGrid;\n      }\n    }\n    \n    if (!template) {\n      this.log('No template found for rendering new experts', container);\n      return;\n    }\n\n    // Create a document fragment for efficient DOM manipulation\n    const fragment = document.createDocumentFragment();\n\n    newExperts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert);\n      fragment.appendChild(expertCard);\n    });\n\n    // Append all new cards at once\n    targetContainer.appendChild(fragment);\n\n    this.log(`Rendered ${newExperts.length} new expert cards for load more`);\n  }\n\n  // ... (utility methods continue below)\n\n  /**\n   * Utility Methods\n   */\n  private getAttr(element: Element, name: string): string | null {\n    return element.getAttribute(`${ATTR_PREFIX}${name}`);\n  }\n\n  private querySelector(element: Element, selector: string): Element | null {\n    return element.querySelector(selector);\n  }\n\n  private querySelectorAll(element: Element, selector: string): Element[] {\n    return Array.from(element.querySelectorAll(selector));\n  }\n\n  private findExpertContainers(): Element[] {\n    this.log('Looking for expert containers...');\n    \n    // A container is DEFINED by having a limit or pagination attribute.\n    // This is the most reliable way to find the top-level component boundaries.\n    const selector = `[${ATTR_PREFIX}${ATTRS.limit}], [${ATTR_PREFIX}${ATTRS.paginationMode}]`;\n    const containers = Array.from(document.querySelectorAll(selector));\n    \n    this.log(`Found ${containers.length} containers using selector: ${selector}`, containers);\n    return containers;\n  }\n\n  private parseFiltersFromElement(element: Element): ExpertFilters {\n    const filters: ExpertFilters = {};\n    \n    // Parse filter attributes\n    const filterMap = {\n      'available': 'available',\n      'languages': 'languages', \n      'location': 'location',\n      'min-rate': 'minRate',\n      'max-rate': 'maxRate',\n      'sort': 'sortBy',\n      'limit': 'limit',\n      'offset': 'offset'\n    };\n\n    Object.entries(filterMap).forEach(([attr, filterKey]) => {\n      const value = this.getAttr(element, attr);\n      if (value != null) {\n        if (filterKey === 'available') {\n          (filters as any)[filterKey] = value === 'true';\n        } else if (filterKey === 'languages') {\n          (filters as any)[filterKey] = value.split(',').map(v => v.trim());\n        } else if (['minRate', 'maxRate', 'limit', 'offset'].includes(filterKey)) {\n          (filters as any)[filterKey] = parseInt(value);\n        } else {\n          (filters as any)[filterKey] = value;\n        }\n      }\n    });\n\n    // Ensure offset defaults to 0 if not specified\n    if (filters.offset === undefined) {\n      filters.offset = 0;\n    }\n\n    return filters;\n  }\n\n  private getControlValue(control: HTMLInputElement | HTMLSelectElement): any {\n    if (control instanceof HTMLInputElement) {\n      switch (control.type) {\n        case 'checkbox':\n          return control.checked;\n        case 'number':\n        case 'range':\n          return control.valueAsNumber;\n        default:\n          return control.value;\n      }\n    } else if (control instanceof HTMLSelectElement) {\n      if (control.multiple) {\n        return Array.from(control.selectedOptions).map(option => option.value);\n      }\n      return control.value;\n    }\n    return null;\n  }\n\n  private updateFilter(programId: string, filterKey: string, value: any, type: string = 'replace'): void {\n    const state = this.state.getState(programId);\n    const newFilters = { ...state.filters };\n\n    // Handle special cases for filter value conversion to match OpenAPI spec (expects strings)\n    let processedValue: string | number | undefined = value;\n    \n    // Convert all values to strings, unless they are numbers for limit/offset.\n    // Handle empty/null values by setting them to undefined so they are omitted from the request.\n    if (value === null || value === '') {\n      processedValue = undefined;\n    } else if (typeof value === 'boolean') {\n      processedValue = String(value); // \"true\" or \"false\"\n    } else if (typeof value === 'number' && !['limit', 'offset', 'minRate', 'maxRate'].includes(filterKey)) {\n      processedValue = String(value);\n    }\n\n    if (type === 'append' && Array.isArray(newFilters[filterKey as keyof ExpertFilters])) {\n      const currentArray = newFilters[filterKey as keyof ExpertFilters] as any[];\n      (newFilters[filterKey as keyof ExpertFilters] as any) = [...currentArray, processedValue];\n    } else {\n      (newFilters as any)[filterKey] = processedValue;\n    }\n\n    // Reset offset to 0 when any filter changes (except offset itself)\n    // This ensures we start from the beginning when filters change\n    if (filterKey !== 'offset') {\n      newFilters.offset = 0;\n    }\n\n    // Remove keys with undefined values\n    Object.keys(newFilters).forEach(key => {\n      if ((newFilters as any)[key] === undefined) {\n        delete (newFilters as any)[key];\n      }\n    });\n\n    this.state.updateState(programId, { filters: newFilters });\n    \n    this.log(`Filter updated: ${filterKey} = ${processedValue} (final filters: `, newFilters, ')');\n    \n    // Dispatch filter change event\n    const event: FilterChangeEvent = {\n      filters: newFilters,\n      element: document.querySelector(`[data-container-id=\"${programId}\"]`) as HTMLElement\n    };\n    \n    this.dispatchEvent(document as any, 'filterChange', event);\n  }\n\n  private showLoading(container: Element, show: boolean): void {\n    const loadingElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n    if (loadingElement) {\n      (loadingElement as HTMLElement).style.display = show ? '' : 'none';\n    }\n    \n    (container as HTMLElement).classList.toggle(this.config.loadingClass, show);\n  }\n\n  private showError(container: Element, error: Error): void {\n    const errorElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.error}]`);\n    if (errorElement) {\n      errorElement.textContent = error.message;\n      (errorElement as HTMLElement).style.display = '';\n    }\n    \n    (container as HTMLElement).classList.add(this.config.errorClass);\n    this.log('Error displayed', error);\n  }\n\n  private dispatchEvent(target: Element | Document, eventName: string, detail: any): void {\n    const event = new CustomEvent(`contra:${eventName}`, { detail });\n    target.dispatchEvent(event);\n  }\n\n  private log(message: string, ...args: any[]): void {\n    if (this.config.debug) {\n      console.log(`[ContraWebflow] ${message}`, ...args);\n    }\n  }\n}\n\n/**\n * Auto-initialize runtime when DOM is ready\n */\nfunction autoInit(): void {\n  const configElement = document.getElementById('contra-config');\n  if (!configElement) {\n    console.warn('[ContraWebflow] No config element found. Runtime not initialized.');\n    return;\n  }\n\n  try {\n    const config = JSON.parse(configElement.textContent || '{}');\n    \n    // Validate required config\n    if (!config.apiKey) {\n      console.error('[ContraWebflow] API key is required in config.');\n      return;\n    }\n    \n    if (!config.program) {\n      console.error('[ContraWebflow] Program ID is required in config.');\n      return;\n    }\n    \n    // Add a small delay to ensure all DOM elements are ready\n    const initializeRuntime = () => {\n      const runtime = new ContraWebflowRuntime(config);\n      \n      // Expose runtime globally for debugging\n      (window as any).contraRuntime = runtime;\n      \n      runtime.init().catch(error => {\n        console.error('[ContraWebflow] Runtime initialization failed:', error);\n      });\n    };\n    \n    // Use setTimeout to ensure DOM is fully ready\n    setTimeout(initializeRuntime, 100);\n    \n  } catch (error) {\n    console.error('[ContraWebflow] Failed to parse config:', error);\n  }\n}\n\n// Auto-initialize when DOM is ready with multiple fallbacks\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', autoInit);\n} else if (document.readyState === 'interactive') {\n  // DOM is ready but resources might still be loading\n  setTimeout(autoInit, 50);\n} else {\n  // DOM and resources are ready\n  autoInit();\n}\n\n// Export runtime class for manual initialization\nexport { ContraWebflowRuntime as default }; "]}
{"version":3,"sources":["../src/runtime.ts"],"names":["ATTR_PREFIX","ATTRS","RuntimeState","listId","updates","state","ContraWebflowRuntime","config","ContraClient","listElements","listElement","error","programId","initialFilters","limit","button","action","targetListId","e","append","filters","response","newExperts","allExperts","experts","template","card","fragment","expert","expertCard","element","fieldName","format","value","displayValue","utils","rating","fullStars","hasHalfStar","emptyStars","starsHtml","i","textElement","url","mediaType","parent","mediaElement","urlLower","isVideo","ext","isCloudinaryVideo","originalElement","video","posterUrl","fallbackImg","img","placeholder","videoUrl","from","to","attr","existingStyle","container","repeatType","maxItems","tag","items","item","itemElement","showWhen","hideWhen","shouldShow","condition","parts","field","restOfCondition","expertValue","result","numValue","expertStr","valueStr","emptyElement","loadMoreButton","btn","hasMore","name","selector","filterKey","v","control","option","type","newFilters","processedValue","currentArray","event","show","loadingElement","errorElement","target","eventName","detail","message","args","autoInit","configElement","runtime"],"mappings":"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","file":"index.js","sourcesContent":["import { ContraClient, utils } from '@contra/client';\nimport type {\n  ExpertProfile,\n  ExpertFilters,\n  FilterChangeEvent,\n  ExpertLoadEvent,\n  ErrorEvent,\n  ExpertField\n} from '@contra/types';\n\n/**\n * Webflow Runtime for Contra Experts\n * Simplified for flexibility and predictability.\n */\n\n// Simplified configuration\ninterface RuntimeConfig {\n  apiKey: string;\n  debug?: boolean;\n  loadingClass?: string;\n  errorClass?: string;\n  emptyClass?: string;\n  // Video configuration\n  videoAutoplay?: boolean;\n  videoHoverPlay?: boolean;\n  videoMuted?: boolean;\n  videoLoop?: boolean;\n  videoControls?: boolean;\n}\n\n// Attribute constants\nconst ATTR_PREFIX = 'data-contra-';\nconst ATTRS = {\n  // Core list attributes\n  listId: 'list-id',\n  program: 'program',\n  template: 'template',\n  \n  // States\n  loading: 'loading',\n  error: 'error',\n  empty: 'empty',\n  \n  // Field binding\n  field: 'field',\n  format: 'format',\n  \n  // Repeating elements\n  repeat: 'repeat',\n  max: 'max',\n  \n  // Sorting and pagination\n  limit: 'limit',\n  \n  // Actions\n  action: 'action',\n  listTarget: 'list-target',\n\n  // Conditional display\n  showWhen: 'show-when',\n  hideWhen: 'hide-when'\n} as const;\n\n// State management is now keyed by the list's unique ID\nclass RuntimeState {\n  private states = new Map<string, {\n    filters: ExpertFilters;\n    experts: ExpertProfile[];\n    loading: boolean;\n    error: Error | null;\n    offset: number;\n    limit: number;\n    totalCount: number;\n    hasNextPage: boolean;\n  }>();\n\n  getState(listId: string) {\n    if (!this.states.has(listId)) {\n      this.states.set(listId, {\n        filters: {},\n        experts: [],\n        loading: false,\n        error: null,\n        offset: 0,\n        limit: 20, // Default limit\n        totalCount: 0,\n        hasNextPage: false\n      });\n    }\n    return this.states.get(listId)!;\n  }\n\n  updateState(listId: string, updates: Partial<ReturnType<RuntimeState['getState']>>) {\n    const state = this.getState(listId);\n    Object.assign(state, updates);\n    this.states.set(listId, state);\n  }\n}\n\n/**\n * Main Runtime Class\n */\nexport class ContraWebflowRuntime {\n  private client: ContraClient;\n  private config: Required<RuntimeConfig>;\n  private state = new RuntimeState();\n  private debouncedReload: Map<string, () => void> = new Map();\n\n  constructor(config: RuntimeConfig) {\n    this.config = {\n      debug: false,\n      loadingClass: 'loading',\n      errorClass: 'error',\n      emptyClass: 'empty',\n      // Video configuration defaults\n      videoAutoplay: false,\n      videoHoverPlay: true,\n      videoMuted: true,\n      videoLoop: true,\n      videoControls: false,\n      ...config\n    };\n\n    this.client = new ContraClient({\n      apiKey: this.config.apiKey,\n      debug: this.config.debug\n    });\n\n    this.log('Runtime initialized', this.config);\n  }\n\n  /**\n   * Initialize the runtime by finding and setting up all lists.\n   */\n  async init(): Promise<void> {\n    this.log('Initializing runtime...');\n\n    try {\n      // 1. Discover all lists on the page\n      const listElements = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.listId}]`);\n      this.log(`Found ${listElements.length} lists to initialize.`);\n\n      // 2. Initialize each list\n      for (const listElement of listElements) {\n        await this.initList(listElement);\n      }\n\n      // 3. Wire up all action buttons\n      this.wireActionButtons();\n\n      this.log('Runtime initialization complete');\n    } catch (error) {\n      this.log('Runtime initialization failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize a single expert list.\n   */\n  private async initList(listElement: Element): Promise<void> {\n    const listId = this.getAttr(listElement, ATTRS.listId);\n    const programId = this.getAttr(listElement, ATTRS.program);\n\n    if (!listId || !programId) {\n      this.log('List element is missing required attributes `data-contra-list-id` or `data-contra-program`.', listElement);\n      return;\n    }\n\n    this.log(`Initializing list: ${listId} for program: ${programId}`);\n\n    try {\n      // Mark as initialized\n      (listElement as HTMLElement).setAttribute('data-contra-initialized', 'true');\n\n      // Parse initial filters from the list element itself\n      const initialFilters = this.parseFiltersFromElement(listElement);\n      const limit = parseInt(this.getAttr(listElement, ATTRS.limit) || '20', 10);\n      \n      // Update state with these initial settings\n      this.state.updateState(listId, { \n        filters: initialFilters,\n        limit: limit,\n        offset: initialFilters.offset || 0,\n      });\n      \n      this.log(`List setup complete for: ${listId}`, { initialFilters, limit });\n      \n      // Load initial data for the list\n      await this.loadExperts(listId, programId);\n\n    } catch (error) {\n      this.log(`Failed to initialize list ${listId}`, error);\n      this.showError(listElement, error as Error);\n    }\n  }\n\n  /**\n   * Wire up all action buttons on the page.\n   */\n  private wireActionButtons(): void {\n    const actionButtons = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.action}]`);\n    \n    actionButtons.forEach(button => {\n      const action = this.getAttr(button, ATTRS.action);\n      const targetListId = this.getAttr(button, ATTRS.listTarget);\n      \n      if (!action || !targetListId) {\n        this.log('Action button is missing required `data-contra-action` or `data-contra-list-target` attributes.', button);\n        return;\n      }\n\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.handleAction(action, targetListId, button);\n      });\n    });\n  }\n\n  /**\n   * Load experts for a given list.\n   */\n  private async loadExperts(listId: string, programId: string, append = false): Promise<void> {\n    const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${listId}\"]`);\n    if (!listElement) {\n      this.log(`Cannot find list element with ID: ${listId}`);\n      return;\n    }\n\n    const state = this.state.getState(listId);\n    const filters = {\n      ...state.filters,\n      limit: state.limit,\n      offset: state.offset,\n    };\n    \n    this.log(`Loading experts for list: ${listId}`, filters);\n\n    try {\n      this.showLoading(listElement, true);\n      this.state.updateState(listId, { loading: true, error: null });\n\n      const response = await this.client.listExperts(programId, filters);\n      \n      this.log(`Loaded ${response.data.length} experts for list ${listId}`, response);\n\n      const newExperts = response.data;\n      const allExperts = append ? [...state.experts, ...newExperts] : newExperts;\n\n      // Update state\n      this.state.updateState(listId, {\n        experts: allExperts,\n        totalCount: response.totalCount,\n        offset: state.offset + newExperts.length,\n        hasNextPage: allExperts.length < response.totalCount,\n        loading: false\n      });\n\n      // Render experts\n      this.renderExperts(listElement, newExperts, append);\n      \n      // Update UI states\n      this.updateUIStates(listElement, listId);\n\n    } catch (error) {\n      this.log(`Failed to load experts for list: ${listId}`, error);\n      \n      this.state.updateState(listId, { \n        loading: false, \n        error: error as Error \n      });\n      \n      this.showError(listElement, error as Error);\n      \n    } finally {\n      this.showLoading(listElement, false);\n    }\n  }\n\n  /**\n   * Render experts into the container. Can clear or append.\n   */\n  private renderExperts(listElement: Element, experts: ExpertProfile[], append: boolean): void {\n    const template = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    if (!template) {\n      this.log('No template found in list', listElement);\n      return;\n    }\n\n    if (!append) {\n      // Clear only previously rendered expert cards\n      const existingCards = this.querySelectorAll(listElement, '.contra-rendered-item');\n      existingCards.forEach(card => card.remove());\n    }\n\n    const fragment = document.createDocumentFragment();\n    experts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert);\n      fragment.appendChild(expertCard);\n    });\n    listElement.appendChild(fragment);\n\n    this.log(`Rendered ${experts.length} expert cards into list`, listElement);\n  }\n\n  /**\n   * Populate expert card from template\n   */\n  private populateExpertCard(template: Element, expert: ExpertProfile): Element {\n    const card = template.cloneNode(true) as Element;\n    \n    // Add a marker class to identify this as a rendered card\n    card.classList.add('contra-rendered-item');\n    \n    // Remove template attribute and show the card\n    card.removeAttribute(`${ATTR_PREFIX}${ATTRS.template}`);\n    (card as HTMLElement).style.display = '';\n\n    // Populate field bindings\n    this.populateFields(card, expert);\n    \n    // Handle repeating elements (projects, social links)\n    this.populateRepeatingElements(card, expert);\n    \n    // Handle conditional display\n    this.handleConditionalDisplay(card, expert);\n\n    return card;\n  }\n\n  /**\n   * Populate data fields in the card\n   */\n  private populateFields(card: Element, expert: ExpertProfile): void {\n    const fieldElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.field}]`);\n    \n    fieldElements.forEach(element => {\n      const fieldName = this.getAttr(element, ATTRS.field) as ExpertField;\n      const format = this.getAttr(element, ATTRS.format);\n      \n      if (!fieldName || !(fieldName in expert)) return;\n\n      const value = expert[fieldName];\n      this.setElementValue(element, value, format);\n    });\n\n    // Handle star ratings\n    const starsElements = this.querySelectorAll(card, '[data-contra-stars]');\n    starsElements.forEach(element => {\n      if (expert.averageReviewScore) {\n        this.renderStarRating(element, expert.averageReviewScore);\n      }\n    });\n  }\n\n  /**\n   * Set element value with proper formatting\n   */\n  private setElementValue(element: Element, value: any, format?: string | null): void {\n    if (value == null || value === '') return;\n\n    // Media type detection and handling\n    if (this.isMediaField(element) && typeof value === 'string' && value.trim()) {\n      this.setMediaValue(element, value);\n      return;\n    }\n\n    if (element instanceof HTMLAnchorElement) {\n      element.href = String(value);\n      if (element.children.length === 0 && !element.textContent?.trim()) {\n        element.textContent = String(value);\n      }\n    } else if (element instanceof HTMLInputElement) {\n      element.value = String(value);\n    } else if (element instanceof HTMLImageElement) {\n      // Regular image handling for avatars and other images\n      element.src = String(value);\n      element.alt = element.alt || 'Image';\n    } else {\n      // Text content with formatting\n      let displayValue = String(value);\n      \n      if (format) {\n        switch (format) {\n          case 'currency':\n            displayValue = typeof value === 'number' ? `$${value}` : displayValue;\n            break;\n          case 'rate':\n            displayValue = utils.formatRate(typeof value === 'number' ? value : null);\n            break;\n          case 'rating':\n            // Format rating to one decimal place (5.0, 4.9, etc.)\n            displayValue = typeof value === 'number' ? value.toFixed(1) : displayValue;\n            break;\n          case 'earnings':\n            // Format earnings like $25k+\n            if (typeof value === 'number') {\n              if (value >= 1000000) {\n                displayValue = `$${Math.floor(value / 1000000)}M+`;\n              } else if (value >= 1000) {\n                displayValue = `$${Math.floor(value / 1000)}k+`;\n              } else {\n                displayValue = `$${value}`;\n              }\n            }\n            break;\n          case 'number':\n            displayValue = typeof value === 'number' ? value.toLocaleString() : displayValue;\n            break;\n          case 'truncate':\n            displayValue = displayValue.length > 100 ? displayValue.substring(0, 97) + '...' : displayValue;\n            break;\n          case 'boolean':\n            displayValue = value ? 'Yes' : 'No';\n            break;\n          case 'availability':\n            displayValue = value ? 'Available' : 'Not Available';\n            break;\n        }\n      }\n      \n      element.textContent = displayValue;\n    }\n  }\n\n  /**\n   * Star rating rendering with optional text display\n   */\n  private renderStarRating(element: Element, rating: number): void {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    let starsHtml = '';\n    \n    // Full stars\n    for (let i = 0; i < fullStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-full\">★</span>';\n    }\n    \n    // Half star\n    if (hasHalfStar) {\n      starsHtml += '<span class=\"contra-star contra-star-half\">★</span>';\n    }\n    \n    // Empty stars\n    for (let i = 0; i < emptyStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-empty\">☆</span>';\n    }\n    \n    element.innerHTML = starsHtml;\n    \n    // Also update any rating text elements in the same card\n    const card = element.closest('[data-contra-template]') || element.closest('.expert-card');\n    if (card) {\n      const ratingTextElements = this.querySelectorAll(card, '[data-contra-rating-text]');\n      ratingTextElements.forEach(textElement => {\n        textElement.textContent = rating.toFixed(1);\n      });\n    }\n  }\n\n  /**\n   * Media type detection and element handling\n   */\n  private isMediaField(element: Element): boolean {\n    const field = this.getAttr(element, ATTRS.field);\n    // Only apply advanced media handling to project cover URLs, not avatars\n    return field === 'coverUrl';\n  }\n\n  /**\n   * Media value setting with automatic type detection\n   */\n  private setMediaValue(element: Element, url: string): void {\n    const mediaType = this.detectMediaType(url);\n    const parent = element.parentElement;\n    \n    if (!parent) {\n      this.log('Media element has no parent for replacement', element);\n      return;\n    }\n\n    // Remove existing media element\n    element.remove();\n\n    // Create appropriate media element\n    let mediaElement: HTMLElement;\n    \n    switch (mediaType) {\n      case 'video':\n        mediaElement = this.createVideoElement(url, element);\n        break;\n      case 'image':\n      default:\n        mediaElement = this.createImageElement(url, element);\n        break;\n    }\n\n    // Preserve classes and attributes from original element\n    this.transferAttributes(element, mediaElement);\n    \n    // Insert new media element\n    parent.appendChild(mediaElement);\n    \n    this.log(`Created ${mediaType} element for URL: ${url}`);\n  }\n\n  /**\n   * Detect media type from URL\n   */\n  private detectMediaType(url: string): 'image' | 'video' {\n    if (!url || typeof url !== 'string') {\n      this.log('Invalid URL provided to detectMediaType:', url);\n      return 'image';\n    }\n    \n    const urlLower = url.toLowerCase();\n    \n    // Video formats\n    const videoExtensions = ['.mp4', '.webm', '.mov', '.avi', '.mkv', '.ogg'];\n    const isVideo = videoExtensions.some(ext => urlLower.includes(ext));\n    \n    // Special handling for Cloudinary video URLs\n    const isCloudinaryVideo = urlLower.includes('cloudinary.com/') && urlLower.includes('/video/');\n    \n    return (isVideo || isCloudinaryVideo) ? 'video' : 'image';\n  }\n\n  /**\n   * Create video element with fallback\n   */\n  private createVideoElement(url: string, originalElement: Element): HTMLVideoElement {\n    const video = document.createElement('video');\n    \n    // Video attributes\n    video.src = url;\n    video.muted = this.config.videoMuted;\n    video.loop = this.config.videoLoop;\n    video.playsInline = true;\n    video.preload = 'metadata';\n    video.controls = this.config.videoControls;\n    \n    // Maintain aspect ratio and object-fit from original\n    video.style.width = '100%';\n    video.style.height = '100%';\n    video.style.objectFit = 'cover';\n    video.style.borderRadius = 'inherit';\n    \n    // Autoplay configuration\n    if (this.config.videoAutoplay) {\n      video.autoplay = true;\n      video.setAttribute('autoplay', '');\n    }\n    \n    // Error handling with fallback to poster or placeholder\n    video.onerror = () => {\n      this.log(`Video failed to load: ${url}`);\n      // Try to extract a thumbnail from Cloudinary video URL\n      const posterUrl = this.extractVideoThumbnail(url);\n      if (posterUrl) {\n        const fallbackImg = this.createImageElement(posterUrl, originalElement);\n        video.parentElement?.replaceChild(fallbackImg, video);\n      } else {\n        // Show placeholder\n        video.style.background = '#f3f4f6';\n        video.style.position = 'relative';\n        video.innerHTML = '<div style=\"position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);color:#9ca3af;font-size:12px;\">Video unavailable</div>';\n      }\n    };\n\n    // Hover-to-play functionality (if enabled and not autoplay)\n    if (this.config.videoHoverPlay && !this.config.videoAutoplay) {\n      video.addEventListener('mouseenter', () => {\n        video.currentTime = 0;\n        video.play().catch(() => {\n          // Ignore play errors (browser policies)\n        });\n      });\n\n      video.addEventListener('mouseleave', () => {\n        video.pause();\n        video.currentTime = 0;\n      });\n    }\n\n    return video;\n  }\n\n  /**\n   * Create image element with error handling\n   */\n  private createImageElement(url: string, originalElement: Element): HTMLImageElement {\n    const img = document.createElement('img');\n    \n    img.src = url;\n    img.alt = originalElement.getAttribute('alt') || 'Media content';\n    img.loading = 'lazy';\n    \n    // Maintain styling\n    img.style.width = '100%';\n    img.style.height = '100%';\n    img.style.objectFit = 'cover';\n    img.style.borderRadius = 'inherit';\n    \n    // Error handling\n    img.onerror = () => {\n      this.log(`Image failed to load: ${url}`);\n      img.style.background = '#f3f4f6';\n      img.style.opacity = '0.5';\n      img.alt = 'Image unavailable';\n      \n      // Add broken image icon\n      img.style.position = 'relative';\n      const placeholder = document.createElement('div');\n      placeholder.style.cssText = `\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        color: #9ca3af;\n        font-size: 12px;\n        text-align: center;\n      `;\n      placeholder.textContent = '🖼️ Image unavailable';\n      img.parentElement?.appendChild(placeholder);\n    };\n\n    return img;\n  }\n\n  /**\n   * Extract video thumbnail from Cloudinary URL\n   */\n  private extractVideoThumbnail(videoUrl: string): string | null {\n    if (videoUrl.includes('cloudinary.com/') && videoUrl.includes('/video/')) {\n      // Convert video URL to image thumbnail\n      return videoUrl\n        .replace('/video/', '/image/')\n        .replace(/\\.(mp4|webm|mov|avi|mkv)$/i, '.jpg')\n        .replace('fl_progressive', 'f_auto,q_auto,c_fill');\n    }\n    return null;\n  }\n\n  /**\n   * Transfer attributes and classes from old element to new\n   */\n  private transferAttributes(from: Element, to: HTMLElement): void {\n    // Transfer classes\n    if (from.className) {\n      to.className = from.className;\n    }\n    \n    // Transfer data attributes (except contra-field)\n    Array.from(from.attributes).forEach(attr => {\n      if (attr.name.startsWith('data-') && attr.name !== `${ATTR_PREFIX}${ATTRS.field}`) {\n        to.setAttribute(attr.name, attr.value);\n      }\n    });\n    \n    // Transfer style\n    if (from.getAttribute('style')) {\n      const existingStyle = to.getAttribute('style') || '';\n      to.setAttribute('style', existingStyle + '; ' + from.getAttribute('style'));\n    }\n  }\n\n  /**\n   * Handle repeating elements (projects, social links)\n   */\n  private populateRepeatingElements(card: Element, expert: ExpertProfile): void {\n    const repeatElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.repeat}]`);\n    \n    repeatElements.forEach(container => {\n      const repeatType = this.getAttr(container, ATTRS.repeat);\n      const maxItems = parseInt(this.getAttr(container, ATTRS.max) || '10');\n      \n      if (repeatType === 'projects' && expert.projects) {\n        this.populateRepeatingContainer(container, expert.projects.slice(0, maxItems));\n      } else if (repeatType === 'socialLinks' && expert.socialLinks) {\n        this.populateRepeatingContainer(container, expert.socialLinks.slice(0, maxItems));\n      } else if (repeatType === 'skillTags' && expert.skillTags) {\n        this.populateRepeatingContainer(container, expert.skillTags.slice(0, maxItems).map((tag: string) => ({ name: tag })));\n      }\n    });\n  }\n\n  /**\n   * Populate a repeating container with items\n   */\n  private populateRepeatingContainer(container: Element, items: any[]): void {\n    const template = container.firstElementChild;\n    if (!template) return;\n\n    // Clear existing items\n    container.innerHTML = '';\n    \n    // Create items from template\n    items.forEach(item => {\n      const itemElement = template.cloneNode(true) as Element;\n      this.populateFields(itemElement, item);\n      container.appendChild(itemElement);\n    });\n    \n    // Hide container if no items\n    if (items.length === 0) {\n      (container as HTMLElement).style.display = 'none';\n    }\n  }\n\n  /**\n   * Handle conditional display based on data\n   */\n  private handleConditionalDisplay(card: Element, expert: ExpertProfile): void {\n    const conditionalElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.showWhen}], [${ATTR_PREFIX}${ATTRS.hideWhen}]`);\n    \n    conditionalElements.forEach(element => {\n      const showWhen = this.getAttr(element, ATTRS.showWhen);\n      const hideWhen = this.getAttr(element, ATTRS.hideWhen);\n      \n      let shouldShow = true;\n      \n      if (showWhen) {\n        shouldShow = this.evaluateCondition(expert, showWhen);\n      }\n      \n      if (hideWhen) {\n        shouldShow = shouldShow && !this.evaluateCondition(expert, hideWhen);\n      }\n      \n      (element as HTMLElement).style.display = shouldShow ? '' : 'none';\n    });\n  }\n\n  /**\n   * Evaluate a condition against expert data\n   */\n  private evaluateCondition(expert: ExpertProfile, condition: string): boolean {\n    if (!condition || typeof condition !== 'string') {\n      this.log('Invalid condition provided:', condition);\n      return false;\n    }\n    \n    // Parse condition: \"field:value\" or \"field:>value\" etc.\n    const parts = condition.split(':');\n    if (parts.length < 2) {\n      this.log('Invalid condition format:', condition);\n      return false;\n    }\n    \n    const field = parts[0];\n    const restOfCondition = parts.slice(1).join(':'); // Handle colons in values\n    const expertValue = (expert as any)[field];\n    \n    this.log(`Evaluating condition: ${field} (${expertValue}, type: ${typeof expertValue}) against ${restOfCondition}`);\n    \n    if (expertValue == null) {\n      this.log(`Field '${field}' is null/undefined, condition fails`);\n      return false;\n    }\n    \n    // Check for comparison operators\n    if (restOfCondition.startsWith('>=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) >= Number(value);\n      this.log(`Comparison: ${expertValue} >= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) <= Number(value);\n      this.log(`Comparison: ${expertValue} <= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('>')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) > Number(value);\n      this.log(`Comparison: ${expertValue} > ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) < Number(value);\n      this.log(`Comparison: ${expertValue} < ${value} = ${result}`);\n      return result;\n    } else {\n      // Direct value comparison with type-aware handling\n      let result = false;\n      \n      // Handle boolean fields specially\n      if (typeof expertValue === 'boolean') {\n        // Convert string condition to boolean for comparison\n        if (restOfCondition.toLowerCase() === 'true') {\n          result = expertValue === true;\n        } else if (restOfCondition.toLowerCase() === 'false') {\n          result = expertValue === false;\n        } else {\n          result = false;\n        }\n        this.log(`Boolean comparison: ${expertValue} === ${restOfCondition.toLowerCase() === 'true'} = ${result}`);\n      } else if (typeof expertValue === 'number') {\n        // Handle numeric comparisons\n        const numValue = Number(restOfCondition);\n        result = !isNaN(numValue) && expertValue === numValue;\n        this.log(`Number comparison: ${expertValue} === ${numValue} = ${result}`);\n      } else {\n        // String comparison (case-insensitive)\n        const expertStr = String(expertValue);\n        const valueStr = String(restOfCondition);\n        result = expertStr.toLowerCase() === valueStr.toLowerCase();\n        this.log(`String comparison: '${expertStr}' === '${valueStr}' = ${result}`);\n      }\n      \n      return result;\n    }\n  }\n\n  /**\n   * Update UI states based on current data for a specific list.\n   */\n  private updateUIStates(listElement: Element, listId: string): void {\n    const state = this.state.getState(listId);\n    \n    // Show/hide empty state\n    const emptyElement = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (emptyElement) {\n      (emptyElement as HTMLElement).style.display = state.experts.length === 0 && !state.loading ? '' : 'none';\n    }\n\n    // Update and control visibility of the load more button\n    const loadMoreButton = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listTarget}=\"${listId}\"]`);\n    if (loadMoreButton) {\n      const btn = loadMoreButton as HTMLButtonElement;\n      const hasMore = state.hasNextPage;\n\n      btn.style.display = hasMore ? '' : 'none';\n      btn.disabled = state.loading;\n      btn.textContent = state.loading ? 'Loading...' : 'Load More';\n    }\n  }\n\n  /**\n   * Handle action buttons (just load-more for now).\n   */\n  private handleAction(action: string, targetListId: string, button: Element): void {\n    if (action === 'load-more') {\n      const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${targetListId}\"]`);\n      const programId = this.getAttr(listElement!, ATTRS.program);\n      if (listElement && programId) {\n        this.loadExperts(targetListId, programId, true); // `true` to append\n      } else {\n        this.log(`Could not find list or program for target: ${targetListId}`);\n      }\n    }\n  }\n\n  /**\n   * Utility Methods\n   */\n  private getAttr(element: Element, name: string): string | null {\n    return element.getAttribute(`${ATTR_PREFIX}${name}`);\n  }\n\n  private querySelector(element: Element, selector: string): Element | null {\n    return element.querySelector(selector);\n  }\n\n  private querySelectorAll(element: Element, selector: string): Element[] {\n    return Array.from(element.querySelectorAll(selector));\n  }\n\n  private parseFiltersFromElement(element: Element): ExpertFilters {\n    const filters: ExpertFilters = {};\n    \n    // Parse filter attributes\n    const filterMap = {\n      'available': 'available',\n      'languages': 'languages', \n      'location': 'location',\n      'min-rate': 'minRate',\n      'max-rate': 'maxRate',\n      'sort': 'sortBy',\n      'limit': 'limit',\n      'offset': 'offset'\n    };\n\n    Object.entries(filterMap).forEach(([attr, filterKey]) => {\n      const value = this.getAttr(element, attr);\n      if (value != null) {\n        if (filterKey === 'available') {\n          (filters as any)[filterKey] = value === 'true';\n        } else if (filterKey === 'languages') {\n          (filters as any)[filterKey] = value.split(',').map(v => v.trim());\n        } else if (['minRate', 'maxRate', 'limit', 'offset'].includes(filterKey)) {\n          (filters as any)[filterKey] = parseInt(value);\n        } else {\n          (filters as any)[filterKey] = value;\n        }\n      }\n    });\n\n    // Ensure offset defaults to 0 if not specified\n    if (filters.offset === undefined) {\n      filters.offset = 0;\n    }\n\n    return filters;\n  }\n\n  private getControlValue(control: HTMLInputElement | HTMLSelectElement): any {\n    if (control instanceof HTMLInputElement) {\n      switch (control.type) {\n        case 'checkbox':\n          return control.checked;\n        case 'number':\n        case 'range':\n          return control.valueAsNumber;\n        default:\n          return control.value;\n      }\n    } else if (control instanceof HTMLSelectElement) {\n      if (control.multiple) {\n        return Array.from(control.selectedOptions).map(option => option.value);\n      }\n      return control.value;\n    }\n    return null;\n  }\n\n  private updateFilter(programId: string, filterKey: string, value: any, type: string = 'replace'): void {\n    const state = this.state.getState(programId);\n    const newFilters = { ...state.filters };\n\n    // Handle special cases for filter value conversion\n    let processedValue = value;\n    \n    if (filterKey === 'available') {\n      // Convert string values to boolean for availability filter\n      if (typeof value === 'string') {\n        if (value === 'true') {\n          processedValue = true;\n        } else if (value === 'false') {\n          processedValue = false;\n        } else if (value === '' || value === null) {\n          processedValue = undefined; // No filter\n        }\n      }\n    } else if (filterKey === 'minRate' || filterKey === 'maxRate') {\n      // Convert empty strings to undefined for rate filters\n      if (value === '' || value === null) {\n        processedValue = undefined;\n      } else {\n        processedValue = Number(value);\n      }\n    }\n\n    if (type === 'append' && Array.isArray(newFilters[filterKey as keyof ExpertFilters])) {\n      const currentArray = newFilters[filterKey as keyof ExpertFilters] as any[];\n      newFilters[filterKey as keyof ExpertFilters] = [...currentArray, processedValue] as any;\n    } else {\n      (newFilters as any)[filterKey] = processedValue;\n    }\n\n    // Reset offset to 0 when any filter changes (except offset itself)\n    // This ensures we start from the beginning when filters change\n    if (filterKey !== 'offset') {\n      newFilters.offset = 0;\n    }\n\n    this.state.updateState(programId, { filters: newFilters });\n    \n    this.log(`Filter updated: ${filterKey} = ${processedValue} (original: ${value})`);\n    \n    // Dispatch filter change event\n    const event: FilterChangeEvent = {\n      filters: newFilters,\n      element: document.querySelector(`[data-program-id=\"${programId}\"]`) as HTMLElement\n    };\n    \n    this.dispatchEvent(document as any, 'filterChange', event);\n  }\n\n  private showLoading(container: Element, show: boolean): void {\n    const loadingElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n    if (loadingElement) {\n      (loadingElement as HTMLElement).style.display = show ? '' : 'none';\n    }\n    \n    (container as HTMLElement).classList.toggle(this.config.loadingClass, show);\n  }\n\n  private showError(container: Element, error: Error): void {\n    const errorElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.error}]`);\n    if (errorElement) {\n      errorElement.textContent = error.message;\n      (errorElement as HTMLElement).style.display = '';\n    }\n    \n    (container as HTMLElement).classList.add(this.config.errorClass);\n    this.log('Error displayed', error);\n  }\n\n  private dispatchEvent(target: Element | Document, eventName: string, detail: any): void {\n    const event = new CustomEvent(`contra:${eventName}`, { detail });\n    target.dispatchEvent(event);\n  }\n\n  private log(message: string, ...args: any[]): void {\n    if (this.config.debug) {\n      console.log(`[ContraWebflow] ${message}`, ...args);\n    }\n  }\n}\n\n/**\n * Auto-initialize runtime when DOM is ready\n */\nfunction autoInit(): void {\n  const configElement = document.getElementById('contra-config');\n  if (!configElement) {\n    console.warn('[ContraWebflow] No config element found. Runtime not initialized.');\n    return;\n  }\n\n  try {\n    const config = JSON.parse(configElement.textContent || '{}');\n    \n    // Validate required config\n    if (!config.apiKey) {\n      console.error('[ContraWebflow] API key is required in config.');\n      return;\n    }\n    \n    const initializeRuntime = () => {\n      const runtime = new ContraWebflowRuntime(config);\n      \n      // Expose runtime globally for debugging\n      (window as any).contraRuntime = runtime;\n      \n      runtime.init().catch(error => {\n        console.error('[ContraWebflow] Runtime initialization failed:', error);\n      });\n    };\n    \n    // Use setTimeout to ensure DOM is fully ready\n    setTimeout(initializeRuntime, 100);\n    \n  } catch (error) {\n    console.error('[ContraWebflow] Failed to parse config:', error);\n  }\n}\n\n// Auto-initialize when DOM is ready with multiple fallbacks\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', autoInit);\n} else if (document.readyState === 'interactive') {\n  // DOM is ready but resources might still be loading\n  setTimeout(autoInit, 50);\n} else {\n  // DOM and resources are ready\n  autoInit();\n}\n\n// Export runtime class for manual initialization\nexport { ContraWebflowRuntime as default }; "]}
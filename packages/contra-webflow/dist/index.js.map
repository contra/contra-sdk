{"version":3,"sources":["../src/runtime.ts"],"names":["ATTR_PREFIX","ATTRS","RuntimeState","listId","updates","state","ContraWebflowRuntime","config","ContraClient","listElements","programFilters","listElement","programId","error","initialFilters","limit","button","action","targetListId","e","append","filters","response","newExperts","allExperts","experts","template","card","fragment","expert","expertCard","element","fieldName","format","value","displayValue","utils","rating","fullStars","hasHalfStar","emptyStars","starsHtml","i","textElement","url","mediaType","parent","mediaElement","urlLower","isVideo","ext","isCloudinaryVideo","originalElement","video","posterUrl","fallbackImg","img","placeholder","videoUrl","from","to","attr","existingStyle","container","repeatType","maxItems","tag","items","item","itemElement","showWhen","hideWhen","shouldShow","condition","parts","field","restOfCondition","expertValue","result","numValue","expertStr","valueStr","emptyElement","loadMoreButton","btn","hasMore","filterKey","newFilters","processedValue","v","filterControls","control","debounceTime","handler","debouncedHandler","eventType","func","delay","timeoutId","args","name","selector","option","show","loadingElement","errorElement","target","eventName","detail","event","message","data","labels","targetList","filterDef","f","optionElement","autoInit","configElement","runtime"],"mappings":"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","file":"index.js","sourcesContent":["import { ContraClient, utils } from '@contra/client';\nimport type {\n  ExpertProfile,\n  ExpertFilters,\n  FilterChangeEvent,\n  ExpertLoadEvent,\n  ErrorEvent,\n  ExpertField\n} from '@contra/types';\n\n/**\n * Webflow Runtime for Contra Experts\n * Simplified for flexibility and predictability.\n */\n\n// Simplified configuration\ninterface RuntimeConfig {\n  apiKey: string;\n  debug?: boolean;\n  loadingClass?: string;\n  errorClass?: string;\n  emptyClass?: string;\n  // Video configuration\n  videoAutoplay?: boolean;\n  videoHoverPlay?: boolean;\n  videoMuted?: boolean;\n  videoLoop?: boolean;\n  videoControls?: boolean;\n}\n\n// Attribute constants\nconst ATTR_PREFIX = 'data-contra-';\nconst ATTRS = {\n  // Core list attributes\n  listId: 'list-id',\n  program: 'program',\n  template: 'template',\n  \n  // States\n  loading: 'loading',\n  error: 'error',\n  empty: 'empty',\n  \n  // Field binding\n  field: 'field',\n  format: 'format',\n  \n  // Repeating elements\n  repeat: 'repeat',\n  max: 'max',\n  \n  // Sorting and pagination\n  limit: 'limit',\n  \n  // Actions\n  action: 'action',\n  listTarget: 'list-target',\n\n  // Conditional display\n  showWhen: 'show-when',\n  hideWhen: 'hide-when'\n} as const;\n\n// State management is now keyed by the list's unique ID\nclass RuntimeState {\n  private states = new Map<string, {\n    filters: ExpertFilters;\n    experts: ExpertProfile[];\n    loading: boolean;\n    error: Error | null;\n    offset: number;\n    limit: number;\n    totalCount: number;\n    hasNextPage: boolean;\n  }>();\n\n  getState(listId: string) {\n    if (!this.states.has(listId)) {\n      this.states.set(listId, {\n        filters: {},\n        experts: [],\n        loading: false,\n        error: null,\n        offset: 0,\n        limit: 20, // Default limit\n        totalCount: 0,\n        hasNextPage: false\n      });\n    }\n    return this.states.get(listId)!;\n  }\n\n  updateState(listId: string, updates: Partial<ReturnType<RuntimeState['getState']>>) {\n    const state = this.getState(listId);\n    Object.assign(state, updates);\n    this.states.set(listId, state);\n  }\n}\n\n/**\n * Main Runtime Class\n */\nexport class ContraWebflowRuntime {\n  private client: ContraClient;\n  private config: Required<RuntimeConfig>;\n  private state = new RuntimeState();\n  private debouncedReload: Map<string, () => void> = new Map();\n  private filterOptionLabels: Record<string, Record<string, string>> = {\n    sortBy: {\n      relevance: 'Relevance',\n      oldest: 'Oldest',\n      newest: 'Newest',\n      rate_asc: 'Rate (Low to High)',\n      rate_desc: 'Rate (High to Low)'\n    }\n  };\n\n  constructor(config: RuntimeConfig) {\n    this.config = {\n      debug: false,\n      loadingClass: 'loading',\n      errorClass: 'error',\n      emptyClass: 'empty',\n      // Video configuration defaults\n      videoAutoplay: false,\n      videoHoverPlay: true,\n      videoMuted: true,\n      videoLoop: true,\n      videoControls: false,\n      ...config\n    };\n\n    this.client = new ContraClient({\n      apiKey: this.config.apiKey,\n      debug: this.config.debug\n    });\n\n    this.log('Runtime initialized', this.config);\n  }\n\n  /**\n   * Initialize the runtime by finding and setting up all lists.\n   */\n  async init(): Promise<void> {\n    this.log('Initializing runtime...');\n\n    try {\n      // 1. Discover all lists and unique programs to fetch filters for\n      const listElements = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.listId}]`);\n      this.log(`Found ${listElements.length} lists to initialize.`);\n      \n      const programFilters = new Map<string, any[]>();\n      for (const listElement of listElements) {\n        const programId = this.getAttr(listElement, ATTRS.program);\n        if (programId && !programFilters.has(programId)) {\n          this.log(`Fetching filters for program: ${programId}`);\n          programFilters.set(programId, await this.getAvailableFilters(programId));\n        }\n      }\n\n      // 2. Populate all filter controls on the page once\n      this.populateAllFilterControls(programFilters);\n\n      // 3. Initialize each list\n      for (const listElement of listElements) {\n        await this.initList(listElement);\n      }\n\n      // 4. Wire up all action buttons and filter controls\n      this.wireActionButtons();\n      this.wireFilterControls();\n\n      this.log('Runtime initialization complete');\n    } catch (error) {\n      this.log('Runtime initialization failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize a single expert list.\n   */\n  private async initList(listElement: Element): Promise<void> {\n    const listId = this.getAttr(listElement, ATTRS.listId);\n    const programId = this.getAttr(listElement, ATTRS.program);\n\n    if (!listId || !programId) {\n      this.log('List element is missing required attributes `data-contra-list-id` or `data-contra-program`.', listElement);\n      return;\n    }\n\n    this.log(`Initializing list: ${listId} for program: ${programId}`);\n\n    try {\n      // Mark as initialized\n      (listElement as HTMLElement).setAttribute('data-contra-initialized', 'true');\n      \n      // Parse initial filters from the list element itself\n      const initialFilters = this.parseFiltersFromElement(listElement);\n      const limit = parseInt(this.getAttr(listElement, ATTRS.limit) || '20', 10);\n      \n      // Update state with these initial settings\n      this.state.updateState(listId, { \n      filters: initialFilters,\n        limit: limit,\n        offset: initialFilters.offset || 0,\n      });\n      \n      this.log(`List setup complete for: ${listId}`, { initialFilters, limit });\n      \n      // Load initial data for the list\n      await this.loadExperts(listId, programId);\n\n    } catch (error) {\n      this.log(`Failed to initialize list ${listId}`, error);\n      this.showError(listElement, error as Error);\n    }\n  }\n\n  /**\n   * Wire up all action buttons on the page.\n   */\n  private wireActionButtons(): void {\n    const actionButtons = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.action}]`);\n    \n    actionButtons.forEach(button => {\n      const action = this.getAttr(button, ATTRS.action);\n      const targetListId = this.getAttr(button, ATTRS.listTarget);\n      \n      if (!action || !targetListId) {\n        this.log('Action button is missing required `data-contra-action` or `data-contra-list-target` attributes.', button);\n        return;\n      }\n\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.handleAction(action, targetListId, button);\n      });\n    });\n  }\n\n  /**\n   * Load experts for a given list.\n   */\n  private async loadExperts(listId: string, programId: string, append = false): Promise<void> {\n    const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${listId}\"]`);\n    if (!listElement) {\n      this.log(`Cannot find list element with ID: ${listId}`);\n      return;\n    }\n\n    const state = this.state.getState(listId);\n    const filters = {\n      ...state.filters,\n      limit: state.limit,\n      offset: state.offset,\n    };\n    \n    this.log(`Loading experts for list: ${listId}`, filters);\n\n    try {\n      this.showLoading(listElement, true);\n      this.state.updateState(listId, { loading: true, error: null });\n\n      const response = await this.client.listExperts(programId, filters);\n      \n      this.log(`Loaded ${response.data.length} experts for list ${listId}`, response);\n\n      const newExperts = response.data;\n      const allExperts = append ? [...state.experts, ...newExperts] : newExperts;\n\n      // Update state\n      this.state.updateState(listId, {\n        experts: allExperts,\n        totalCount: response.totalCount,\n        offset: state.offset + newExperts.length,\n        hasNextPage: newExperts.length === state.limit,\n        loading: false\n      });\n\n      // Render experts\n      this.renderExperts(listElement, newExperts, append);\n      \n      // Update UI states\n      this.updateUIStates(listElement, listId);\n\n    } catch (error) {\n      this.log(`Failed to load experts for list: ${listId}`, error);\n      \n      this.state.updateState(listId, { \n        loading: false, \n        error: error as Error \n      });\n      \n      this.showError(listElement, error as Error);\n      \n    } finally {\n      this.showLoading(listElement, false);\n    }\n  }\n\n  /**\n   * Render experts into the container. Can clear or append.\n   */\n  private renderExperts(listElement: Element, experts: ExpertProfile[], append: boolean): void {\n    const template = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    if (!template) {\n      this.log('No template found in list', listElement);\n      return;\n    }\n\n    if (!append) {\n      // Clear only previously rendered expert cards\n      const existingCards = this.querySelectorAll(listElement, '.contra-rendered-item');\n    existingCards.forEach(card => card.remove());\n    }\n\n    const fragment = document.createDocumentFragment();\n    experts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert);\n      fragment.appendChild(expertCard);\n    });\n    listElement.appendChild(fragment);\n\n    this.log(`Rendered ${experts.length} expert cards into list`, listElement);\n  }\n\n  /**\n   * Populate expert card from template\n   */\n  private populateExpertCard(template: Element, expert: ExpertProfile): Element {\n    const card = template.cloneNode(true) as Element;\n    \n    // Add a marker class to identify this as a rendered card\n    card.classList.add('contra-rendered-item');\n    \n    // Remove template attribute and show the card\n    card.removeAttribute(`${ATTR_PREFIX}${ATTRS.template}`);\n    (card as HTMLElement).style.display = '';\n\n    // Populate field bindings\n    this.populateFields(card, expert);\n    \n    // Handle repeating elements (projects, social links)\n    this.populateRepeatingElements(card, expert);\n    \n    // Handle conditional display\n    this.handleConditionalDisplay(card, expert);\n\n    return card;\n  }\n\n  /**\n   * Populate data fields in the card\n   */\n  private populateFields(card: Element, expert: ExpertProfile): void {\n    const fieldElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.field}]`);\n    \n    fieldElements.forEach(element => {\n      const fieldName = this.getAttr(element, ATTRS.field) as ExpertField;\n      const format = this.getAttr(element, ATTRS.format);\n      \n      if (!fieldName || !(fieldName in expert)) return;\n\n      const value = expert[fieldName];\n      this.setElementValue(element, value, format);\n    });\n\n    // Handle star ratings\n    const starsElements = this.querySelectorAll(card, '[data-contra-stars]');\n    starsElements.forEach(element => {\n      if (expert.averageReviewScore) {\n        this.renderStarRating(element, expert.averageReviewScore);\n      }\n    });\n  }\n\n  /**\n   * Set element value with proper formatting\n   */\n  private setElementValue(element: Element, value: any, format?: string | null): void {\n    if (value == null || value === '') return;\n\n    // Media type detection and handling\n    if (this.isMediaField(element) && typeof value === 'string' && value.trim()) {\n      this.setMediaValue(element, value);\n      return;\n    }\n\n    if (element instanceof HTMLAnchorElement) {\n      element.href = String(value);\n      if (element.children.length === 0 && !element.textContent?.trim()) {\n        element.textContent = String(value);\n      }\n    } else if (element instanceof HTMLInputElement) {\n      element.value = String(value);\n    } else if (element instanceof HTMLImageElement) {\n      // Regular image handling for avatars and other images\n      element.src = String(value);\n      element.alt = element.alt || 'Image';\n    } else {\n      // Text content with formatting\n      let displayValue = String(value);\n      \n      if (format) {\n        switch (format) {\n          case 'currency':\n            displayValue = typeof value === 'number' ? `$${value}` : displayValue;\n            break;\n          case 'rate':\n            displayValue = utils.formatRate(typeof value === 'number' ? value : null);\n            break;\n          case 'rating':\n            // Format rating to one decimal place (5.0, 4.9, etc.)\n            displayValue = typeof value === 'number' ? value.toFixed(1) : displayValue;\n            break;\n          case 'earnings':\n            // Format earnings like $25k+\n            if (typeof value === 'number') {\n              if (value >= 1000000) {\n                displayValue = `$${Math.floor(value / 1000000)}M+`;\n              } else if (value >= 1000) {\n                displayValue = `$${Math.floor(value / 1000)}k+`;\n              } else {\n                displayValue = `$${value}`;\n              }\n            }\n            break;\n          case 'number':\n            displayValue = typeof value === 'number' ? value.toLocaleString() : displayValue;\n            break;\n          case 'truncate':\n            displayValue = displayValue.length > 100 ? displayValue.substring(0, 97) + '...' : displayValue;\n            break;\n          case 'boolean':\n            displayValue = value ? 'Yes' : 'No';\n            break;\n          case 'availability':\n            displayValue = value ? 'Available' : 'Not Available';\n            break;\n        }\n      }\n      \n      element.textContent = displayValue;\n    }\n  }\n\n  /**\n   * Star rating rendering with optional text display\n   */\n  private renderStarRating(element: Element, rating: number): void {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    let starsHtml = '';\n    \n    // Full stars\n    for (let i = 0; i < fullStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-full\">★</span>';\n    }\n    \n    // Half star\n    if (hasHalfStar) {\n      starsHtml += '<span class=\"contra-star contra-star-half\">★</span>';\n    }\n    \n    // Empty stars\n    for (let i = 0; i < emptyStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-empty\">☆</span>';\n    }\n    \n    element.innerHTML = starsHtml;\n    \n    // Also update any rating text elements in the same card\n    const card = element.closest('[data-contra-template]') || element.closest('.expert-card');\n    if (card) {\n      const ratingTextElements = this.querySelectorAll(card, '[data-contra-rating-text]');\n      ratingTextElements.forEach(textElement => {\n        textElement.textContent = rating.toFixed(1);\n      });\n    }\n  }\n\n  /**\n   * Media type detection and element handling\n   */\n  private isMediaField(element: Element): boolean {\n    const field = this.getAttr(element, ATTRS.field);\n    // Only apply advanced media handling to project cover URLs, not avatars\n    return field === 'coverUrl';\n  }\n\n  /**\n   * Media value setting with automatic type detection\n   */\n  private setMediaValue(element: Element, url: string): void {\n    const mediaType = this.detectMediaType(url);\n    const parent = element.parentElement;\n    \n    if (!parent) {\n      this.log('Media element has no parent for replacement', element);\n      return;\n    }\n\n    // Remove existing media element\n    element.remove();\n\n    // Create appropriate media element\n    let mediaElement: HTMLElement;\n    \n    switch (mediaType) {\n      case 'video':\n        mediaElement = this.createVideoElement(url, element);\n        break;\n      case 'image':\n      default:\n        mediaElement = this.createImageElement(url, element);\n        break;\n    }\n\n    // Preserve classes and attributes from original element\n    this.transferAttributes(element, mediaElement);\n    \n    // Insert new media element\n    parent.appendChild(mediaElement);\n    \n    this.log(`Created ${mediaType} element for URL: ${url}`);\n  }\n\n  /**\n   * Detect media type from URL\n   */\n  private detectMediaType(url: string): 'image' | 'video' {\n    if (!url || typeof url !== 'string') {\n      this.log('Invalid URL provided to detectMediaType:', url);\n      return 'image';\n    }\n    \n    const urlLower = url.toLowerCase();\n    \n    // Video formats\n    const videoExtensions = ['.mp4', '.webm', '.mov', '.avi', '.mkv', '.ogg'];\n    const isVideo = videoExtensions.some(ext => urlLower.includes(ext));\n    \n    // Special handling for Cloudinary video URLs\n    const isCloudinaryVideo = urlLower.includes('cloudinary.com/') && urlLower.includes('/video/');\n    \n    return (isVideo || isCloudinaryVideo) ? 'video' : 'image';\n  }\n\n  /**\n   * Create video element with fallback\n   */\n  private createVideoElement(url: string, originalElement: Element): HTMLVideoElement {\n    const video = document.createElement('video');\n    \n    // Video attributes\n    video.src = url;\n    video.muted = this.config.videoMuted;\n    video.loop = this.config.videoLoop;\n    video.playsInline = true;\n    video.preload = 'metadata';\n    video.controls = this.config.videoControls;\n    \n    // Maintain aspect ratio and object-fit from original\n    video.style.width = '100%';\n    video.style.height = '100%';\n    video.style.objectFit = 'cover';\n    video.style.borderRadius = 'inherit';\n    \n    // Autoplay configuration\n    if (this.config.videoAutoplay) {\n      video.autoplay = true;\n      video.setAttribute('autoplay', '');\n    }\n    \n    // Error handling with fallback to poster or placeholder\n    video.onerror = () => {\n      this.log(`Video failed to load: ${url}`);\n      // Try to extract a thumbnail from Cloudinary video URL\n      const posterUrl = this.extractVideoThumbnail(url);\n      if (posterUrl) {\n        const fallbackImg = this.createImageElement(posterUrl, originalElement);\n        video.parentElement?.replaceChild(fallbackImg, video);\n      } else {\n        // Show placeholder\n        video.style.background = '#f3f4f6';\n        video.style.position = 'relative';\n        video.innerHTML = '<div style=\"position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);color:#9ca3af;font-size:12px;\">Video unavailable</div>';\n      }\n    };\n\n    // Hover-to-play functionality (if enabled and not autoplay)\n    if (this.config.videoHoverPlay && !this.config.videoAutoplay) {\n      video.addEventListener('mouseenter', () => {\n        video.currentTime = 0;\n        video.play().catch(() => {\n          // Ignore play errors (browser policies)\n        });\n      });\n\n      video.addEventListener('mouseleave', () => {\n        video.pause();\n        video.currentTime = 0;\n      });\n    }\n\n    return video;\n  }\n\n  /**\n   * Create image element with error handling\n   */\n  private createImageElement(url: string, originalElement: Element): HTMLImageElement {\n    const img = document.createElement('img');\n    \n    img.src = url;\n    img.alt = originalElement.getAttribute('alt') || 'Media content';\n    img.loading = 'lazy';\n    \n    // Maintain styling\n    img.style.width = '100%';\n    img.style.height = '100%';\n    img.style.objectFit = 'cover';\n    img.style.borderRadius = 'inherit';\n    \n    // Error handling\n    img.onerror = () => {\n      this.log(`Image failed to load: ${url}`);\n      img.style.background = '#f3f4f6';\n      img.style.opacity = '0.5';\n      img.alt = 'Image unavailable';\n      \n      // Add broken image icon\n      img.style.position = 'relative';\n      const placeholder = document.createElement('div');\n      placeholder.style.cssText = `\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        color: #9ca3af;\n        font-size: 12px;\n        text-align: center;\n      `;\n      placeholder.textContent = '🖼️ Image unavailable';\n      img.parentElement?.appendChild(placeholder);\n    };\n\n    return img;\n  }\n\n  /**\n   * Extract video thumbnail from Cloudinary URL\n   */\n  private extractVideoThumbnail(videoUrl: string): string | null {\n    if (videoUrl.includes('cloudinary.com/') && videoUrl.includes('/video/')) {\n      // Convert video URL to image thumbnail\n      return videoUrl\n        .replace('/video/', '/image/')\n        .replace(/\\.(mp4|webm|mov|avi|mkv)$/i, '.jpg')\n        .replace('fl_progressive', 'f_auto,q_auto,c_fill');\n    }\n    return null;\n  }\n\n  /**\n   * Transfer attributes and classes from old element to new\n   */\n  private transferAttributes(from: Element, to: HTMLElement): void {\n    // Transfer classes\n    if (from.className) {\n      to.className = from.className;\n    }\n    \n    // Transfer data attributes (except contra-field)\n    Array.from(from.attributes).forEach(attr => {\n      if (attr.name.startsWith('data-') && attr.name !== `${ATTR_PREFIX}${ATTRS.field}`) {\n        to.setAttribute(attr.name, attr.value);\n      }\n    });\n    \n    // Transfer style\n    if (from.getAttribute('style')) {\n      const existingStyle = to.getAttribute('style') || '';\n      to.setAttribute('style', existingStyle + '; ' + from.getAttribute('style'));\n    }\n  }\n\n  /**\n   * Handle repeating elements (projects, social links)\n   */\n  private populateRepeatingElements(card: Element, expert: ExpertProfile): void {\n    const repeatElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.repeat}]`);\n    \n    repeatElements.forEach(container => {\n      const repeatType = this.getAttr(container, ATTRS.repeat);\n      const maxItems = parseInt(this.getAttr(container, ATTRS.max) || '10');\n      \n      if (repeatType === 'projects' && expert.projects) {\n        this.populateRepeatingContainer(container, expert.projects.slice(0, maxItems));\n      } else if (repeatType === 'socialLinks' && expert.socialLinks) {\n        this.populateRepeatingContainer(container, expert.socialLinks.slice(0, maxItems));\n      } else if (repeatType === 'skillTags' && expert.skillTags) {\n        this.populateRepeatingContainer(container, expert.skillTags.slice(0, maxItems).map((tag: string) => ({ name: tag })));\n      }\n    });\n  }\n\n  /**\n   * Populate a repeating container with items\n   */\n  private populateRepeatingContainer(container: Element, items: any[]): void {\n    const template = container.firstElementChild;\n    if (!template) return;\n\n    // Clear existing items\n    container.innerHTML = '';\n    \n    // Create items from template\n    items.forEach(item => {\n      const itemElement = template.cloneNode(true) as Element;\n      this.populateFields(itemElement, item);\n      container.appendChild(itemElement);\n    });\n    \n    // Hide container if no items\n    if (items.length === 0) {\n      (container as HTMLElement).style.display = 'none';\n    }\n  }\n\n  /**\n   * Handle conditional display based on data\n   */\n  private handleConditionalDisplay(card: Element, expert: ExpertProfile): void {\n    const conditionalElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.showWhen}], [${ATTR_PREFIX}${ATTRS.hideWhen}]`);\n    \n    conditionalElements.forEach(element => {\n      const showWhen = this.getAttr(element, ATTRS.showWhen);\n      const hideWhen = this.getAttr(element, ATTRS.hideWhen);\n      \n      let shouldShow = true;\n      \n      if (showWhen) {\n        shouldShow = this.evaluateCondition(expert, showWhen);\n      }\n      \n      if (hideWhen) {\n        shouldShow = shouldShow && !this.evaluateCondition(expert, hideWhen);\n      }\n      \n      (element as HTMLElement).style.display = shouldShow ? '' : 'none';\n    });\n  }\n\n  /**\n   * Evaluate a condition against expert data\n   */\n  private evaluateCondition(expert: ExpertProfile, condition: string): boolean {\n    if (!condition || typeof condition !== 'string') {\n      this.log('Invalid condition provided:', condition);\n      return false;\n    }\n    \n    // Parse condition: \"field:value\" or \"field:>value\" etc.\n    const parts = condition.split(':');\n    if (parts.length < 2) {\n      this.log('Invalid condition format:', condition);\n      return false;\n    }\n    \n    const field = parts[0];\n    const restOfCondition = parts.slice(1).join(':'); // Handle colons in values\n    const expertValue = (expert as any)[field];\n    \n    this.log(`Evaluating condition: ${field} (${expertValue}, type: ${typeof expertValue}) against ${restOfCondition}`);\n    \n    if (expertValue == null) {\n      this.log(`Field '${field}' is null/undefined, condition fails`);\n      return false;\n    }\n    \n    // Check for comparison operators\n    if (restOfCondition.startsWith('>=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) >= Number(value);\n      this.log(`Comparison: ${expertValue} >= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) <= Number(value);\n      this.log(`Comparison: ${expertValue} <= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('>')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) > Number(value);\n      this.log(`Comparison: ${expertValue} > ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) < Number(value);\n      this.log(`Comparison: ${expertValue} < ${value} = ${result}`);\n      return result;\n    } else {\n      // Direct value comparison with type-aware handling\n      let result = false;\n      \n      // Handle boolean fields specially\n      if (typeof expertValue === 'boolean') {\n        // Convert string condition to boolean for comparison\n        if (restOfCondition.toLowerCase() === 'true') {\n          result = expertValue === true;\n        } else if (restOfCondition.toLowerCase() === 'false') {\n          result = expertValue === false;\n        } else {\n          result = false;\n        }\n        this.log(`Boolean comparison: ${expertValue} === ${restOfCondition.toLowerCase() === 'true'} = ${result}`);\n      } else if (typeof expertValue === 'number') {\n        // Handle numeric comparisons\n        const numValue = Number(restOfCondition);\n        result = !isNaN(numValue) && expertValue === numValue;\n        this.log(`Number comparison: ${expertValue} === ${numValue} = ${result}`);\n      } else {\n        // String comparison (case-insensitive)\n        const expertStr = String(expertValue);\n        const valueStr = String(restOfCondition);\n        result = expertStr.toLowerCase() === valueStr.toLowerCase();\n        this.log(`String comparison: '${expertStr}' === '${valueStr}' = ${result}`);\n      }\n      \n      return result;\n    }\n  }\n\n  /**\n   * Update UI states based on current data for a specific list.\n   */\n  private updateUIStates(listElement: Element, listId: string): void {\n    const state = this.state.getState(listId);\n    \n    // Show/hide empty state\n    const emptyElement = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (emptyElement) {\n      (emptyElement as HTMLElement).style.display = state.experts.length === 0 && !state.loading ? '' : 'none';\n    }\n    \n    // Update and control visibility of the load more button\n    const loadMoreButton = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.action}=\"load-more\"][${ATTR_PREFIX}${ATTRS.listTarget}=\"${listId}\"]`);\n    if (loadMoreButton) {\n      const btn = loadMoreButton as HTMLButtonElement;\n      const hasMore = state.hasNextPage;\n\n      btn.style.display = hasMore ? '' : 'none';\n      btn.disabled = state.loading;\n      btn.textContent = state.loading ? 'Loading...' : 'Load More';\n    }\n  }\n\n  /**\n   * Handle action buttons (just load-more for now).\n   */\n  private handleAction(action: string, targetListId: string, button: Element): void {\n    if (action === 'load-more') {\n      const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${targetListId}\"]`);\n      const programId = this.getAttr(listElement!, ATTRS.program);\n      if (listElement && programId) {\n        this.loadExperts(targetListId, programId, true); // `true` to append\n      } else {\n        this.log(`Could not find list or program for target: ${targetListId}`);\n  }\n    }\n  }\n\n  private updateFilterAndReload(listId: string, programId: string, filterKey: string, value: any): void {\n    const state = this.state.getState(listId);\n    const newFilters = { ...state.filters };\n\n    // Process and set value\n    let processedValue = value;\n    if (filterKey === 'available') {\n      // If checkbox is checked, value is true. If unchecked, it's false.\n      // We only want to apply the filter when it's true.\n      processedValue = value ? true : undefined;\n    } else if (['minRate', 'maxRate'].includes(filterKey)) {\n      processedValue = (value === '' || value === null) ? undefined : Number(value);\n    } else if (filterKey === 'languages' && typeof value === 'string') {\n        processedValue = value.split(',').map(v => v.trim()).filter(v => v);\n        if (processedValue.length === 0) {\n            processedValue = undefined;\n        }\n    }\n\n    if (processedValue !== undefined && processedValue !== '') {\n        (newFilters as any)[filterKey] = processedValue;\n    } else {\n        delete (newFilters as any)[filterKey];\n    }\n    \n    // Reset offset and update state\n    this.state.updateState(listId, { filters: newFilters, offset: 0 });\n\n    this.log(`Filter updated for list ${listId}, reloading. New filters:`, newFilters);\n    \n    // Reload the list\n    this.loadExperts(listId, programId, false);\n  }\n\n  private wireFilterControls(): void {\n    const filterControls = this.querySelectorAll(document.body, `[data-contra-filter]`);\n    this.log(`Found ${filterControls.length} filter controls to wire.`);\n\n    filterControls.forEach(control => {\n        const filterKey = control.getAttribute('data-contra-filter');\n        const targetListId = control.getAttribute('data-contra-list-target');\n\n        if (!filterKey || !targetListId) {\n            this.log('Filter control missing required attributes: data-contra-filter or data-contra-list-target', control);\n            return;\n        }\n\n        const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}list-id=\"${targetListId}\"]`);\n        if (!listElement) return;\n        const programId = this.getAttr(listElement, ATTRS.program);\n        if (!programId) return;\n\n        const debounceTime = (control instanceof HTMLInputElement && ['text', 'search'].includes(control.type)) ? 300 : 0;\n        \n        const handler = () => {\n            const value = this.getControlValue(control as HTMLInputElement | HTMLSelectElement);\n            this.updateFilterAndReload(targetListId, programId, filterKey, value);\n        };\n        \n        const debouncedHandler = this.debounce(handler, debounceTime);\n        \n        const eventType = (control instanceof HTMLInputElement && ['text', 'search'].includes(control.type)) ? 'input' : 'change';\n        control.addEventListener(eventType, debouncedHandler);\n    });\n  }\n\n  private debounce(func: (...args: any[]) => void, delay: number): (...args: any[]) => void {\n    let timeoutId: number;\n    return (...args: any[]) => {\n        clearTimeout(timeoutId);\n        if (delay > 0) {\n            timeoutId = window.setTimeout(() => func.apply(this, args), delay);\n        } else {\n            func.apply(this, args);\n  }\n    };\n  }\n\n  /**\n   * Utility Methods\n   */\n  private getAttr(element: Element, name: string): string | null {\n    return element.getAttribute(`${ATTR_PREFIX}${name}`);\n  }\n\n  private querySelector(element: Element, selector: string): Element | null {\n    return element.querySelector(selector);\n  }\n\n  private querySelectorAll(element: Element, selector: string): Element[] {\n    return Array.from(element.querySelectorAll(selector));\n  }\n\n  private parseFiltersFromElement(element: Element): ExpertFilters {\n    const filters: ExpertFilters = {};\n    \n    // Parse filter attributes\n    const filterMap = {\n      'available': 'available',\n      'languages': 'languages', \n      'location': 'location',\n      'min-rate': 'minRate',\n      'max-rate': 'maxRate',\n      'sort': 'sortBy',\n      'limit': 'limit',\n      'offset': 'offset'\n    };\n\n    Object.entries(filterMap).forEach(([attr, filterKey]) => {\n      const value = this.getAttr(element, attr);\n      if (value != null) {\n        if (filterKey === 'available') {\n          (filters as any)[filterKey] = value === 'true';\n        } else if (filterKey === 'languages') {\n          (filters as any)[filterKey] = value.split(',').map(v => v.trim());\n        } else if (['minRate', 'maxRate', 'limit', 'offset'].includes(filterKey)) {\n          (filters as any)[filterKey] = parseInt(value);\n        } else {\n          (filters as any)[filterKey] = value;\n        }\n      }\n    });\n\n    // Ensure offset defaults to 0 if not specified\n    if (filters.offset === undefined) {\n      filters.offset = 0;\n    }\n\n    return filters;\n  }\n\n  private getControlValue(control: HTMLInputElement | HTMLSelectElement): any {\n    if (control instanceof HTMLInputElement) {\n      switch (control.type) {\n        case 'checkbox':\n          return control.checked;\n        case 'number':\n        case 'range':\n          return control.valueAsNumber;\n        default:\n          return control.value;\n      }\n    } else if (control instanceof HTMLSelectElement) {\n      if (control.multiple) {\n        return Array.from(control.selectedOptions).map(option => option.value);\n      }\n      return control.value;\n    }\n    return null;\n  }\n\n  private showLoading(container: Element, show: boolean): void {\n    const loadingElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n    if (loadingElement) {\n      (loadingElement as HTMLElement).style.display = show ? '' : 'none';\n    }\n    \n    (container as HTMLElement).classList.toggle(this.config.loadingClass, show);\n  }\n\n  private showError(container: Element, error: Error): void {\n    const errorElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.error}]`);\n    if (errorElement) {\n      errorElement.textContent = error.message;\n      (errorElement as HTMLElement).style.display = '';\n    }\n    \n    (container as HTMLElement).classList.add(this.config.errorClass);\n    this.log('Error displayed', error);\n  }\n\n  private dispatchEvent(target: Element | Document, eventName: string, detail: any): void {\n    const event = new CustomEvent(`contra:${eventName}`, { detail });\n    target.dispatchEvent(event);\n  }\n\n  private log(message: string, ...args: any[]): void {\n    if (this.config.debug) {\n      console.log(`[ContraWebflow] ${message}`, ...args);\n    }\n  }\n\n  private async getAvailableFilters(programId: string): Promise<any[]> {\n    const url = `https://contra.com/public-api/programs/${programId}/filters`;\n    this.log(`Fetching available filters for program: ${programId}`);\n    try {\n        const response = await fetch(url, {\n            headers: {\n                'X-API-Key': this.config.apiKey,\n                'Accept': 'application/json'\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Failed to fetch filters: ${response.statusText}`);\n        }\n        const data = await response.json();\n        this.log('Successfully fetched filters', data.data);\n        return data.data || [];\n    } catch (error) {\n        this.log('Error fetching available filters', error);\n        return [];\n    }\n  }\n  \n  private getFilterOptionLabel(filterKey: string, value: string): string {\n    const labels = this.filterOptionLabels[filterKey];\n    if (labels && labels[value]) {\n      return labels[value];\n    }\n    // Capitalize the first letter as a fallback\n    return value.charAt(0).toUpperCase() + value.slice(1);\n  }\n\n  private populateAllFilterControls(programFilters: Map<string, any[]>): void {\n    this.log('Populating all filter controls on the page...');\n    const allControls = this.querySelectorAll(document.body, `[data-contra-filter]`);\n\n    allControls.forEach(control => {\n      const targetListId = control.getAttribute('data-contra-list-target');\n      if (!targetListId) return;\n\n      const targetList = this.querySelector(document.body, `[data-contra-list-id=\"${targetListId}\"]`);\n      if (!targetList) return;\n\n      const programId = this.getAttr(targetList, ATTRS.program);\n      if (!programId) return;\n\n      const filters = programFilters.get(programId);\n      if (!filters) return;\n\n      const filterKey = control.getAttribute('data-contra-filter');\n      const filterDef = filters.find(f => f.name === filterKey);\n\n      if (filterDef && filterDef.options && control instanceof HTMLSelectElement) {\n        this.log(`Populating options for filter '${filterKey}' on control`, control);\n        \n        control.innerHTML = '';\n        \n        filterDef.options.forEach((option: any) => {\n          const optionElement = document.createElement('option');\n          const value = typeof option === 'object' ? option.value : String(option);\n\n          optionElement.value = value;\n          optionElement.textContent = this.getFilterOptionLabel(filterKey!, value);\n          \n          if (filterKey === 'sortBy' && value === 'relevance') {\n            optionElement.selected = true;\n          }\n\n          control.appendChild(optionElement);\n        });\n      }\n    });\n  }\n}\n\n/**\n * Auto-initialize runtime when DOM is ready\n */\nfunction autoInit(): void {\n  const configElement = document.getElementById('contra-config');\n  if (!configElement) {\n    console.warn('[ContraWebflow] No config element found. Runtime not initialized.');\n    return;\n  }\n\n  try {\n    const config = JSON.parse(configElement.textContent || '{}');\n    \n    // Validate required config\n    if (!config.apiKey) {\n      console.error('[ContraWebflow] API key is required in config.');\n      return;\n    }\n    \n    const initializeRuntime = () => {\n    const runtime = new ContraWebflowRuntime(config);\n    \n    // Expose runtime globally for debugging\n    (window as any).contraRuntime = runtime;\n    \n    runtime.init().catch(error => {\n      console.error('[ContraWebflow] Runtime initialization failed:', error);\n    });\n    };\n    \n    // Use setTimeout to ensure DOM is fully ready\n    setTimeout(initializeRuntime, 100);\n    \n  } catch (error) {\n    console.error('[ContraWebflow] Failed to parse config:', error);\n  }\n}\n\n// Auto-initialize when DOM is ready with multiple fallbacks\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', autoInit);\n} else if (document.readyState === 'interactive') {\n  // DOM is ready but resources might still be loading\n  setTimeout(autoInit, 50);\n} else {\n  // DOM and resources are ready\n  autoInit();\n}\n\n// Export runtime class for manual initialization\nexport { ContraWebflowRuntime as default }; "]}
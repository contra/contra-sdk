{"version":3,"sources":["../src/runtime.ts"],"names":["CLOUDINARY_TRANSFORM_PREFIXES","ATTR_PREFIX","ATTRS","RuntimeState","listId","updates","state","ContraWebflowRuntime","config","ContraClient","listElements","programFilters","listElement","programId","error","template","loadingEl","emptyEl","initialFilters","limit","response","newExperts","allExperts","button","action","targetListId","e","append","emptyElement","filters","experts","card","fragment","expert","expertCard","element","fieldName","format","value","mediaType","transformedUrl","displayValue","utils","rating","fullStars","hasHalfStar","emptyStars","starsHtml","i","textElement","url","parent","mediaElement","transformedVideoUrl","transformedImageUrl","urlLower","isVideo","ext","isCloudinaryVideo","originalElement","video","posterUrl","fallbackImg","playVideo","pauseVideo","img","videoElement","placeholder","videoUrl","imageUrl","from","to","attr","existingStyle","container","repeatType","maxItems","tag","items","item","itemElement","showWhen","hideWhen","shouldShow","condition","parts","field","restOfCondition","expertValue","result","numValue","expertStr","valueStr","display","loadMoreButton","btn","control","filterKey","newFilters","processedValue","v","apiKey","filterControls","debounceTime","handler","debouncedHandler","eventType","func","delay","timeoutId","args","name","selector","option","show","loadingElement","errorElement","target","eventName","detail","event","message","data","labels","targetList","filterDef","f","options","optionElement","label","labelMatch","datalistId","datalist","transformations","uploadMarker","baseUrl","path","firstPathComponent","prefix","autoInit","configElement","runtime"],"mappings":"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","file":"index.js","sourcesContent":["import { ContraClient, utils } from '@contra/client';\nimport type {\n  ExpertProfile,\n  ExpertFilters,\n  FilterChangeEvent,\n  ExpertLoadEvent,\n  ErrorEvent,\n  ExpertField\n} from '@contra/types';\n\n/**\n * Webflow Runtime for Contra Experts\n * Simplified for flexibility and predictability.\n */\n\n// Simplified configuration\ninterface RuntimeConfig {\n  apiKey: string;\n  debug?: boolean;\n  loadingClass?: string;\n  errorClass?: string;\n  emptyClass?: string;\n  // Video configuration\n  videoAutoplay?: boolean;\n  videoHoverPlay?: boolean;\n  videoMuted?: boolean;\n  videoLoop?: boolean;\n  videoControls?: boolean;\n  // Cloudinary transformations\n  imageTransformations?: string;\n  videoTransformations?: string;\n}\n\nconst CLOUDINARY_TRANSFORM_PREFIXES = [\n  'w_', 'h_', 'c_', 'f_', 'q_', 'fl_', 'vc_', 'b_', 'e_', 'o_', 'a_', 'dpr_', 'ar_'\n];\n\n// Attribute constants\nconst ATTR_PREFIX = 'data-contra-';\nconst ATTRS = {\n  // Core list attributes\n  listId: 'list-id',\n  program: 'program',\n  template: 'template',\n  \n  // States\n  loading: 'loading',\n  error: 'error',\n  empty: 'empty',\n  \n  // Field binding\n  field: 'field',\n  format: 'format',\n  \n  // Repeating elements\n  repeat: 'repeat',\n  max: 'max',\n  \n  // Sorting and pagination\n  limit: 'limit',\n  \n  // Actions\n  action: 'action',\n  listTarget: 'list-target',\n\n  // Conditional display\n  showWhen: 'show-when',\n  hideWhen: 'hide-when'\n} as const;\n\n// State management is now keyed by the list's unique ID\nclass RuntimeState {\n  private states = new Map<string, {\n    filters: ExpertFilters;\n    experts: ExpertProfile[];\n    loading: boolean;\n    error: Error | null;\n    offset: number;\n    limit: number;\n    totalCount: number;\n    hasNextPage: boolean;\n  }>();\n\n  getState(listId: string) {\n    if (!this.states.has(listId)) {\n      this.states.set(listId, {\n        filters: {},\n        experts: [],\n        loading: false,\n        error: null,\n        offset: 0,\n        limit: 20, // Default limit\n        totalCount: 0,\n        hasNextPage: false\n      });\n    }\n    return this.states.get(listId)!;\n  }\n\n  updateState(listId: string, updates: Partial<ReturnType<RuntimeState['getState']>>) {\n    const state = this.getState(listId);\n    Object.assign(state, updates);\n    this.states.set(listId, state);\n  }\n}\n\n/**\n * Main Runtime Class\n */\nexport class ContraWebflowRuntime {\n  private client: ContraClient;\n  private config: Required<RuntimeConfig>;\n  private state = new RuntimeState();\n  private debouncedReload: Map<string, () => void> = new Map();\n  private filterNameMap: Record<string, string> = {\n    locations: 'location',\n  };\n  private filterOptionLabels: Record<string, Record<string, string>> = {\n    sortBy: {\n      relevance: 'Relevance',\n      oldest: 'Oldest',\n      newest: 'Newest',\n      rate_asc: 'Rate (Low to High)',\n      rate_desc: 'Rate (High to Low)'\n    }\n  };\n\n  constructor(config: RuntimeConfig) {\n    this.config = {\n      debug: false,\n      loadingClass: 'loading',\n      errorClass: 'error',\n      emptyClass: 'empty',\n      // Video configuration defaults\n      videoAutoplay: false,\n      videoHoverPlay: true,\n      videoMuted: true,\n      videoLoop: true,\n      videoControls: false,\n      // Cloudinary transformation defaults\n      imageTransformations: 'f_auto,q_auto:eco,c_limit,w_800',\n      videoTransformations: 'fl_progressive,f_auto,q_auto:eco,vc_auto,c_limit,h_720',\n      ...config\n    };\n\n    this.client = new ContraClient({\n      apiKey: this.config.apiKey,\n      debug: this.config.debug\n    });\n\n    this.log('Runtime initialized', this.config);\n  }\n\n  /**\n   * Initialize the runtime by finding and setting up all lists.\n   */\n  async init(): Promise<void> {\n    this.log('Initializing runtime...');\n\n    try {\n      // 1. Discover all lists and unique programs to fetch filters for\n      const listElements = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.listId}]`);\n      this.log(`Found ${listElements.length} lists to initialize.`);\n      \n      const programFilters = new Map<string, any[]>();\n      for (const listElement of listElements) {\n        const programId = this.getAttr(listElement, ATTRS.program);\n        if (programId && !programFilters.has(programId)) {\n          this.log(`Fetching filters for program: ${programId}`);\n          programFilters.set(programId, await this.getAvailableFilters(programId));\n        }\n      }\n\n      // 2. Populate all filter controls on the page once\n      this.populateAllFilterControls(programFilters);\n\n      // 3. Initialize each list\n      for (const listElement of listElements) {\n        await this.initList(listElement);\n      }\n\n      // 4. Wire up all action buttons and filter controls\n      this.wireActionButtons();\n      this.wireFilterControls();\n\n      this.log('Runtime initialization complete');\n    } catch (error) {\n      this.log('Runtime initialization failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize a single expert list.\n   */\n  private async initList(listElement: Element): Promise<void> {\n    const listId = this.getAttr(listElement, ATTRS.listId);\n    const programId = this.getAttr(listElement, ATTRS.program);\n\n    if (!listId || !programId) {\n      this.log('List element is missing required attributes `data-contra-list-id` or `data-contra-program`.', listElement);\n      return;\n    }\n\n    this.log(`Initializing list: ${listId} for program: ${programId}`);\n\n    try {\n      (listElement as HTMLElement).setAttribute('data-contra-initialized', 'true');\n      (listElement as HTMLElement).classList.add('contra-list');\n      \n      const template = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.template}]`);\n      if (template) {\n          (template as HTMLElement).style.display = 'none';\n          this.log(`Template found and hidden for list: ${listId}`);\n      }\n      \n      // Defensively remove inline display styles from state elements to prevent conflicts.\n      const loadingEl = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n      if (loadingEl) (loadingEl as HTMLElement).style.removeProperty('display');\n      const emptyEl = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n      if (emptyEl) (emptyEl as HTMLElement).style.removeProperty('display');\n\n      const initialFilters = this.parseFiltersFromElement(listElement);\n      const limit = parseInt(this.getAttr(listElement, ATTRS.limit) || '20', 10);\n      \n      this.state.updateState(listId, { \n      filters: initialFilters,\n        limit: limit,\n        offset: initialFilters.offset || 0,\n      });\n      \n      this.state.updateState(listId, { loading: true, error: null });\n      this.showLoading(listElement, true);\n\n      const response = await this.client.listExperts(programId, initialFilters);\n      \n      this.log(`Loaded ${response.data.length} experts for list ${listId}`, response);\n\n      const newExperts = response.data;\n      const allExperts = newExperts;\n\n      // Update state before touching the DOM\n      this.state.updateState(listId, {\n        experts: allExperts,\n        totalCount: response.totalCount,\n        offset: initialFilters.offset || 0 + newExperts.length,\n        hasNextPage: newExperts.length === limit,\n        loading: false\n      });\n\n      // Render experts and then immediately update all UI states\n      this.renderExperts(listElement, newExperts, false);\n      this.updateUIStates(listElement, listId);\n\n    } catch (error) {\n      this.log(`Failed to initialize list ${listId}`, error);\n      this.state.updateState(listId, { loading: false, error: error as Error });\n      this.showError(listElement, error as Error);\n    } finally {\n      this.showLoading(listElement, false);\n    }\n  }\n\n  /**\n   * Wire up all action buttons on the page.\n   */\n  private wireActionButtons(): void {\n    const actionButtons = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.action}]`);\n    \n    actionButtons.forEach(button => {\n      const action = this.getAttr(button, ATTRS.action);\n      const targetListId = this.getAttr(button, ATTRS.listTarget);\n      \n      if (!action || !targetListId) {\n        this.log('Action button is missing required `data-contra-action` or `data-contra-list-target` attributes.', button);\n        return;\n      }\n\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.handleAction(action, targetListId, button);\n      });\n    });\n  }\n\n  /**\n   * Load experts for a given list.\n   */\n  private async loadExperts(listId: string, programId: string, append = false): Promise<void> {\n    const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${listId}\"]`);\n    if (!listElement) {\n      this.log(`Cannot find list element with ID: ${listId}`);\n          return;\n        }\n\n    // When reloading the list (not appending), we must hide the empty state message first.\n    const emptyElement = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (!append && emptyElement) {\n        (emptyElement as HTMLElement).style.display = 'none';\n    }\n\n    const state = this.state.getState(listId);\n    const filters = {\n      ...state.filters,\n      limit: state.limit,\n      offset: state.offset,\n    };\n    \n    this.log(`Loading experts for list: ${listId}`, filters);\n\n    try {\n      this.showLoading(listElement, true);\n      this.state.updateState(listId, { loading: true, error: null });\n\n      const response = await this.client.listExperts(programId, filters);\n      \n      this.log(`Loaded ${response.data.length} experts for list ${listId}`, response);\n\n      const newExperts = response.data;\n      const allExperts = append ? [...state.experts, ...newExperts] : newExperts;\n\n      // Update state before touching the DOM\n      this.state.updateState(listId, {\n        experts: allExperts,\n        totalCount: response.totalCount,\n        offset: state.offset + newExperts.length,\n        hasNextPage: newExperts.length === state.limit,\n        loading: false\n      });\n\n      // Render experts and then immediately update all UI states\n      this.renderExperts(listElement, newExperts, append);\n      this.updateUIStates(listElement, listId);\n\n    } catch (error) {\n      this.log(`Failed to load experts for list: ${listId}`, error);\n      this.state.updateState(listId, { loading: false, error: error as Error });\n      this.showError(listElement, error as Error);\n    } finally {\n      // Always ensure loading state is removed\n      this.showLoading(listElement, false);\n    }\n  }\n\n  /**\n   * Render experts into the container. Can clear or append.\n   */\n  private renderExperts(listElement: Element, experts: ExpertProfile[], append: boolean): void {\n    const template = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    if (!template) {\n      this.log('No template found in list', listElement);\n      return;\n    }\n\n    if (!append) {\n      // Clear only previously rendered expert cards\n      const existingCards = this.querySelectorAll(listElement, '.contra-rendered-item');\n    existingCards.forEach(card => card.remove());\n    }\n\n    const fragment = document.createDocumentFragment();\n    experts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert);\n      fragment.appendChild(expertCard);\n    });\n    listElement.appendChild(fragment);\n\n    this.log(`Rendered ${experts.length} expert cards into list`, listElement);\n  }\n\n  /**\n   * Populate expert card from template\n   */\n  private populateExpertCard(template: Element, expert: ExpertProfile): Element {\n    const card = template.cloneNode(true) as Element;\n    \n    // Add a marker class to identify this as a rendered card\n    card.classList.add('contra-rendered-item');\n    \n    // Remove template attribute and show the card\n    card.removeAttribute(`${ATTR_PREFIX}${ATTRS.template}`);\n    (card as HTMLElement).style.display = '';\n\n    // Populate field bindings\n    this.populateFields(card, expert);\n    \n    // Handle repeating elements (projects, social links)\n    this.populateRepeatingElements(card, expert);\n    \n    // Handle conditional display\n    this.handleConditionalDisplay(card, expert);\n\n    return card;\n  }\n\n  /**\n   * Populate data fields in the card\n   */\n  private populateFields(card: Element, expert: ExpertProfile): void {\n    const fieldElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.field}]`);\n    \n    fieldElements.forEach(element => {\n      const fieldName = this.getAttr(element, ATTRS.field) as ExpertField;\n      const format = this.getAttr(element, ATTRS.format);\n      \n      if (!fieldName || !(fieldName in expert)) return;\n\n      const value = expert[fieldName];\n      this.setElementValue(element, value, format);\n    });\n\n    // Handle star ratings\n    const starsElements = this.querySelectorAll(card, '[data-contra-stars]');\n    starsElements.forEach(element => {\n      if (expert.averageReviewScore) {\n        this.renderStarRating(element, expert.averageReviewScore);\n      }\n    });\n  }\n\n  /**\n   * Set element value with proper formatting\n   */\n  private setElementValue(element: Element, value: any, format?: string | null): void {\n    if (value == null || value === '') return;\n\n    // Media type detection and handling\n    if (this.isMediaField(element) && typeof value === 'string' && value.trim()) {\n      this.setMediaValue(element, value);\n      return;\n    }\n\n    if (element instanceof HTMLAnchorElement) {\n      element.href = String(value);\n      if (element.children.length === 0 && !element.textContent?.trim()) {\n        element.textContent = String(value);\n      }\n    } else if (element instanceof HTMLInputElement) {\n      element.value = String(value);\n    } else if (element instanceof HTMLImageElement) {\n      // Regular image handling for avatars and other images\n      const mediaType = this.detectMediaType(String(value));\n      const transformedUrl = this.transformMediaUrl(String(value), mediaType);\n      element.src = transformedUrl;\n      element.alt = element.alt || 'Image';\n    } else {\n      // Text content with formatting\n      let displayValue = String(value);\n      \n      if (format) {\n        switch (format) {\n          case 'currency':\n            displayValue = typeof value === 'number' ? `$${value}` : displayValue;\n            break;\n          case 'rate':\n            displayValue = utils.formatRate(typeof value === 'number' ? value : null);\n            break;\n          case 'rating':\n            // Format rating to one decimal place (5.0, 4.9, etc.)\n            displayValue = typeof value === 'number' ? value.toFixed(1) : displayValue;\n            break;\n          case 'earnings':\n            // Format earnings like $25k+\n            if (typeof value === 'number') {\n              if (value >= 1000000) {\n                displayValue = `$${Math.floor(value / 1000000)}M+`;\n              } else if (value >= 1000) {\n                displayValue = `$${Math.floor(value / 1000)}k+`;\n              } else {\n                displayValue = `$${value}`;\n              }\n            }\n            break;\n          case 'number':\n            displayValue = typeof value === 'number' ? value.toLocaleString() : displayValue;\n            break;\n          case 'truncate':\n            displayValue = displayValue.length > 100 ? displayValue.substring(0, 97) + '...' : displayValue;\n            break;\n          case 'boolean':\n            displayValue = value ? 'Yes' : 'No';\n            break;\n          case 'availability':\n            displayValue = value ? 'Available' : 'Not Available';\n            break;\n        }\n      }\n      \n      element.textContent = displayValue;\n    }\n  }\n\n  /**\n   * Star rating rendering with optional text display\n   */\n  private renderStarRating(element: Element, rating: number): void {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    let starsHtml = '';\n    \n    // Full stars\n    for (let i = 0; i < fullStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-full\">★</span>';\n    }\n    \n    // Half star\n    if (hasHalfStar) {\n      starsHtml += '<span class=\"contra-star contra-star-half\">★</span>';\n    }\n    \n    // Empty stars\n    for (let i = 0; i < emptyStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-empty\">☆</span>';\n    }\n    \n    element.innerHTML = starsHtml;\n    \n    // Also update any rating text elements in the same card\n    const card = element.closest('[data-contra-template]') || element.closest('.expert-card');\n    if (card) {\n      const ratingTextElements = this.querySelectorAll(card, '[data-contra-rating-text]');\n      ratingTextElements.forEach(textElement => {\n        textElement.textContent = rating.toFixed(1);\n      });\n    }\n  }\n\n  /**\n   * Media type detection and element handling\n   */\n  private isMediaField(element: Element): boolean {\n    const field = this.getAttr(element, ATTRS.field);\n    // Only apply advanced media handling to project cover URLs, not avatars\n    return field === 'coverUrl';\n  }\n\n  /**\n   * Media value setting with automatic type detection\n   */\n  private setMediaValue(element: Element, url: string): void {\n    const mediaType = this.detectMediaType(url);\n    const parent = element.parentElement;\n    \n    if (!parent) {\n      this.log('Media element has no parent for replacement', element);\n      return;\n    }\n\n    // Remove existing media element\n    element.remove();\n\n    // Create appropriate media element\n    let mediaElement: HTMLElement;\n    \n    switch (mediaType) {\n      case 'video':\n        const transformedVideoUrl = this.transformMediaUrl(url, 'video');\n        mediaElement = this.createVideoElement(transformedVideoUrl, element);\n        break;\n      case 'image':\n      default:\n        const transformedImageUrl = this.transformMediaUrl(url, 'image');\n        mediaElement = this.createImageElement(transformedImageUrl, element);\n        break;\n    }\n\n    // Preserve classes and attributes from original element\n    this.transferAttributes(element, mediaElement);\n    \n    // Insert new media element\n    parent.appendChild(mediaElement);\n    \n    this.log(`Created ${mediaType} element for URL: ${url}`);\n  }\n\n  /**\n   * Detect media type from URL\n   */\n  private detectMediaType(url: string): 'image' | 'video' {\n    if (!url || typeof url !== 'string') {\n      this.log('Invalid URL provided to detectMediaType:', url);\n      return 'image';\n    }\n    \n    const urlLower = url.toLowerCase();\n    \n    // Video formats\n    const videoExtensions = ['.mp4', '.webm', '.mov', '.avi', '.mkv', '.ogg'];\n    const isVideo = videoExtensions.some(ext => urlLower.includes(ext));\n    \n    // Special handling for Cloudinary video URLs\n    const isCloudinaryVideo = urlLower.includes('cloudinary.com/') && urlLower.includes('/video/');\n    \n    if (isVideo || isCloudinaryVideo) {\n      return 'video';\n    }\n    \n    return 'image';\n  }\n\n  /**\n   * Create video element with fallback\n   */\n  private createVideoElement(url: string, originalElement: Element): HTMLVideoElement {\n    const video = document.createElement('video');\n    \n    // Video attributes\n    video.src = url;\n    video.loop = this.config.videoLoop;\n    video.playsInline = true; // Essential for inline playback on iOS\n    video.preload = 'metadata';\n    video.controls = this.config.videoControls;\n    \n    // Muted is critical for autoplay on mobile.\n    if (this.config.videoMuted) {\n        video.muted = true;\n        video.setAttribute('muted', ''); // Set attribute for maximum compatibility\n    }\n    \n    // Maintain aspect ratio and object-fit from original\n    video.style.width = '100%';\n    video.style.height = '100%';\n    video.style.objectFit = 'cover';\n    video.style.borderRadius = 'inherit';\n    \n    // Autoplay configuration\n    if (this.config.videoAutoplay) {\n      video.autoplay = true;\n      video.setAttribute('autoplay', '');\n    }\n    \n    // Error handling with fallback to poster or placeholder\n    video.onerror = () => {\n      this.log(`Video failed to load: ${url}`);\n      // Try to extract a thumbnail from Cloudinary video URL\n      const posterUrl = this.extractVideoThumbnail(url);\n      if (posterUrl) {\n        const fallbackImg = this.createImageElement(posterUrl, originalElement);\n        video.parentElement?.replaceChild(fallbackImg, video);\n      } else {\n        // Show placeholder\n        video.style.background = '#f3f4f6';\n        video.style.position = 'relative';\n        video.innerHTML = '<div style=\"position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);color:#9ca3af;font-size:12px;\">Video unavailable</div>';\n      }\n    };\n\n    // Hover-to-play functionality (if enabled and not autoplay)\n    if (this.config.videoHoverPlay && !this.config.videoAutoplay) {\n      const playVideo = () => {\n        video.currentTime = 0;\n        video.play().catch(() => { /* Ignore play errors (browser policies) */ });\n      };\n      const pauseVideo = () => {\n        video.pause();\n        video.currentTime = 0;\n      };\n\n      // Desktop events\n      video.addEventListener('mouseenter', playVideo);\n      video.addEventListener('mouseleave', pauseVideo);\n      \n      // Mobile (touch) events\n      video.addEventListener('touchstart', (e) => {\n        e.preventDefault(); // Prevents ghost clicks and other artifacts\n        playVideo();\n      }, { passive: false });\n      video.addEventListener('touchend', pauseVideo);\n    }\n\n    return video;\n  }\n\n  /**\n   * Create image element with error handling\n   */\n  private createImageElement(url: string, originalElement: Element): HTMLImageElement {\n    const img = document.createElement('img');\n    \n    img.src = url;\n    img.alt = originalElement.getAttribute('alt') || 'Media content';\n    img.loading = 'lazy';\n    \n    // Maintain styling\n    img.style.width = '100%';\n    img.style.height = '100%';\n    img.style.objectFit = 'cover';\n    img.style.borderRadius = 'inherit';\n    \n    // Error handling\n    img.onerror = () => {\n      this.log(`Image failed to load: ${url}`);\n      \n      // If f_auto is used, Cloudinary may have converted a GIF to a video.\n      // In this case, we attempt to render a video element instead.\n      if (url.includes('cloudinary.com/') && url.includes('f_auto')) {\n        this.log(`Attempting to fall back to video for f_auto URL: ${url}`);\n        const videoElement = this.createVideoElement(url, originalElement);\n        if (img.parentElement) {\n          this.transferAttributes(img, videoElement); // Ensure styles are consistent\n          img.parentElement.replaceChild(videoElement, img);\n          this.log('Successfully replaced failed image with video fallback.');\n        }\n        return;\n      }\n      \n      // Default fallback for non-convertible images\n      img.style.background = '#f3f4f6';\n      img.style.opacity = '0.5';\n      img.alt = 'Image unavailable';\n      \n      // Add broken image icon\n      img.style.position = 'relative';\n      const placeholder = document.createElement('div');\n      placeholder.style.cssText = `\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        color: #9ca3af;\n        font-size: 12px;\n        text-align: center;\n      `;\n      placeholder.textContent = '🖼️ Image unavailable';\n      img.parentElement?.appendChild(placeholder);\n    };\n\n    return img;\n  }\n\n  /**\n   * Extract video thumbnail from Cloudinary URL\n   */\n  private extractVideoThumbnail(videoUrl: string): string | null {\n    if (videoUrl.includes('cloudinary.com/') && videoUrl.includes('/video/')) {\n      // Convert video URL to image thumbnail\n      const imageUrl = videoUrl\n        .replace('/video/', '/image/')\n        .replace(/\\.(mp4|webm|mov|avi|mkv|ogg)$/i, '.jpg');\n      \n      return this.transformMediaUrl(imageUrl, 'image');\n    }\n    return null;\n  }\n\n  /**\n   * Transfer attributes and classes from old element to new\n   */\n  private transferAttributes(from: Element, to: HTMLElement): void {\n    // Transfer classes\n    if (from.className) {\n      to.className = from.className;\n    }\n    \n    // Transfer data attributes (except contra-field)\n    Array.from(from.attributes).forEach(attr => {\n      if (attr.name.startsWith('data-') && attr.name !== `${ATTR_PREFIX}${ATTRS.field}`) {\n        to.setAttribute(attr.name, attr.value);\n      }\n    });\n    \n    // Transfer style\n    if (from.getAttribute('style')) {\n      const existingStyle = to.getAttribute('style') || '';\n      to.setAttribute('style', existingStyle + '; ' + from.getAttribute('style'));\n    }\n  }\n\n  /**\n   * Handle repeating elements (projects, social links)\n   */\n  private populateRepeatingElements(card: Element, expert: ExpertProfile): void {\n    const repeatElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.repeat}]`);\n    \n    repeatElements.forEach(container => {\n      const repeatType = this.getAttr(container, ATTRS.repeat);\n      const maxItems = parseInt(this.getAttr(container, ATTRS.max) || '10');\n      \n      if (repeatType === 'projects' && expert.projects) {\n        this.populateRepeatingContainer(container, expert.projects.slice(0, maxItems));\n      } else if (repeatType === 'socialLinks' && expert.socialLinks) {\n        this.populateRepeatingContainer(container, expert.socialLinks.slice(0, maxItems));\n      } else if (repeatType === 'skillTags' && expert.skillTags) {\n        this.populateRepeatingContainer(container, expert.skillTags.slice(0, maxItems).map((tag: string) => ({ name: tag })));\n      }\n    });\n  }\n\n  /**\n   * Populate a repeating container with items\n   */\n  private populateRepeatingContainer(container: Element, items: any[]): void {\n    const template = container.firstElementChild;\n    if (!template) return;\n\n    // Clear existing items\n    container.innerHTML = '';\n    \n    // Create items from template\n    items.forEach(item => {\n      const itemElement = template.cloneNode(true) as Element;\n      this.populateFields(itemElement, item);\n      container.appendChild(itemElement);\n    });\n    \n    // Hide container if no items\n    if (items.length === 0) {\n      (container as HTMLElement).style.display = 'none';\n    }\n  }\n\n  /**\n   * Handle conditional display based on data\n   */\n  private handleConditionalDisplay(card: Element, expert: ExpertProfile): void {\n    const conditionalElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.showWhen}], [${ATTR_PREFIX}${ATTRS.hideWhen}]`);\n    \n    conditionalElements.forEach(element => {\n      const showWhen = this.getAttr(element, ATTRS.showWhen);\n      const hideWhen = this.getAttr(element, ATTRS.hideWhen);\n      \n      let shouldShow = true;\n      \n      if (showWhen) {\n        shouldShow = this.evaluateCondition(expert, showWhen);\n      }\n      \n      if (hideWhen) {\n        shouldShow = shouldShow && !this.evaluateCondition(expert, hideWhen);\n      }\n      \n      (element as HTMLElement).style.display = shouldShow ? '' : 'none';\n    });\n  }\n\n  /**\n   * Evaluate a condition against expert data\n   */\n  private evaluateCondition(expert: ExpertProfile, condition: string): boolean {\n    if (!condition || typeof condition !== 'string') {\n      this.log('Invalid condition provided:', condition);\n      return false;\n    }\n    \n    // Parse condition: \"field:value\" or \"field:>value\" etc.\n    const parts = condition.split(':');\n    if (parts.length < 2) {\n      this.log('Invalid condition format:', condition);\n      return false;\n    }\n    \n    const field = parts[0];\n    const restOfCondition = parts.slice(1).join(':'); // Handle colons in values\n    const expertValue = (expert as any)[field];\n    \n    this.log(`Evaluating condition: ${field} (${expertValue}, type: ${typeof expertValue}) against ${restOfCondition}`);\n    \n    if (expertValue == null) {\n      this.log(`Field '${field}' is null/undefined, condition fails`);\n      return false;\n    }\n    \n    // Check for comparison operators\n    if (restOfCondition.startsWith('>=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) >= Number(value);\n      this.log(`Comparison: ${expertValue} >= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) <= Number(value);\n      this.log(`Comparison: ${expertValue} <= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('>')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) > Number(value);\n      this.log(`Comparison: ${expertValue} > ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) < Number(value);\n      this.log(`Comparison: ${expertValue} < ${value} = ${result}`);\n      return result;\n    } else {\n      // Direct value comparison with type-aware handling\n      let result = false;\n      \n      // Handle boolean fields specially\n      if (typeof expertValue === 'boolean') {\n        // Convert string condition to boolean for comparison\n        if (restOfCondition.toLowerCase() === 'true') {\n          result = expertValue === true;\n        } else if (restOfCondition.toLowerCase() === 'false') {\n          result = expertValue === false;\n        } else {\n          result = false;\n        }\n        this.log(`Boolean comparison: ${expertValue} === ${restOfCondition.toLowerCase() === 'true'} = ${result}`);\n      } else if (typeof expertValue === 'number') {\n        // Handle numeric comparisons\n        const numValue = Number(restOfCondition);\n        result = !isNaN(numValue) && expertValue === numValue;\n        this.log(`Number comparison: ${expertValue} === ${numValue} = ${result}`);\n      } else {\n        // String comparison (case-insensitive)\n        const expertStr = String(expertValue);\n        const valueStr = String(restOfCondition);\n        result = expertStr.toLowerCase() === valueStr.toLowerCase();\n        this.log(`String comparison: '${expertStr}' === '${valueStr}' = ${result}`);\n      }\n      \n      return result;\n    }\n  }\n\n  /**\n   * Update UI states based on current data for a specific list.\n   */\n  private updateUIStates(listElement: Element, listId: string): void {\n    const state = this.state.getState(listId);\n    \n    const emptyElement = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (emptyElement) {\n        const showEmpty = !state.loading && state.experts.length === 0;\n        const display = showEmpty ? 'block' : 'none';\n        (emptyElement as HTMLElement).style.setProperty('display', display, 'important');\n        this.log(`List ${listId}: Empty state display set to '${display}'.`);\n    }\n    \n    const loadMoreButton = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.action}=\"load-more\"][${ATTR_PREFIX}${ATTRS.listTarget}=\"${listId}\"]`);\n    if (loadMoreButton) {\n      const btn = loadMoreButton as HTMLButtonElement;\n      const hasMore = !state.loading && state.hasNextPage;\n      const display = hasMore ? 'inline-block' : 'none';\n      (loadMoreButton as HTMLElement).style.setProperty('display', display, 'important');\n      btn.disabled = state.loading;\n      btn.textContent = state.loading ? 'Loading...' : 'Load More';\n    }\n  }\n\n  /**\n   * Handle action buttons (just load-more for now).\n   */\n  private handleAction(action: string, targetListId: string, button: Element): void {\n    if (action === 'load-more') {\n      const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${targetListId}\"]`);\n      const programId = this.getAttr(listElement!, ATTRS.program);\n      if (listElement && programId) {\n        this.loadExperts(targetListId, programId, true); // `true` to append\n      } else {\n        this.log(`Could not find list or program for target: ${targetListId}`);\n      }\n    } else if (action === 'clear-filters') {\n      this.clearFilters(targetListId);\n    }\n  }\n\n  private clearFilters(targetListId: string): void {\n    const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${targetListId}\"]`);\n    if (!listElement) {\n        this.log(`Cannot find list element with ID: ${targetListId} to clear filters.`);\n        return;\n    }\n    const programId = this.getAttr(listElement, ATTRS.program);\n    if (!programId) {\n        this.log(`Cannot find programId for list: ${targetListId}`);\n        return;\n    }\n\n    this.log(`Clearing filters for list: ${targetListId}`);\n\n    // 1. Reset state\n    this.state.updateState(targetListId, { filters: {}, offset: 0 });\n\n    // 2. Reset controls visually\n    const filterControls = this.querySelectorAll(document.body, `[data-contra-filter][data-contra-list-target=\"${targetListId}\"]`);\n    filterControls.forEach(control => {\n        this.resetControlValue(control as HTMLInputElement | HTMLSelectElement);\n    });\n\n    // 3. Reload data\n    this.loadExperts(targetListId, programId, false); // false to replace, not append\n  }\n\n  private resetControlValue(control: HTMLInputElement | HTMLSelectElement): void {\n    if (control instanceof HTMLInputElement) {\n        switch (control.type) {\n            case 'checkbox':\n            case 'radio':\n                control.checked = false;\n                break;\n            case 'number':\n            case 'range':\n                control.value = '';\n                break;\n            default: // text, search, etc.\n                control.value = '';\n                break;\n        }\n    } else if (control instanceof HTMLSelectElement) {\n        control.selectedIndex = 0; // Reset to the first option\n    }\n  }\n\n  private updateFilterAndReload(listId: string, programId: string, filterKey: string, value: any): void {\n    const state = this.state.getState(listId);\n    const newFilters = { ...state.filters };\n\n    // Process and set value\n    let processedValue = value;\n    if (filterKey === 'available') {\n      // If checkbox is checked, value is true. If unchecked, it's false.\n      // We only want to apply the filter when it's true.\n      processedValue = value ? true : undefined;\n    } else if (['minRate', 'maxRate'].includes(filterKey)) {\n      processedValue = (value === '' || value === null) ? undefined : Number(value);\n    } else if (filterKey === 'languages' && typeof value === 'string') {\n        processedValue = value.split(',').map(v => v.trim()).filter(v => v);\n        if (processedValue.length === 0) {\n            processedValue = undefined;\n        }\n    }\n\n    if (processedValue !== undefined && processedValue !== '') {\n        const apiKey = this.filterNameMap[filterKey] || filterKey;\n        (newFilters as any)[apiKey] = processedValue;\n    } else {\n        const apiKey = this.filterNameMap[filterKey] || filterKey;\n        delete (newFilters as any)[apiKey];\n    }\n    \n    // Reset offset and update state\n    this.state.updateState(listId, { filters: newFilters, offset: 0 });\n\n    this.log(`Filter updated for list ${listId}, reloading. New filters:`, newFilters);\n    \n    // Reload the list\n    this.loadExperts(listId, programId, false);\n  }\n\n  private wireFilterControls(): void {\n    const filterControls = this.querySelectorAll(document.body, `[data-contra-filter]`);\n    this.log(`Found ${filterControls.length} filter controls to wire.`);\n\n    filterControls.forEach(control => {\n        const filterKey = control.getAttribute('data-contra-filter');\n        const targetListId = control.getAttribute('data-contra-list-target');\n\n        if (!filterKey || !targetListId) {\n            this.log('Filter control missing required attributes: data-contra-filter or data-contra-list-target', control);\n            return;\n        }\n\n        const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}list-id=\"${targetListId}\"]`);\n        if (!listElement) return;\n        const programId = this.getAttr(listElement, ATTRS.program);\n        if (!programId) return;\n\n        const debounceTime = (control instanceof HTMLInputElement && ['text', 'search'].includes(control.type)) ? 300 : 0;\n        \n        const handler = () => {\n            const value = this.getControlValue(control as HTMLInputElement | HTMLSelectElement);\n            this.updateFilterAndReload(targetListId, programId, filterKey, value);\n        };\n        \n        const debouncedHandler = this.debounce(handler, debounceTime);\n        \n        const eventType = (control instanceof HTMLInputElement && ['text', 'search'].includes(control.type)) ? 'input' : 'change';\n        control.addEventListener(eventType, debouncedHandler);\n    });\n  }\n\n  private debounce(func: (...args: any[]) => void, delay: number): (...args: any[]) => void {\n    let timeoutId: number;\n    return (...args: any[]) => {\n        clearTimeout(timeoutId);\n        if (delay > 0) {\n            timeoutId = window.setTimeout(() => func.apply(this, args), delay);\n        } else {\n            func.apply(this, args);\n        }\n    };\n  }\n\n  /**\n   * Utility Methods\n   */\n  private getAttr(element: Element, name: string): string | null {\n    return element.getAttribute(`${ATTR_PREFIX}${name}`);\n  }\n\n  private querySelector(element: Element, selector: string): Element | null {\n    return element.querySelector(selector);\n  }\n\n  private querySelectorAll(element: Element, selector: string): Element[] {\n    return Array.from(element.querySelectorAll(selector));\n  }\n\n  private parseFiltersFromElement(element: Element): ExpertFilters {\n    const filters: ExpertFilters = {};\n    \n    // Parse filter attributes\n    const filterMap = {\n      'available': 'available',\n      'languages': 'languages', \n      'location': 'location',\n      'min-rate': 'minRate',\n      'max-rate': 'maxRate',\n      'sort': 'sortBy',\n      'limit': 'limit',\n      'offset': 'offset'\n    };\n\n    Object.entries(filterMap).forEach(([attr, filterKey]) => {\n      const value = this.getAttr(element, attr);\n      if (value != null) {\n        if (filterKey === 'available') {\n          (filters as any)[filterKey] = value === 'true';\n        } else if (filterKey === 'languages') {\n          (filters as any)[filterKey] = value.split(',').map(v => v.trim());\n        } else if (['minRate', 'maxRate', 'limit', 'offset'].includes(filterKey)) {\n          (filters as any)[filterKey] = parseInt(value);\n        } else {\n          (filters as any)[filterKey] = value;\n        }\n      }\n    });\n\n    // Ensure offset defaults to 0 if not specified\n    if (filters.offset === undefined) {\n      filters.offset = 0;\n    }\n\n    return filters;\n  }\n\n  private getControlValue(control: HTMLInputElement | HTMLSelectElement): any {\n    if (control instanceof HTMLInputElement) {\n      switch (control.type) {\n        case 'checkbox':\n          return control.checked;\n        case 'number':\n        case 'range':\n          return control.valueAsNumber;\n        default:\n          return control.value;\n      }\n    } else if (control instanceof HTMLSelectElement) {\n      if (control.multiple) {\n        return Array.from(control.selectedOptions).map(option => option.value);\n      }\n      return control.value;\n    }\n    return null;\n  }\n\n  private showLoading(container: Element, show: boolean): void {\n    const loadingElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n    if (loadingElement) {\n      const display = show ? 'block' : 'none';\n      (loadingElement as HTMLElement).style.setProperty('display', display, 'important');\n    }\n  }\n\n  private showError(container: Element, error: Error): void {\n    const errorElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.error}]`);\n    if (errorElement) {\n      errorElement.textContent = error.message;\n      (errorElement as HTMLElement).style.setProperty('display', 'block', 'important');\n    }\n    (container as HTMLElement).classList.add(this.config.errorClass);\n    this.log('Error displayed', error);\n  }\n\n  private dispatchEvent(target: Element | Document, eventName: string, detail: any): void {\n    const event = new CustomEvent(`contra:${eventName}`, { detail });\n    target.dispatchEvent(event);\n  }\n\n  private log(message: string, ...args: any[]): void {\n    if (this.config.debug) {\n      console.log(`[ContraWebflow] ${message}`, ...args);\n    }\n  }\n\n  private async getAvailableFilters(programId: string): Promise<any[]> {\n    const url = `https://contra.com/public-api/programs/${programId}/filters`;\n    this.log(`Fetching available filters for program: ${programId}`);\n    try {\n        const response = await fetch(url, {\n            headers: {\n                'X-API-Key': this.config.apiKey,\n                'Accept': 'application/json'\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Failed to fetch filters: ${response.statusText}`);\n        }\n        const data = await response.json();\n        this.log('Successfully fetched filters', data.data);\n        return data.data || [];\n    } catch (error) {\n        this.log('Error fetching available filters', error);\n        return [];\n    }\n  }\n  \n  private getFilterOptionLabel(filterKey: string, value: string): string {\n    const labels = this.filterOptionLabels[filterKey];\n    if (labels && labels[value]) {\n      return labels[value];\n    }\n    // Capitalize the first letter and lowercase the rest as a fallback\n    return value.charAt(0).toUpperCase() + value.slice(1).toLowerCase();\n  }\n\n  private populateAllFilterControls(programFilters: Map<string, any[]>): void {\n    this.log('Populating all filter controls on the page...');\n    const allControls = this.querySelectorAll(document.body, `[data-contra-filter]`);\n\n    allControls.forEach(control => {\n      const targetListId = control.getAttribute('data-contra-list-target');\n      if (!targetListId) return;\n\n      const targetList = this.querySelector(document.body, `[data-contra-list-id=\"${targetListId}\"]`);\n      if (!targetList) return;\n\n      const programId = this.getAttr(targetList, ATTRS.program);\n      if (!programId) return;\n\n      const filters = programFilters.get(programId);\n      if (!filters) return;\n\n      const filterKey = control.getAttribute('data-contra-filter');\n      const filterDef = filters.find(f => f.name === filterKey);\n\n      if (!filterDef) return;\n\n      // Handle number input ranges\n      if (filterDef.type === 'number' && control instanceof HTMLInputElement) {\n        if (filterDef.minimum !== undefined) control.min = String(filterDef.minimum);\n        if (filterDef.maximum !== undefined) control.max = String(filterDef.maximum);\n      }\n      \n      // Handle populating controls with options (select, datalist)\n      if (filterDef.options) {\n          if (control instanceof HTMLSelectElement) {\n              this.populateSelectControl(control, filterKey!, filterDef.options);\n          } else if (control instanceof HTMLInputElement && control.getAttribute('list')) {\n              this.populateDatalistControl(control, filterKey!, filterDef.options);\n          }\n      }\n    });\n  }\n\n  private populateSelectControl(control: HTMLSelectElement, filterKey: string, options: any[]): void {\n    this.log(`Populating options for filter '${filterKey}' on control`, control);\n    \n    const placeholder = control.firstElementChild?.cloneNode(true) as Element | null;\n    control.innerHTML = '';\n    if (placeholder && placeholder.getAttribute('value') === '') {\n      control.appendChild(placeholder);\n    }\n\n    options.forEach((option: any) => {\n      const optionElement = document.createElement('option');\n      const value = typeof option === 'object' && option.value !== undefined ? option.value : String(option);\n      \n      optionElement.value = value;\n\n      let label: string;\n      if (filterKey === 'locations') {\n        const labelMatch = value.match(/^(.*?)\\s*\\(/);\n        label = labelMatch ? labelMatch[1].trim() : value;\n      } else {\n        label = this.getFilterOptionLabel(filterKey!, value);\n      }\n      optionElement.textContent = label;\n      \n      if (filterKey === 'sortBy' && value === 'relevance') {\n        optionElement.selected = true;\n      }\n      control.appendChild(optionElement);\n    });\n  }\n\n  private populateDatalistControl(control: HTMLInputElement, filterKey: string, options: any[]): void {\n      const datalistId = control.getAttribute('list');\n      if (!datalistId) return;\n\n      const datalist = document.getElementById(datalistId);\n      if (!datalist) {\n          this.log(`Datalist with id '${datalistId}' not found for input control.`, control);\n          return;\n      }\n\n      this.log(`Populating datalist '#${datalistId}' for filter '${filterKey}'`);\n      datalist.innerHTML = ''; // Clear existing options\n\n      options.forEach((option: any) => {\n          const optionElement = document.createElement('option');\n          const value = typeof option === 'object' && option.value !== undefined ? option.value : String(option);\n          \n          let displayValue = value;\n          // For locations, we want a cleaner value for the user to select.\n          if (filterKey === 'locations') {\n              const labelMatch = value.match(/^(.*?)\\s*\\(/);\n              displayValue = labelMatch ? labelMatch[1].trim() : value;\n          }\n\n          optionElement.value = displayValue;\n          datalist.appendChild(optionElement);\n      });\n  }\n\n  private transformMediaUrl(url: string, mediaType: 'image' | 'video'): string {\n    if (!url || (!url.includes('cloudinary.com/') && !url.includes('media.contra.com/'))) {\n        return url;\n    }\n\n    const transformations = mediaType === 'image' \n        ? this.config.imageTransformations \n        : this.config.videoTransformations;\n\n    if (!transformations) {\n        return url;\n    }\n\n    const uploadMarker = '/upload/';\n    const parts = url.split(uploadMarker);\n\n    if (parts.length !== 2) {\n        this.log(`Could not apply transformations, URL format unexpected: ${url}`);\n        return url;\n    }\n    \n    const [baseUrl, path] = parts;\n\n    // A robust heuristic to detect if a URL already has transformations.\n    // It checks if the first part of the path after '/upload/' contains\n    // any known Cloudinary transformation parameter prefixes.\n    const firstPathComponent = path.split('/')[0];\n    const hasExistingTransformations = CLOUDINARY_TRANSFORM_PREFIXES.some(prefix => firstPathComponent.includes(prefix));\n\n    if (hasExistingTransformations) {\n         this.log(`URL already appears to have transformations, skipping: ${url}`);\n         return url;\n    }\n\n    const transformedUrl = `${baseUrl}${uploadMarker}${transformations}/${path}`;\n    this.log(`Transformed ${mediaType} URL: ${transformedUrl}`);\n    return transformedUrl;\n  }\n}\n\n/**\n * Auto-initialize runtime when DOM is ready\n */\nfunction autoInit(): void {\n  const configElement = document.getElementById('contra-config');\n  if (!configElement) {\n    console.warn('[ContraWebflow] No config element found. Runtime not initialized.');\n    return;\n  }\n\n  try {\n    const config = JSON.parse(configElement.textContent || '{}');\n    \n    // Validate required config\n    if (!config.apiKey) {\n      console.error('[ContraWebflow] API key is required in config.');\n      return;\n    }\n    \n    const initializeRuntime = () => {\n    const runtime = new ContraWebflowRuntime(config);\n    \n    // Expose runtime globally for debugging\n    (window as any).contraRuntime = runtime;\n    \n    runtime.init().catch(error => {\n      console.error('[ContraWebflow] Runtime initialization failed:', error);\n    });\n    };\n    \n    // Use setTimeout to ensure DOM is fully ready\n    setTimeout(initializeRuntime, 100);\n    \n  } catch (error) {\n    console.error('[ContraWebflow] Failed to parse config:', error);\n  }\n}\n\n// Auto-initialize when DOM is ready with multiple fallbacks\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', autoInit);\n} else if (document.readyState === 'interactive') {\n  // DOM is ready but resources might still be loading\n  setTimeout(autoInit, 50);\n} else {\n  // DOM and resources are ready\n  autoInit();\n}\n\n// Export runtime class for manual initialization\nexport { ContraWebflowRuntime as default }; "]}
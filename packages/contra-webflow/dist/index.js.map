{"version":3,"sources":["../src/runtime.ts"],"names":["CLOUDINARY_TRANSFORM_PREFIXES","ATTR_PREFIX","ATTRS","RuntimeState","listId","updates","state","ContraWebflowRuntime","config","ContraClient","listElements","programFilters","listElement","programId","error","template","loadingEl","emptyEl","initialFilters","limit","response","newExperts","allExperts","button","action","targetListId","e","append","emptyElement","filters","experts","card","fragment","expert","expertCard","element","fieldName","format","value","mediaType","transformedUrl","displayValue","utils","rating","fullStars","hasHalfStar","emptyStars","starsHtml","i","textElement","url","parent","mediaElement","transformedVideoUrl","transformedImageUrl","urlLower","isVideoExtension","ext","isCloudinaryVideo","originalElement","video","posterUrl","testPoster","fallbackImg","isPlaying","playVideo","pauseVideo","touchTimeout","img","placeholder","videoUrl","extensionMatch","query","queryIndex","posterTransformed","from","to","attr","existingStyle","container","repeatType","maxItems","tag","items","item","itemElement","nameElement","showWhen","hideWhen","shouldShow","condition","parts","field","restOfCondition","expertValue","result","numValue","expertStr","valueStr","display","loadMoreButton","btn","control","filterKey","newFilters","processedValue","v","apiKey","filterControls","debounceTime","handler","debouncedHandler","eventType","func","delay","timeoutId","args","name","selector","option","show","loadingElement","errorElement","target","eventName","detail","event","message","data","labels","targetList","filterDef","f","options","optionElement","label","labelMatch","datalistId","datalist","transformations","processedUrl","uploadMarker","baseUrl","path","pathComponents","firstPathComponent","prefix","cleanPath","finalUrl","autoInit","configElement","runtime"],"mappings":"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","file":"index.js","sourcesContent":["import { ContraClient, utils } from '@contra/client';\nimport type {\n  ExpertProfile,\n  ExpertFilters,\n  FilterChangeEvent,\n  ExpertLoadEvent,\n  ErrorEvent,\n  ExpertField\n} from '@contra/types';\n\n/**\n * Webflow Runtime for Contra Experts\n * Simplified for flexibility and predictability.\n */\n\n// Simplified configuration\ninterface RuntimeConfig {\n  apiKey: string;\n  debug?: boolean;\n  loadingClass?: string;\n  errorClass?: string;\n  emptyClass?: string;\n  // Video configuration\n  videoAutoplay?: boolean;\n  videoHoverPlay?: boolean;\n  videoMuted?: boolean;\n  videoLoop?: boolean;\n  videoControls?: boolean;\n  // Cloudinary transformations\n  imageTransformations?: string;\n  videoTransformations?: string;\n  optimizeGifsAsVideo?: boolean;\n}\n\nconst CLOUDINARY_TRANSFORM_PREFIXES = [\n  'w_', 'h_', 'c_', 'f_', 'q_', 'fl_', 'vc_', 'b_', 'e_', 'o_', 'a_', 'dpr_', 'ar_'\n];\n\n// Attribute constants\nconst ATTR_PREFIX = 'data-contra-';\nconst ATTRS = {\n  // Core list attributes\n  listId: 'list-id',\n  program: 'program',\n  template: 'template',\n  \n  // States\n  loading: 'loading',\n  error: 'error',\n  empty: 'empty',\n  \n  // Field binding\n  field: 'field',\n  format: 'format',\n  \n  // Repeating elements\n  repeat: 'repeat',\n  max: 'max',\n  \n  // Sorting and pagination\n  limit: 'limit',\n  \n  // Actions\n  action: 'action',\n  listTarget: 'list-target',\n\n  // Conditional display\n  showWhen: 'show-when',\n  hideWhen: 'hide-when'\n} as const;\n\n// State management is now keyed by the list's unique ID\nclass RuntimeState {\n  private states = new Map<string, {\n    filters: ExpertFilters;\n    experts: ExpertProfile[];\n    loading: boolean;\n    error: Error | null;\n    offset: number;\n    limit: number;\n    totalCount: number;\n    hasNextPage: boolean;\n  }>();\n\n  getState(listId: string) {\n    if (!this.states.has(listId)) {\n      this.states.set(listId, {\n        filters: {},\n        experts: [],\n        loading: false,\n        error: null,\n        offset: 0,\n        limit: 20, // Default limit\n        totalCount: 0,\n        hasNextPage: false\n      });\n    }\n    return this.states.get(listId)!;\n  }\n\n  updateState(listId: string, updates: Partial<ReturnType<RuntimeState['getState']>>) {\n    const state = this.getState(listId);\n    Object.assign(state, updates);\n    this.states.set(listId, state);\n  }\n}\n\n/**\n * Main Runtime Class\n */\nexport class ContraWebflowRuntime {\n  private client: ContraClient;\n  private config: Required<RuntimeConfig>;\n  private state = new RuntimeState();\n  private debouncedReload: Map<string, () => void> = new Map();\n  private filterNameMap: Record<string, string> = {\n    locations: 'location',\n  };\n  private filterOptionLabels: Record<string, Record<string, string>> = {\n    sortBy: {\n      relevance: 'Relevance',\n      oldest: 'Oldest',\n      newest: 'Newest',\n      rate_asc: 'Rate (Low to High)',\n      rate_desc: 'Rate (High to Low)'\n    }\n  };\n\n  constructor(config: RuntimeConfig) {\n    this.config = {\n      debug: false,\n      loadingClass: 'loading',\n      errorClass: 'error',\n      emptyClass: 'empty',\n      // Video configuration defaults\n      videoAutoplay: false,\n      videoHoverPlay: true,\n      videoMuted: true,\n      videoLoop: true,\n      videoControls: false,\n      // Cloudinary transformation defaults\n      imageTransformations: 'f_auto,q_auto:eco,c_limit,w_800',\n      videoTransformations: 'fl_progressive,f_auto,q_auto:eco,vc_auto,c_limit,h_720',\n      optimizeGifsAsVideo: true,\n      ...config\n    };\n\n    this.client = new ContraClient({\n      apiKey: this.config.apiKey,\n      debug: this.config.debug\n    });\n\n    this.log('Runtime initialized', this.config);\n  }\n\n  /**\n   * Initialize the runtime by finding and setting up all lists.\n   */\n  async init(): Promise<void> {\n    this.log('Initializing runtime...');\n\n    try {\n      // 1. Discover all lists and unique programs to fetch filters for\n      const listElements = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.listId}]`);\n      this.log(`Found ${listElements.length} lists to initialize.`);\n      \n      const programFilters = new Map<string, any[]>();\n      for (const listElement of listElements) {\n        const programId = this.getAttr(listElement, ATTRS.program);\n        if (programId && !programFilters.has(programId)) {\n          this.log(`Fetching filters for program: ${programId}`);\n          programFilters.set(programId, await this.getAvailableFilters(programId));\n        }\n      }\n\n      // 2. Populate all filter controls on the page once\n      this.populateAllFilterControls(programFilters);\n\n      // 3. Initialize each list\n      for (const listElement of listElements) {\n        await this.initList(listElement);\n      }\n\n      // 4. Wire up all action buttons and filter controls\n      this.wireActionButtons();\n      this.wireFilterControls();\n\n      this.log('Runtime initialization complete');\n    } catch (error) {\n      this.log('Runtime initialization failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize a single expert list.\n   */\n  private async initList(listElement: Element): Promise<void> {\n    const listId = this.getAttr(listElement, ATTRS.listId);\n    const programId = this.getAttr(listElement, ATTRS.program);\n\n    if (!listId || !programId) {\n      this.log('List element is missing required attributes `data-contra-list-id` or `data-contra-program`.', listElement);\n      return;\n    }\n\n    this.log(`Initializing list: ${listId} for program: ${programId}`);\n\n    try {\n      (listElement as HTMLElement).setAttribute('data-contra-initialized', 'true');\n      (listElement as HTMLElement).classList.add('contra-list');\n      \n      const template = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.template}]`);\n      if (template) {\n          (template as HTMLElement).style.display = 'none';\n          this.log(`Template found and hidden for list: ${listId}`);\n      }\n      \n      // Defensively remove inline display styles from state elements to prevent conflicts.\n      const loadingEl = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n      if (loadingEl) (loadingEl as HTMLElement).style.removeProperty('display');\n      const emptyEl = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n      if (emptyEl) (emptyEl as HTMLElement).style.removeProperty('display');\n\n      const initialFilters = this.parseFiltersFromElement(listElement);\n      const limit = parseInt(this.getAttr(listElement, ATTRS.limit) || '20', 10);\n      \n      this.state.updateState(listId, { \n      filters: initialFilters,\n        limit: limit,\n        offset: initialFilters.offset || 0,\n      });\n      \n      this.state.updateState(listId, { loading: true, error: null });\n      this.showLoading(listElement, true);\n\n      const response = await this.client.listExperts(programId, initialFilters);\n      \n      this.log(`Loaded ${response.data.length} experts for list ${listId}`, response);\n\n      const newExperts = response.data;\n      const allExperts = newExperts;\n\n      // Update state before touching the DOM\n      this.state.updateState(listId, {\n        experts: allExperts,\n        totalCount: response.totalCount,\n        offset: initialFilters.offset || 0 + newExperts.length,\n        hasNextPage: newExperts.length === limit,\n        loading: false\n      });\n\n      // Render experts and then immediately update all UI states\n      this.renderExperts(listElement, newExperts, false);\n      this.updateUIStates(listElement, listId);\n\n    } catch (error) {\n      this.log(`Failed to initialize list ${listId}`, error);\n      this.state.updateState(listId, { loading: false, error: error as Error });\n      this.showError(listElement, error as Error);\n    } finally {\n      this.showLoading(listElement, false);\n    }\n  }\n\n  /**\n   * Wire up all action buttons on the page.\n   */\n  private wireActionButtons(): void {\n    const actionButtons = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.action}]`);\n    \n    actionButtons.forEach(button => {\n      const action = this.getAttr(button, ATTRS.action);\n      const targetListId = this.getAttr(button, ATTRS.listTarget);\n      \n      if (!action || !targetListId) {\n        this.log('Action button is missing required `data-contra-action` or `data-contra-list-target` attributes.', button);\n        return;\n      }\n\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.handleAction(action, targetListId, button);\n      });\n    });\n  }\n\n  /**\n   * Load experts for a given list.\n   */\n  private async loadExperts(listId: string, programId: string, append = false): Promise<void> {\n    const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${listId}\"]`);\n    if (!listElement) {\n      this.log(`Cannot find list element with ID: ${listId}`);\n          return;\n        }\n\n    // When reloading the list (not appending), we must hide the empty state message first.\n    const emptyElement = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (!append && emptyElement) {\n        (emptyElement as HTMLElement).style.display = 'none';\n    }\n\n    const state = this.state.getState(listId);\n    const filters = {\n      ...state.filters,\n      limit: state.limit,\n      offset: state.offset,\n    };\n    \n    this.log(`Loading experts for list: ${listId}`, filters);\n\n    try {\n      this.showLoading(listElement, true);\n      this.state.updateState(listId, { loading: true, error: null });\n\n      const response = await this.client.listExperts(programId, filters);\n      \n      this.log(`Loaded ${response.data.length} experts for list ${listId}`, response);\n\n      const newExperts = response.data;\n      const allExperts = append ? [...state.experts, ...newExperts] : newExperts;\n\n      // Update state before touching the DOM\n      this.state.updateState(listId, {\n        experts: allExperts,\n        totalCount: response.totalCount,\n        offset: state.offset + newExperts.length,\n        hasNextPage: newExperts.length === state.limit,\n        loading: false\n      });\n\n      // Render experts and then immediately update all UI states\n      this.renderExperts(listElement, newExperts, append);\n      this.updateUIStates(listElement, listId);\n\n    } catch (error) {\n      this.log(`Failed to load experts for list: ${listId}`, error);\n      this.state.updateState(listId, { loading: false, error: error as Error });\n      this.showError(listElement, error as Error);\n    } finally {\n      // Always ensure loading state is removed\n      this.showLoading(listElement, false);\n    }\n  }\n\n  /**\n   * Render experts into the container. Can clear or append.\n   */\n  private renderExperts(listElement: Element, experts: ExpertProfile[], append: boolean): void {\n    const template = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    if (!template) {\n      this.log('No template found in list', listElement);\n      return;\n    }\n\n    if (!append) {\n      // Clear only previously rendered expert cards\n      const existingCards = this.querySelectorAll(listElement, '.contra-rendered-item');\n    existingCards.forEach(card => card.remove());\n    }\n\n    const fragment = document.createDocumentFragment();\n    experts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert);\n      fragment.appendChild(expertCard);\n    });\n    listElement.appendChild(fragment);\n\n    this.log(`Rendered ${experts.length} expert cards into list`, listElement);\n  }\n\n  /**\n   * Populate expert card from template\n   */\n  private populateExpertCard(template: Element, expert: ExpertProfile): Element {\n    const card = template.cloneNode(true) as Element;\n    \n    // Add a marker class to identify this as a rendered card\n    card.classList.add('contra-rendered-item');\n    \n    // Remove template attribute and show the card\n    card.removeAttribute(`${ATTR_PREFIX}${ATTRS.template}`);\n    (card as HTMLElement).style.display = '';\n\n    // Populate field bindings\n    this.populateFields(card, expert);\n    \n    // Handle repeating elements (projects, social links)\n    this.populateRepeatingElements(card, expert);\n    \n    // Handle conditional display\n    this.handleConditionalDisplay(card, expert);\n\n    return card;\n  }\n\n  /**\n   * Populate data fields in the card\n   */\n  private populateFields(card: Element, expert: ExpertProfile): void {\n    const fieldElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.field}]`);\n    \n    fieldElements.forEach(element => {\n      const fieldName = this.getAttr(element, ATTRS.field) as ExpertField;\n      const format = this.getAttr(element, ATTRS.format);\n      \n      if (!fieldName || !(fieldName in expert)) return;\n\n      const value = expert[fieldName];\n      this.setElementValue(element, value, format);\n    });\n\n    // Handle star ratings\n    const starsElements = this.querySelectorAll(card, '[data-contra-stars]');\n    starsElements.forEach(element => {\n      if (expert.averageReviewScore) {\n        this.renderStarRating(element, expert.averageReviewScore);\n      }\n    });\n  }\n\n  /**\n   * Set element value with proper formatting\n   */\n  private setElementValue(element: Element, value: any, format?: string | null): void {\n    if (value == null || value === '') return;\n\n    // Media type detection and handling\n    if (this.isMediaField(element) && typeof value === 'string' && value.trim()) {\n      this.setMediaValue(element, value);\n      return;\n    }\n\n    if (element instanceof HTMLAnchorElement) {\n      element.href = String(value);\n      if (element.children.length === 0 && !element.textContent?.trim()) {\n        element.textContent = String(value);\n      }\n    } else if (element instanceof HTMLInputElement) {\n      element.value = String(value);\n    } else if (element instanceof HTMLImageElement) {\n      // Regular image handling for avatars and other images\n      const mediaType = this.detectMediaType(String(value));\n      const transformedUrl = this.transformMediaUrl(String(value), mediaType);\n      element.src = transformedUrl;\n      element.alt = element.alt || 'Image';\n    } else {\n      // Text content with formatting\n      let displayValue = String(value);\n      \n      if (format) {\n        switch (format) {\n          case 'currency':\n            displayValue = typeof value === 'number' ? `$${value}` : displayValue;\n            break;\n          case 'rate':\n            displayValue = utils.formatRate(typeof value === 'number' ? value : null);\n            break;\n          case 'rating':\n            // Format rating to one decimal place (5.0, 4.9, etc.)\n            displayValue = typeof value === 'number' ? value.toFixed(1) : displayValue;\n            break;\n          case 'earnings':\n            // Format earnings like $25k+\n            if (typeof value === 'number') {\n              if (value >= 1000000) {\n                displayValue = `$${Math.floor(value / 1000000)}M+`;\n              } else if (value >= 1000) {\n                displayValue = `$${Math.floor(value / 1000)}k+`;\n              } else {\n                displayValue = `$${value}`;\n              }\n            }\n            break;\n          case 'number':\n            displayValue = typeof value === 'number' ? value.toLocaleString() : displayValue;\n            break;\n          case 'truncate':\n            displayValue = displayValue.length > 100 ? displayValue.substring(0, 97) + '...' : displayValue;\n            break;\n          case 'boolean':\n            displayValue = value ? 'Yes' : 'No';\n            break;\n          case 'availability':\n            displayValue = value ? 'Available' : 'Not Available';\n            break;\n        }\n      }\n      \n      element.textContent = displayValue;\n    }\n  }\n\n  /**\n   * Star rating rendering with optional text display\n   */\n  private renderStarRating(element: Element, rating: number): void {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    let starsHtml = '';\n    \n    // Full stars\n    for (let i = 0; i < fullStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-full\">★</span>';\n    }\n    \n    // Half star\n    if (hasHalfStar) {\n      starsHtml += '<span class=\"contra-star contra-star-half\">★</span>';\n    }\n    \n    // Empty stars\n    for (let i = 0; i < emptyStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-empty\">☆</span>';\n    }\n    \n    element.innerHTML = starsHtml;\n    \n    // Also update any rating text elements in the same card\n    const card = element.closest('[data-contra-template]') || element.closest('.expert-card');\n    if (card) {\n      const ratingTextElements = this.querySelectorAll(card, '[data-contra-rating-text]');\n      ratingTextElements.forEach(textElement => {\n        textElement.textContent = rating.toFixed(1);\n      });\n    }\n  }\n\n  /**\n   * Media type detection and element handling\n   */\n  private isMediaField(element: Element): boolean {\n    const field = this.getAttr(element, ATTRS.field);\n    // Only apply advanced media handling to project cover URLs, not avatars\n    return field === 'coverUrl';\n  }\n\n  /**\n   * Media value setting with automatic type detection\n   */\n  private setMediaValue(element: Element, url: string): void {\n    const mediaType = this.detectMediaType(url);\n    const parent = element.parentElement;\n    \n    if (!parent) {\n      this.log('Media element has no parent for replacement', element);\n      return;\n    }\n\n    // Remove existing media element\n    element.remove();\n\n    // Create appropriate media element\n    let mediaElement: HTMLElement;\n    \n    switch (mediaType) {\n      case 'video':\n        const transformedVideoUrl = this.transformMediaUrl(url, 'video');\n        mediaElement = this.createVideoElement(transformedVideoUrl, element);\n        break;\n      case 'image':\n      default:\n        const transformedImageUrl = this.transformMediaUrl(url, 'image');\n        mediaElement = this.createImageElement(transformedImageUrl, element);\n        break;\n    }\n\n    // Preserve classes and attributes from original element\n    this.transferAttributes(element, mediaElement);\n    \n    // Insert new media element\n    parent.appendChild(mediaElement);\n    \n    this.log(`Created ${mediaType} element for URL: ${url}`);\n  }\n\n  /**\n   * Detect media type from URL\n   */\n  private detectMediaType(url: string): 'image' | 'video' {\n    if (!url || typeof url !== 'string') {\n      this.log('Invalid URL provided to detectMediaType:', url);\n      return 'image';\n    }\n    \n    const urlLower = url.toLowerCase();\n\n    // If optimizing GIFs as videos, treat them as such immediately.\n    if (this.config.optimizeGifsAsVideo && urlLower.endsWith('.gif')) {\n        return 'video';\n    }\n    \n    // Video formats - check for extensions and Cloudinary video path\n    const videoExtensions = ['.mp4', '.webm', '.mov', '.avi', '.mkv', '.ogg'];\n    const isVideoExtension = videoExtensions.some(ext => urlLower.endsWith(ext));\n    const isCloudinaryVideo = urlLower.includes('cloudinary.com/') && urlLower.includes('/video/');\n    \n    if (isVideoExtension || isCloudinaryVideo) {\n      return 'video';\n    }\n    \n    // Default to image\n    return 'image';\n  }\n\n  /**\n   * Create video element with fallback\n   */\n  private createVideoElement(url: string, originalElement: Element): HTMLVideoElement {\n    const video = document.createElement('video');\n    \n    // Video attributes\n    video.src = url;\n    video.loop = this.config.videoLoop;\n    video.playsInline = true; // Essential for inline playback on iOS\n    video.preload = 'metadata';\n    video.controls = this.config.videoControls;\n\n    // Muted is critical for autoplay on mobile.\n    if (this.config.videoMuted) {\n        video.muted = true;\n        video.setAttribute('muted', ''); // Set attribute for maximum compatibility\n    }\n    \n    // Maintain aspect ratio and object-fit from original\n    video.style.width = '100%';\n    video.style.height = '100%';\n    video.style.objectFit = 'cover';\n    video.style.borderRadius = 'inherit';\n    \n    // Autoplay configuration\n    if (this.config.videoAutoplay) {\n      video.autoplay = true;\n      video.setAttribute('autoplay', '');\n    }\n    \n    // Generate and test poster URL before applying\n    const posterUrl = this.extractVideoThumbnail(url);\n    if (posterUrl) {\n      // Test poster before applying\n      const testPoster = new Image();\n      testPoster.onload = () => {\n        video.poster = posterUrl;\n        this.log(`✅ Applied poster: ${posterUrl.split('/').pop()}`);\n      };\n      testPoster.onerror = () => {\n        this.log(`⚠️ Generated poster failed: ${posterUrl.split('/').pop()}`);\n      };\n      testPoster.src = posterUrl;\n    }\n    \n    // Error handling with fallback to poster or placeholder\n    video.onerror = () => {\n      this.log(`Video failed to load: ${url}`);\n      // Create a fallback image element\n      const fallbackImg = this.createImageElement(posterUrl || url, originalElement);\n      if (video.parentElement) {\n        video.parentElement.replaceChild(fallbackImg, video);\n      }\n    };\n\n    // Hover-to-play functionality (if enabled and not autoplay)\n    if (this.config.videoHoverPlay && !this.config.videoAutoplay) {\n      let isPlaying = false;\n      \n      const playVideo = () => {\n        if (!isPlaying) {\n          video.currentTime = 0;\n          video.play().then(() => {\n            isPlaying = true;\n          }).catch((error) => {\n            this.log('Video play failed:', error);\n          });\n        }\n      };\n      \n      const pauseVideo = () => {\n        if (isPlaying) {\n          video.pause();\n          video.currentTime = 0;\n          isPlaying = false;\n        }\n      };\n\n      // Desktop events\n      video.addEventListener('mouseenter', playVideo);\n      video.addEventListener('mouseleave', pauseVideo);\n      \n      // Mobile (touch) events - simplified approach\n      let touchTimeout: number;\n      \n      video.addEventListener('touchstart', (e) => {\n        // Clear any existing timeout\n        if (touchTimeout) {\n          clearTimeout(touchTimeout);\n        }\n        \n        // Start playing on touch\n        playVideo();\n        \n        // Set a timeout to pause after 3 seconds if no touchend\n        touchTimeout = window.setTimeout(() => {\n          pauseVideo();\n        }, 3000);\n      }, { passive: true });\n      \n      video.addEventListener('touchend', () => {\n        // Clear timeout and pause\n        if (touchTimeout) {\n          clearTimeout(touchTimeout);\n        }\n        // Small delay before pausing to avoid immediate pause on quick taps\n        setTimeout(pauseVideo, 100);\n      }, { passive: true });\n    }\n\n    return video;\n  }\n\n  /**\n   * Create image element with error handling\n   */\n  private createImageElement(url: string, originalElement: Element): HTMLImageElement {\n    const img = document.createElement('img');\n    \n    img.src = url;\n    img.alt = originalElement.getAttribute('alt') || 'Media content';\n    img.loading = 'lazy';\n    \n    // Maintain styling\n    img.style.width = '100%';\n    img.style.height = '100%';\n    img.style.objectFit = 'cover';\n    img.style.borderRadius = 'inherit';\n    \n    // Error handling\n    img.onerror = () => {\n      this.log(`Image failed to load: ${url}`);\n      img.style.background = '#f3f4f6';\n      img.style.opacity = '0.5';\n      img.alt = 'Image unavailable';\n      \n      // Add broken image icon\n      img.style.position = 'relative';\n      const placeholder = document.createElement('div');\n      placeholder.style.cssText = `\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        color: #9ca3af;\n        font-size: 12px;\n        text-align: center;\n      `;\n      placeholder.textContent = '🖼️ Image unavailable';\n      img.parentElement?.appendChild(placeholder);\n    };\n\n    return img;\n  }\n\n  /**\n   * Extract video thumbnail from Cloudinary URL\n   */\n  private extractVideoThumbnail(videoUrl: string): string | null {\n    if (!this.isValidCloudinaryUrl(videoUrl)) return null;\n    \n    try {\n      let posterUrl = videoUrl;\n      \n      // Convert video path to image path\n      if (posterUrl.includes('/video/')) {\n        posterUrl = posterUrl.replace('/video/', '/image/');\n      }\n      \n      // Handle file extensions safely\n      const extensionMatch = posterUrl.match(/\\.(mp4|webm|mov|avi|mkv|ogg)(\\?.*)?$/i);\n      if (extensionMatch) {\n        const query = extensionMatch[2] || '';\n        posterUrl = posterUrl.replace(extensionMatch[0], '.jpg' + query);\n      } else if (!posterUrl.includes('.jpg') && !posterUrl.includes('.png')) {\n        // If no video extension found, assume it needs .jpg\n        const queryIndex = posterUrl.indexOf('?');\n        if (queryIndex > -1) {\n          posterUrl = posterUrl.substring(0, queryIndex) + '.jpg' + posterUrl.substring(queryIndex);\n        } else {\n          posterUrl += '.jpg';\n        }\n      }\n      \n      // Apply image transformations for poster\n      const posterTransformed = this.transformMediaUrl(posterUrl, 'image');\n      \n      this.log(`Generated poster URL: ${videoUrl} -> ${posterTransformed}`);\n      return posterTransformed;\n      \n    } catch (error) {\n      this.log(`Failed to generate poster for: ${videoUrl}`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Check if URL is a valid Cloudinary/Contra media URL\n   */\n  private isValidCloudinaryUrl(url: string): boolean {\n    if (!url || typeof url !== 'string') return false;\n    return (url.includes('cloudinary.com') || url.includes('media.contra.com')) && url.includes('/upload/');\n  }\n\n  /**\n   * Transfer attributes and classes from old element to new\n   */\n  private transferAttributes(from: Element, to: HTMLElement): void {\n    // Transfer classes\n    if (from.className) {\n      to.className = from.className;\n    }\n    \n    // Transfer data attributes (except contra-field)\n    Array.from(from.attributes).forEach(attr => {\n      if (attr.name.startsWith('data-') && attr.name !== `${ATTR_PREFIX}${ATTRS.field}`) {\n        to.setAttribute(attr.name, attr.value);\n      }\n    });\n    \n    // Transfer style\n    if (from.getAttribute('style')) {\n      const existingStyle = to.getAttribute('style') || '';\n      to.setAttribute('style', existingStyle + '; ' + from.getAttribute('style'));\n    }\n  }\n\n  /**\n   * Handle repeating elements (projects, social links)\n   */\n  private populateRepeatingElements(card: Element, expert: ExpertProfile): void {\n    const repeatElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.repeat}]`);\n    \n    repeatElements.forEach(container => {\n      const repeatType = this.getAttr(container, ATTRS.repeat);\n      const maxItems = parseInt(this.getAttr(container, ATTRS.max) || '10');\n      \n      if (repeatType === 'projects' && expert.projects) {\n        this.populateRepeatingContainer(container, expert.projects.slice(0, maxItems));\n      } else if (repeatType === 'socialLinks' && expert.socialLinks) {\n        this.populateRepeatingContainer(container, expert.socialLinks.slice(0, maxItems));\n      } else if (repeatType === 'skillTags' && expert.skillTags) {\n        this.populateRepeatingContainer(container, expert.skillTags.slice(0, maxItems).map((tag: string) => ({ name: tag })));\n      }\n    });\n  }\n\n  /**\n   * Populate a repeating container with items\n   */\n  private populateRepeatingContainer(container: Element, items: any[]): void {\n    const template = container.firstElementChild;\n    if (!template) return;\n\n    // Clear existing items\n    container.innerHTML = '';\n    \n    // Create items from template\n    items.forEach(item => {\n      const itemElement = template.cloneNode(true) as Element;\n      \n      // Special handling for different item types\n      const containerType = this.getAttr(container, ATTRS.repeat);\n      if (containerType === 'skillTags' && typeof item === 'object' && item.name) {\n        // For skill tags, directly set the text content instead of using populateFields\n        const nameElement = this.querySelector(itemElement, `[${ATTR_PREFIX}${ATTRS.field}=\"name\"]`);\n        if (nameElement) {\n          nameElement.textContent = item.name;\n        }\n      } else {\n        // For other types (projects, socialLinks), use normal field population\n        this.populateFields(itemElement, item);\n      }\n      \n      container.appendChild(itemElement);\n    });\n    \n    // Hide container if no items\n    if (items.length === 0) {\n      (container as HTMLElement).style.display = 'none';\n    }\n  }\n\n  /**\n   * Handle conditional display based on data\n   */\n  private handleConditionalDisplay(card: Element, expert: ExpertProfile): void {\n    const conditionalElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.showWhen}], [${ATTR_PREFIX}${ATTRS.hideWhen}]`);\n    \n    conditionalElements.forEach(element => {\n      const showWhen = this.getAttr(element, ATTRS.showWhen);\n      const hideWhen = this.getAttr(element, ATTRS.hideWhen);\n      \n      let shouldShow = true;\n      \n      if (showWhen) {\n        shouldShow = this.evaluateCondition(expert, showWhen);\n      }\n      \n      if (hideWhen) {\n        shouldShow = shouldShow && !this.evaluateCondition(expert, hideWhen);\n      }\n      \n      (element as HTMLElement).style.display = shouldShow ? '' : 'none';\n    });\n  }\n\n  /**\n   * Evaluate a condition against expert data\n   */\n  private evaluateCondition(expert: ExpertProfile, condition: string): boolean {\n    if (!condition || typeof condition !== 'string') {\n      this.log('Invalid condition provided:', condition);\n      return false;\n    }\n    \n    // Parse condition: \"field:value\" or \"field:>value\" etc.\n    const parts = condition.split(':');\n    if (parts.length < 2) {\n      this.log('Invalid condition format:', condition);\n      return false;\n    }\n    \n    const field = parts[0];\n    const restOfCondition = parts.slice(1).join(':'); // Handle colons in values\n    const expertValue = (expert as any)[field];\n    \n    this.log(`Evaluating condition: ${field} (${expertValue}, type: ${typeof expertValue}) against ${restOfCondition}`);\n    \n    if (expertValue == null) {\n      this.log(`Field '${field}' is null/undefined, condition fails`);\n      return false;\n    }\n    \n    // Check for comparison operators\n    if (restOfCondition.startsWith('>=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) >= Number(value);\n      this.log(`Comparison: ${expertValue} >= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) <= Number(value);\n      this.log(`Comparison: ${expertValue} <= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('>')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) > Number(value);\n      this.log(`Comparison: ${expertValue} > ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) < Number(value);\n      this.log(`Comparison: ${expertValue} < ${value} = ${result}`);\n      return result;\n    } else {\n      // Direct value comparison with type-aware handling\n      let result = false;\n      \n      // Handle boolean fields specially\n      if (typeof expertValue === 'boolean') {\n        // Convert string condition to boolean for comparison\n        if (restOfCondition.toLowerCase() === 'true') {\n          result = expertValue === true;\n        } else if (restOfCondition.toLowerCase() === 'false') {\n          result = expertValue === false;\n        } else {\n          result = false;\n        }\n        this.log(`Boolean comparison: ${expertValue} === ${restOfCondition.toLowerCase() === 'true'} = ${result}`);\n      } else if (typeof expertValue === 'number') {\n        // Handle numeric comparisons\n        const numValue = Number(restOfCondition);\n        result = !isNaN(numValue) && expertValue === numValue;\n        this.log(`Number comparison: ${expertValue} === ${numValue} = ${result}`);\n      } else {\n        // String comparison (case-insensitive)\n        const expertStr = String(expertValue);\n        const valueStr = String(restOfCondition);\n        result = expertStr.toLowerCase() === valueStr.toLowerCase();\n        this.log(`String comparison: '${expertStr}' === '${valueStr}' = ${result}`);\n      }\n      \n      return result;\n    }\n  }\n\n  /**\n   * Update UI states based on current data for a specific list.\n   */\n  private updateUIStates(listElement: Element, listId: string): void {\n    const state = this.state.getState(listId);\n    \n    const emptyElement = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (emptyElement) {\n        const showEmpty = !state.loading && state.experts.length === 0;\n        const display = showEmpty ? 'block' : 'none';\n        (emptyElement as HTMLElement).style.setProperty('display', display, 'important');\n        this.log(`List ${listId}: Empty state display set to '${display}'.`);\n    }\n    \n    const loadMoreButton = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.action}=\"load-more\"][${ATTR_PREFIX}${ATTRS.listTarget}=\"${listId}\"]`);\n    if (loadMoreButton) {\n      const btn = loadMoreButton as HTMLButtonElement;\n      const hasMore = !state.loading && state.hasNextPage;\n      const display = hasMore ? 'inline-block' : 'none';\n      (loadMoreButton as HTMLElement).style.setProperty('display', display, 'important');\n      btn.disabled = state.loading;\n      btn.textContent = state.loading ? 'Loading...' : 'Load More';\n    }\n  }\n\n  /**\n   * Handle action buttons (just load-more for now).\n   */\n  private handleAction(action: string, targetListId: string, button: Element): void {\n    if (action === 'load-more') {\n      const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${targetListId}\"]`);\n      const programId = this.getAttr(listElement!, ATTRS.program);\n      if (listElement && programId) {\n        this.loadExperts(targetListId, programId, true); // `true` to append\n      } else {\n        this.log(`Could not find list or program for target: ${targetListId}`);\n      }\n    } else if (action === 'clear-filters') {\n      this.clearFilters(targetListId);\n    }\n  }\n\n  private clearFilters(targetListId: string): void {\n    const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${targetListId}\"]`);\n    if (!listElement) {\n        this.log(`Cannot find list element with ID: ${targetListId} to clear filters.`);\n        return;\n    }\n    const programId = this.getAttr(listElement, ATTRS.program);\n    if (!programId) {\n        this.log(`Cannot find programId for list: ${targetListId}`);\n        return;\n    }\n\n    this.log(`Clearing filters for list: ${targetListId}`);\n\n    // 1. Reset state\n    this.state.updateState(targetListId, { filters: {}, offset: 0 });\n\n    // 2. Reset controls visually\n    const filterControls = this.querySelectorAll(document.body, `[data-contra-filter][data-contra-list-target=\"${targetListId}\"]`);\n    filterControls.forEach(control => {\n        this.resetControlValue(control as HTMLInputElement | HTMLSelectElement);\n    });\n\n    // 3. Reload data\n    this.loadExperts(targetListId, programId, false); // false to replace, not append\n  }\n\n  private resetControlValue(control: HTMLInputElement | HTMLSelectElement): void {\n    if (control instanceof HTMLInputElement) {\n        switch (control.type) {\n            case 'checkbox':\n            case 'radio':\n                control.checked = false;\n                break;\n            case 'number':\n            case 'range':\n                control.value = '';\n                break;\n            default: // text, search, etc.\n                control.value = '';\n                break;\n        }\n    } else if (control instanceof HTMLSelectElement) {\n        control.selectedIndex = 0; // Reset to the first option\n    }\n  }\n\n  private updateFilterAndReload(listId: string, programId: string, filterKey: string, value: any): void {\n    const state = this.state.getState(listId);\n    const newFilters = { ...state.filters };\n\n    // Process and set value\n    let processedValue = value;\n    if (filterKey === 'available') {\n      // If checkbox is checked, value is true. If unchecked, it's false.\n      // We only want to apply the filter when it's true.\n      processedValue = value ? true : undefined;\n    } else if (['minRate', 'maxRate'].includes(filterKey)) {\n      processedValue = (value === '' || value === null) ? undefined : Number(value);\n    } else if (filterKey === 'languages' && typeof value === 'string') {\n        processedValue = value.split(',').map(v => v.trim()).filter(v => v);\n        if (processedValue.length === 0) {\n            processedValue = undefined;\n        }\n    }\n\n    if (processedValue !== undefined && processedValue !== '') {\n        const apiKey = this.filterNameMap[filterKey] || filterKey;\n        (newFilters as any)[apiKey] = processedValue;\n    } else {\n        const apiKey = this.filterNameMap[filterKey] || filterKey;\n        delete (newFilters as any)[apiKey];\n    }\n    \n    // Reset offset and update state\n    this.state.updateState(listId, { filters: newFilters, offset: 0 });\n\n    this.log(`Filter updated for list ${listId}, reloading. New filters:`, newFilters);\n    \n    // Reload the list\n    this.loadExperts(listId, programId, false);\n  }\n\n  private wireFilterControls(): void {\n    const filterControls = this.querySelectorAll(document.body, `[data-contra-filter]`);\n    this.log(`Found ${filterControls.length} filter controls to wire.`);\n\n    filterControls.forEach(control => {\n        const filterKey = control.getAttribute('data-contra-filter');\n        const targetListId = control.getAttribute('data-contra-list-target');\n\n        if (!filterKey || !targetListId) {\n            this.log('Filter control missing required attributes: data-contra-filter or data-contra-list-target', control);\n            return;\n        }\n\n        const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}list-id=\"${targetListId}\"]`);\n        if (!listElement) return;\n        const programId = this.getAttr(listElement, ATTRS.program);\n        if (!programId) return;\n\n        const debounceTime = (control instanceof HTMLInputElement && ['text', 'search'].includes(control.type)) ? 300 : 0;\n        \n        const handler = () => {\n            const value = this.getControlValue(control as HTMLInputElement | HTMLSelectElement);\n            this.updateFilterAndReload(targetListId, programId, filterKey, value);\n        };\n        \n        const debouncedHandler = this.debounce(handler, debounceTime);\n        \n        const eventType = (control instanceof HTMLInputElement && ['text', 'search'].includes(control.type)) ? 'input' : 'change';\n        control.addEventListener(eventType, debouncedHandler);\n    });\n  }\n\n  private debounce(func: (...args: any[]) => void, delay: number): (...args: any[]) => void {\n    let timeoutId: number;\n    return (...args: any[]) => {\n        clearTimeout(timeoutId);\n        if (delay > 0) {\n            timeoutId = window.setTimeout(() => func.apply(this, args), delay);\n        } else {\n            func.apply(this, args);\n        }\n    };\n  }\n\n  /**\n   * Utility Methods\n   */\n  private getAttr(element: Element, name: string): string | null {\n    return element.getAttribute(`${ATTR_PREFIX}${name}`);\n  }\n\n  private querySelector(element: Element, selector: string): Element | null {\n    return element.querySelector(selector);\n  }\n\n  private querySelectorAll(element: Element, selector: string): Element[] {\n    return Array.from(element.querySelectorAll(selector));\n  }\n\n  private parseFiltersFromElement(element: Element): ExpertFilters {\n    const filters: ExpertFilters = {};\n    \n    // Parse filter attributes\n    const filterMap = {\n      'available': 'available',\n      'languages': 'languages', \n      'location': 'location',\n      'min-rate': 'minRate',\n      'max-rate': 'maxRate',\n      'sort': 'sortBy',\n      'limit': 'limit',\n      'offset': 'offset'\n    };\n\n    Object.entries(filterMap).forEach(([attr, filterKey]) => {\n      const value = this.getAttr(element, attr);\n      if (value != null) {\n        if (filterKey === 'available') {\n          (filters as any)[filterKey] = value === 'true';\n        } else if (filterKey === 'languages') {\n          (filters as any)[filterKey] = value.split(',').map(v => v.trim());\n        } else if (['minRate', 'maxRate', 'limit', 'offset'].includes(filterKey)) {\n          (filters as any)[filterKey] = parseInt(value);\n        } else {\n          (filters as any)[filterKey] = value;\n        }\n      }\n    });\n\n    // Ensure offset defaults to 0 if not specified\n    if (filters.offset === undefined) {\n      filters.offset = 0;\n    }\n\n    return filters;\n  }\n\n  private getControlValue(control: HTMLInputElement | HTMLSelectElement): any {\n    if (control instanceof HTMLInputElement) {\n      switch (control.type) {\n        case 'checkbox':\n          return control.checked;\n        case 'number':\n        case 'range':\n          return control.valueAsNumber;\n        default:\n          return control.value;\n      }\n    } else if (control instanceof HTMLSelectElement) {\n      if (control.multiple) {\n        return Array.from(control.selectedOptions).map(option => option.value);\n      }\n      return control.value;\n    }\n    return null;\n  }\n\n  private showLoading(container: Element, show: boolean): void {\n    const loadingElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n    if (loadingElement) {\n      const display = show ? 'block' : 'none';\n      (loadingElement as HTMLElement).style.setProperty('display', display, 'important');\n    }\n  }\n\n  private showError(container: Element, error: Error): void {\n    const errorElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.error}]`);\n    if (errorElement) {\n      errorElement.textContent = error.message;\n      (errorElement as HTMLElement).style.setProperty('display', 'block', 'important');\n    }\n    (container as HTMLElement).classList.add(this.config.errorClass);\n    this.log('Error displayed', error);\n  }\n\n  private dispatchEvent(target: Element | Document, eventName: string, detail: any): void {\n    const event = new CustomEvent(`contra:${eventName}`, { detail });\n    target.dispatchEvent(event);\n  }\n\n  private log(message: string, ...args: any[]): void {\n    if (this.config.debug) {\n      console.log(`[ContraWebflow] ${message}`, ...args);\n    }\n  }\n\n  private async getAvailableFilters(programId: string): Promise<any[]> {\n    const url = `https://contra.com/public-api/programs/${programId}/filters`;\n    this.log(`Fetching available filters for program: ${programId}`);\n    try {\n        const response = await fetch(url, {\n            headers: {\n                'X-API-Key': this.config.apiKey,\n                'Accept': 'application/json'\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Failed to fetch filters: ${response.statusText}`);\n        }\n        const data = await response.json();\n        this.log('Successfully fetched filters', data.data);\n        return data.data || [];\n    } catch (error) {\n        this.log('Error fetching available filters', error);\n        return [];\n    }\n  }\n  \n  private getFilterOptionLabel(filterKey: string, value: string): string {\n    const labels = this.filterOptionLabels[filterKey];\n    if (labels && labels[value]) {\n      return labels[value];\n    }\n    // Capitalize the first letter and lowercase the rest as a fallback\n    return value.charAt(0).toUpperCase() + value.slice(1).toLowerCase();\n  }\n\n  private populateAllFilterControls(programFilters: Map<string, any[]>): void {\n    this.log('Populating all filter controls on the page...');\n    const allControls = this.querySelectorAll(document.body, `[data-contra-filter]`);\n\n    allControls.forEach(control => {\n      const targetListId = control.getAttribute('data-contra-list-target');\n      if (!targetListId) return;\n\n      const targetList = this.querySelector(document.body, `[data-contra-list-id=\"${targetListId}\"]`);\n      if (!targetList) return;\n\n      const programId = this.getAttr(targetList, ATTRS.program);\n      if (!programId) return;\n\n      const filters = programFilters.get(programId);\n      if (!filters) return;\n\n      const filterKey = control.getAttribute('data-contra-filter');\n      const filterDef = filters.find(f => f.name === filterKey);\n\n      if (!filterDef) return;\n\n      // Handle number input ranges\n      if (filterDef.type === 'number' && control instanceof HTMLInputElement) {\n        if (filterDef.minimum !== undefined) control.min = String(filterDef.minimum);\n        if (filterDef.maximum !== undefined) control.max = String(filterDef.maximum);\n      }\n      \n      // Handle populating controls with options (select, datalist)\n      if (filterDef.options) {\n          if (control instanceof HTMLSelectElement) {\n              this.populateSelectControl(control, filterKey!, filterDef.options);\n          } else if (control instanceof HTMLInputElement && control.getAttribute('list')) {\n              this.populateDatalistControl(control, filterKey!, filterDef.options);\n          }\n      }\n    });\n  }\n\n  private populateSelectControl(control: HTMLSelectElement, filterKey: string, options: any[]): void {\n    this.log(`Populating options for filter '${filterKey}' on control`, control);\n    \n    const placeholder = control.firstElementChild?.cloneNode(true) as Element | null;\n    control.innerHTML = '';\n    if (placeholder && placeholder.getAttribute('value') === '') {\n      control.appendChild(placeholder);\n    }\n\n    options.forEach((option: any) => {\n      const optionElement = document.createElement('option');\n      const value = typeof option === 'object' && option.value !== undefined ? option.value : String(option);\n      \n      optionElement.value = value;\n\n      let label: string;\n      if (filterKey === 'locations') {\n        const labelMatch = value.match(/^(.*?)\\s*\\(/);\n        label = labelMatch ? labelMatch[1].trim() : value;\n      } else {\n        label = this.getFilterOptionLabel(filterKey!, value);\n      }\n      optionElement.textContent = label;\n      \n      if (filterKey === 'sortBy' && value === 'relevance') {\n        optionElement.selected = true;\n      }\n      control.appendChild(optionElement);\n    });\n  }\n\n  private populateDatalistControl(control: HTMLInputElement, filterKey: string, options: any[]): void {\n      const datalistId = control.getAttribute('list');\n      if (!datalistId) return;\n\n      const datalist = document.getElementById(datalistId);\n      if (!datalist) {\n          this.log(`Datalist with id '${datalistId}' not found for input control.`, control);\n          return;\n      }\n\n      this.log(`Populating datalist '#${datalistId}' for filter '${filterKey}'`);\n      datalist.innerHTML = ''; // Clear existing options\n\n      options.forEach((option: any) => {\n          const optionElement = document.createElement('option');\n          const value = typeof option === 'object' && option.value !== undefined ? option.value : String(option);\n          \n          let displayValue = value;\n          // For locations, we want a cleaner value for the user to select.\n          if (filterKey === 'locations') {\n              const labelMatch = value.match(/^(.*?)\\s*\\(/);\n              displayValue = labelMatch ? labelMatch[1].trim() : value;\n          }\n\n          optionElement.value = displayValue;\n          datalist.appendChild(optionElement);\n      });\n  }\n\n  private transformMediaUrl(url: string, mediaType: 'image' | 'video'): string {\n    if (!url || (!url.includes('cloudinary.com/') && !url.includes('media.contra.com/'))) {\n        return url;\n    }\n\n    const transformations = mediaType === 'image' \n        ? this.config.imageTransformations \n        : this.config.videoTransformations;\n\n    if (!transformations) {\n        return url;\n    }\n\n    let processedUrl = url;\n    if (mediaType === 'video' && url.toLowerCase().endsWith('.gif')) {\n        processedUrl = url.replace(/\\.gif$/i, '.mp4');\n        this.log(`Converting GIF to MP4: ${processedUrl}`);\n    }\n\n    const uploadMarker = '/upload/';\n    const parts = processedUrl.split(uploadMarker);\n\n    if (parts.length !== 2) {\n        this.log(`Could not apply transformations, URL format unexpected: ${processedUrl}`);\n        return processedUrl;\n    }\n    \n    const [baseUrl, path] = parts;\n    let pathComponents = path.split('/');\n    \n    const firstPathComponent = pathComponents[0];\n    const hasExistingTransformations = CLOUDINARY_TRANSFORM_PREFIXES.some(prefix => firstPathComponent.includes(prefix));\n\n    if (hasExistingTransformations) {\n        this.log(`Removing existing transformations from URL: ${processedUrl}`);\n        pathComponents.shift();\n    }\n\n    const cleanPath = pathComponents.join('/');\n    const finalUrl = `${baseUrl}${uploadMarker}${transformations}/${cleanPath}`;\n    \n    this.log(`Transformed ${mediaType} URL from \"${url}\" to \"${finalUrl}\"`);\n    return finalUrl;\n  }\n}\n\n/**\n * Auto-initialize runtime when DOM is ready\n */\nfunction autoInit(): void {\n  const configElement = document.getElementById('contra-config');\n  if (!configElement) {\n    console.warn('[ContraWebflow] No config element found. Runtime not initialized.');\n    return;\n  }\n\n  try {\n    const config = JSON.parse(configElement.textContent || '{}');\n    \n    // Validate required config\n    if (!config.apiKey) {\n      console.error('[ContraWebflow] API key is required in config.');\n      return;\n    }\n    \n    const initializeRuntime = () => {\n    const runtime = new ContraWebflowRuntime(config);\n    \n    // Expose runtime globally for debugging\n    (window as any).contraRuntime = runtime;\n    \n    runtime.init().catch(error => {\n      console.error('[ContraWebflow] Runtime initialization failed:', error);\n    });\n    };\n    \n    // Use setTimeout to ensure DOM is fully ready\n    setTimeout(initializeRuntime, 100);\n    \n  } catch (error) {\n    console.error('[ContraWebflow] Failed to parse config:', error);\n  }\n}\n\n// Auto-initialize when DOM is ready with multiple fallbacks\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', autoInit);\n} else if (document.readyState === 'interactive') {\n  // DOM is ready but resources might still be loading\n  setTimeout(autoInit, 50);\n} else {\n  // DOM and resources are ready\n  autoInit();\n}\n\n// Export runtime class for manual initialization\nexport { ContraWebflowRuntime as default }; "]}
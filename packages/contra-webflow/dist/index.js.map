{"version":3,"sources":["../src/runtime.ts"],"names":["CLOUDINARY_TRANSFORM_PREFIXES","ATTR_PREFIX","ATTRS","RuntimeState","listId","updates","state","ContraWebflowRuntime","config","ContraClient","listElements","programFilters","listElement","programId","error","template","loadingEl","emptyEl","initialFilters","limit","response","newExperts","allExperts","button","action","targetListId","e","append","emptyElement","filters","experts","card","fragment","expert","expertCard","element","fieldName","format","value","mediaType","transformedUrl","displayValue","utils","rating","fullStars","hasHalfStar","emptyStars","starsHtml","i","textElement","url","parent","mediaElement","transformedVideoUrl","transformedImageUrl","urlLower","isVideoExtension","ext","isCloudinaryVideo","originalElement","video","posterUrl","fallbackImg","isPlaying","playVideo","pauseVideo","touchTimeout","img","placeholder","videoUrl","uploadMarker","parts","baseUrl","path","pathComponents","firstPathComponent","prefix","newTransformations","param","newPath","finalUrl","from","to","attr","existingStyle","container","repeatType","maxItems","tag","items","item","itemElement","nameElement","showWhen","hideWhen","shouldShow","condition","field","restOfCondition","expertValue","result","numValue","expertStr","valueStr","display","loadMoreButton","btn","control","filterKey","newFilters","processedValue","v","apiKey","filterControls","debounceTime","handler","debouncedHandler","eventType","func","delay","timeoutId","args","name","selector","option","show","loadingElement","errorElement","target","eventName","detail","event","message","data","labels","targetList","filterDef","options","optionElement","label","labelMatch","datalistId","datalist","transformations","processedUrl","cleanPath","autoInit","configElement","runtime"],"mappings":"kDAkCMA,IAAAA,CAAAA,CAAgC,CACpC,IAAA,CAAM,IAAM,CAAA,IAAA,CAAM,KAAM,IAAM,CAAA,KAAA,CAAO,KAAO,CAAA,IAAA,CAAM,IAAM,CAAA,IAAA,CAAM,KAAM,MAAQ,CAAA,KAC9E,CAGMC,CAAAA,CAAAA,CAAc,cACdC,CAAAA,CAAAA,CAAQ,CAEZ,MAAQ,CAAA,SAAA,CACR,OAAS,CAAA,SAAA,CACT,QAAU,CAAA,UAAA,CAGV,QAAS,SACT,CAAA,KAAA,CAAO,OACP,CAAA,KAAA,CAAO,OAGP,CAAA,KAAA,CAAO,QACP,MAAQ,CAAA,QAAA,CAGR,MAAQ,CAAA,QAAA,CACR,GAAK,CAAA,KAAA,CAGL,MAAO,OAGP,CAAA,MAAA,CAAQ,QACR,CAAA,UAAA,CAAY,aAGZ,CAAA,QAAA,CAAU,YACV,QAAU,CAAA,WACZ,EAGMC,CAAN,CAAA,KAAmB,CAAnB,WACE,EAAA,CAAA,IAAA,CAAQ,MAAS,CAAA,IAAI,IAWrB,CAAA,QAAA,CAASC,EAAgB,CACvB,OAAK,IAAK,CAAA,MAAA,CAAO,GAAIA,CAAAA,CAAM,GACzB,IAAK,CAAA,MAAA,CAAO,GAAIA,CAAAA,CAAAA,CAAQ,CACtB,OAAA,CAAS,EACT,CAAA,OAAA,CAAS,EAAC,CACV,OAAS,CAAA,KAAA,CACT,MAAO,IACP,CAAA,MAAA,CAAQ,CACR,CAAA,KAAA,CAAO,EACP,CAAA,UAAA,CAAY,EACZ,WAAa,CAAA,KACf,CAAC,CAAA,CAEI,IAAK,CAAA,MAAA,CAAO,IAAIA,CAAM,CAC/B,CAEA,WAAA,CAAYA,CAAgBC,CAAAA,CAAAA,CAAwD,CAClF,IAAMC,CAAAA,CAAQ,KAAK,QAASF,CAAAA,CAAM,EAClC,MAAO,CAAA,MAAA,CAAOE,CAAOD,CAAAA,CAAO,CAC5B,CAAA,IAAA,CAAK,OAAO,GAAID,CAAAA,CAAAA,CAAQE,CAAK,EAC/B,CACF,CAAA,CAKaC,EAAN,KAA2B,CAkBhC,WAAYC,CAAAA,CAAAA,CAAuB,CAfnC,IAAA,CAAQ,MAAQ,IAAIL,CAAAA,CACpB,IAAQ,CAAA,eAAA,CAA2C,IAAI,GAAA,CACvD,KAAQ,aAAwC,CAAA,CAC9C,SAAW,CAAA,UACb,CACA,CAAA,IAAA,CAAQ,mBAA6D,CACnE,MAAA,CAAQ,CACN,SAAA,CAAW,WACX,CAAA,MAAA,CAAQ,SACR,MAAQ,CAAA,QAAA,CACR,QAAU,CAAA,oBAAA,CACV,SAAW,CAAA,oBACb,CACF,CAGE,CAAA,IAAA,CAAK,MAAS,CAAA,CACZ,KAAO,CAAA,KAAA,CACP,aAAc,SACd,CAAA,UAAA,CAAY,OACZ,CAAA,UAAA,CAAY,OAEZ,CAAA,aAAA,CAAe,MACf,cAAgB,CAAA,IAAA,CAChB,UAAY,CAAA,IAAA,CACZ,SAAW,CAAA,IAAA,CACX,cAAe,KAEf,CAAA,oBAAA,CAAsB,iCACtB,CAAA,oBAAA,CAAsB,wDACtB,CAAA,mBAAA,CAAqB,KACrB,GAAGK,CACL,CAEA,CAAA,IAAA,CAAK,MAAS,CAAA,IAAIC,oBAAa,CAC7B,MAAA,CAAQ,IAAK,CAAA,MAAA,CAAO,MACpB,CAAA,KAAA,CAAO,KAAK,MAAO,CAAA,KACrB,CAAC,CAAA,CAED,IAAK,CAAA,GAAA,CAAI,sBAAuB,IAAK,CAAA,MAAM,EAC7C,CAKA,MAAM,IAAA,EAAsB,CAC1B,IAAK,CAAA,GAAA,CAAI,yBAAyB,CAElC,CAAA,GAAI,CAEF,IAAMC,CAAAA,CAAe,IAAK,CAAA,gBAAA,CAAiB,QAAS,CAAA,IAAA,CAAM,IAAIT,CAAW,CAAA,EAAGC,CAAM,CAAA,MAAM,CAAG,CAAA,CAAA,CAAA,CAC3F,KAAK,GAAI,CAAA,CAAA,MAAA,EAASQ,CAAa,CAAA,MAAM,CAAuB,qBAAA,CAAA,CAAA,CAE5D,IAAMC,CAAiB,CAAA,IAAI,GAC3B,CAAA,IAAA,IAAWC,CAAeF,IAAAA,CAAAA,CAAc,CACtC,IAAMG,CAAAA,CAAY,IAAK,CAAA,OAAA,CAAQD,CAAaV,CAAAA,CAAAA,CAAM,OAAO,CACrDW,CAAAA,CAAAA,EAAa,CAACF,CAAAA,CAAe,GAAIE,CAAAA,CAAS,IAC5C,IAAK,CAAA,GAAA,CAAI,CAAiCA,8BAAAA,EAAAA,CAAS,CAAE,CAAA,CAAA,CACrDF,EAAe,GAAIE,CAAAA,CAAAA,CAAW,MAAM,IAAK,CAAA,mBAAA,CAAoBA,CAAS,CAAC,CAAA,EAE3E,CAGA,IAAA,CAAK,yBAA0BF,CAAAA,CAAc,EAG7C,IAAWC,IAAAA,CAAAA,IAAeF,CACxB,CAAA,MAAM,IAAK,CAAA,QAAA,CAASE,CAAW,CAIjC,CAAA,IAAA,CAAK,iBAAkB,EAAA,CACvB,IAAK,CAAA,kBAAA,GAEL,IAAK,CAAA,GAAA,CAAI,iCAAiC,EAC5C,CAASE,MAAAA,CAAAA,CAAO,CACd,MAAK,IAAA,CAAA,GAAA,CAAI,+BAAiCA,CAAAA,CAAK,CACzCA,CAAAA,CACR,CACF,CAKA,MAAc,QAASF,CAAAA,CAAAA,CAAqC,CAC1D,IAAMR,EAAS,IAAK,CAAA,OAAA,CAAQQ,CAAaV,CAAAA,CAAAA,CAAM,MAAM,CAAA,CAC/CW,EAAY,IAAK,CAAA,OAAA,CAAQD,EAAaV,CAAM,CAAA,OAAO,EAEzD,GAAI,CAACE,CAAU,EAAA,CAACS,CAAW,CAAA,CACzB,KAAK,GAAI,CAAA,6FAAA,CAA+FD,CAAW,CAAA,CACnH,MACF,CAEA,KAAK,GAAI,CAAA,CAAA,mBAAA,EAAsBR,CAAM,CAAA,cAAA,EAAiBS,CAAS,CAAA,CAAE,EAEjE,GAAI,CACDD,CAA4B,CAAA,YAAA,CAAa,yBAA2B,CAAA,MAAM,EAC1EA,CAA4B,CAAA,SAAA,CAAU,GAAI,CAAA,aAAa,CAExD,CAAA,IAAMG,EAAW,IAAK,CAAA,aAAA,CAAcH,CAAa,CAAA,CAAA,CAAA,EAAIX,CAAW,CAAA,EAAGC,EAAM,QAAQ,CAAA,CAAA,CAAG,CAChFa,CAAAA,CAAAA,GACCA,CAAyB,CAAA,KAAA,CAAM,QAAU,MAC1C,CAAA,IAAA,CAAK,GAAI,CAAA,CAAA,oCAAA,EAAuCX,CAAM,CAAA,CAAE,GAI5D,IAAMY,CAAAA,CAAY,IAAK,CAAA,aAAA,CAAcJ,CAAa,CAAA,CAAA,CAAA,EAAIX,CAAW,CAAGC,EAAAA,CAAAA,CAAM,OAAO,CAAA,CAAA,CAAG,CAChFc,CAAAA,CAAAA,EAAYA,EAA0B,KAAM,CAAA,cAAA,CAAe,SAAS,CAAA,CACxE,IAAMC,CAAAA,CAAU,KAAK,aAAcL,CAAAA,CAAAA,CAAa,CAAIX,CAAAA,EAAAA,CAAW,CAAGC,EAAAA,CAAAA,CAAM,KAAK,CAAG,CAAA,CAAA,CAAA,CAC5Ee,CAAUA,EAAAA,CAAAA,CAAwB,KAAM,CAAA,cAAA,CAAe,SAAS,CAEpE,CAAA,IAAMC,CAAiB,CAAA,IAAA,CAAK,uBAAwBN,CAAAA,CAAW,EACzDO,CAAQ,CAAA,QAAA,CAAS,IAAK,CAAA,OAAA,CAAQP,CAAaV,CAAAA,CAAAA,CAAM,KAAK,CAAK,EAAA,IAAA,CAAM,EAAE,CAEzE,CAAA,IAAA,CAAK,MAAM,WAAYE,CAAAA,CAAAA,CAAQ,CAC/B,OAAA,CAASc,CACP,CAAA,KAAA,CAAOC,EACP,MAAQD,CAAAA,CAAAA,CAAe,MAAU,EAAA,CACnC,CAAC,CAAA,CAED,KAAK,KAAM,CAAA,WAAA,CAAYd,CAAQ,CAAA,CAAE,OAAS,CAAA,CAAA,CAAA,CAAM,MAAO,IAAK,CAAC,CAC7D,CAAA,IAAA,CAAK,WAAYQ,CAAAA,CAAAA,CAAa,EAAI,CAElC,CAAA,IAAMQ,CAAW,CAAA,MAAM,IAAK,CAAA,MAAA,CAAO,YAAYP,CAAWK,CAAAA,CAAc,CAExE,CAAA,IAAA,CAAK,GAAI,CAAA,CAAA,OAAA,EAAUE,EAAS,IAAK,CAAA,MAAM,CAAqBhB,kBAAAA,EAAAA,CAAM,CAAIgB,CAAAA,CAAAA,CAAQ,EAE9E,IAAMC,CAAAA,CAAaD,EAAS,IACtBE,CAAAA,CAAAA,CAAaD,EAGnB,IAAK,CAAA,KAAA,CAAM,WAAYjB,CAAAA,CAAAA,CAAQ,CAC7B,OAAA,CAASkB,EACT,UAAYF,CAAAA,CAAAA,CAAS,UACrB,CAAA,MAAA,CAAQF,CAAe,CAAA,MAAA,EAAU,EAAIG,CAAW,CAAA,MAAA,CAChD,WAAaA,CAAAA,CAAAA,CAAW,MAAWF,GAAAA,CAAAA,CACnC,QAAS,CACX,CAAA,CAAC,CAGD,CAAA,IAAA,CAAK,aAAcP,CAAAA,CAAAA,CAAaS,EAAY,CAAK,CAAA,CAAA,CACjD,IAAK,CAAA,cAAA,CAAeT,CAAaR,CAAAA,CAAM,EAEzC,CAASU,MAAAA,CAAAA,CAAO,CACd,IAAA,CAAK,GAAI,CAAA,CAAA,0BAAA,EAA6BV,CAAM,CAAIU,CAAAA,CAAAA,CAAK,CACrD,CAAA,IAAA,CAAK,KAAM,CAAA,WAAA,CAAYV,EAAQ,CAAE,OAAA,CAAS,MAAO,KAAOU,CAAAA,CAAe,CAAC,CACxE,CAAA,IAAA,CAAK,SAAUF,CAAAA,CAAAA,CAAaE,CAAc,EAC5C,QAAE,CACA,IAAA,CAAK,WAAYF,CAAAA,CAAAA,CAAa,KAAK,EACrC,CACF,CAKQ,iBAAA,EAA0B,CACV,IAAA,CAAK,gBAAiB,CAAA,QAAA,CAAS,KAAM,CAAIX,CAAAA,EAAAA,CAAW,CAAGC,EAAAA,CAAAA,CAAM,MAAM,CAAA,CAAA,CAAG,EAE9E,OAAQqB,CAAAA,CAAAA,EAAU,CAC9B,IAAMC,CAAS,CAAA,IAAA,CAAK,QAAQD,CAAQrB,CAAAA,CAAAA,CAAM,MAAM,CAAA,CAC1CuB,CAAe,CAAA,IAAA,CAAK,QAAQF,CAAQrB,CAAAA,CAAAA,CAAM,UAAU,CAAA,CAE1D,GAAI,CAACsB,GAAU,CAACC,CAAAA,CAAc,CAC5B,IAAA,CAAK,GAAI,CAAA,iGAAA,CAAmGF,CAAM,CAClH,CAAA,MACF,CAEAA,CAAAA,CAAO,gBAAiB,CAAA,OAAA,CAAUG,GAAM,CACtCA,CAAAA,CAAE,cAAe,EAAA,CACjB,IAAK,CAAA,YAAA,CAAaF,EAAQC,CAAcF,CAAAA,CAAM,EAChD,CAAC,EACH,CAAC,EACH,CAKA,MAAc,WAAYnB,CAAAA,CAAAA,CAAgBS,CAAmBc,CAAAA,CAAAA,CAAS,MAAsB,CAC1F,IAAMf,CAAc,CAAA,IAAA,CAAK,aAAc,CAAA,QAAA,CAAS,KAAM,CAAIX,CAAAA,EAAAA,CAAW,CAAGC,EAAAA,CAAAA,CAAM,MAAM,CAAA,EAAA,EAAKE,CAAM,CAAI,EAAA,CAAA,CAAA,CACnG,GAAI,CAACQ,CAAa,CAAA,CAChB,KAAK,GAAI,CAAA,CAAA,kCAAA,EAAqCR,CAAM,CAAE,CAAA,CAAA,CAClD,MACF,CAGJ,IAAMwB,CAAe,CAAA,IAAA,CAAK,aAAchB,CAAAA,CAAAA,CAAa,IAAIX,CAAW,CAAA,EAAGC,CAAM,CAAA,KAAK,CAAG,CAAA,CAAA,CAAA,CACjF,CAACyB,CAAUC,EAAAA,CAAAA,GACVA,CAA6B,CAAA,KAAA,CAAM,OAAU,CAAA,MAAA,CAAA,CAGlD,IAAMtB,CAAQ,CAAA,IAAA,CAAK,KAAM,CAAA,QAAA,CAASF,CAAM,CAAA,CAClCyB,EAAU,CACd,GAAGvB,CAAM,CAAA,OAAA,CACT,KAAOA,CAAAA,CAAAA,CAAM,MACb,MAAQA,CAAAA,CAAAA,CAAM,MAChB,CAAA,CAEA,IAAK,CAAA,GAAA,CAAI,6BAA6BF,CAAM,CAAA,CAAA,CAAIyB,CAAO,CAAA,CAEvD,GAAI,CACF,KAAK,WAAYjB,CAAAA,CAAAA,CAAa,CAAI,CAAA,CAAA,CAClC,IAAK,CAAA,KAAA,CAAM,YAAYR,CAAQ,CAAA,CAAE,OAAS,CAAA,CAAA,CAAA,CAAM,KAAO,CAAA,IAAK,CAAC,CAE7D,CAAA,IAAMgB,CAAW,CAAA,MAAM,IAAK,CAAA,MAAA,CAAO,YAAYP,CAAWgB,CAAAA,CAAO,CAEjE,CAAA,IAAA,CAAK,GAAI,CAAA,CAAA,OAAA,EAAUT,EAAS,IAAK,CAAA,MAAM,CAAqBhB,kBAAAA,EAAAA,CAAM,CAAIgB,CAAAA,CAAAA,CAAQ,EAE9E,IAAMC,CAAAA,CAAaD,CAAS,CAAA,IAAA,CACtBE,CAAaK,CAAAA,CAAAA,CAAS,CAAC,GAAGrB,CAAAA,CAAM,OAAS,CAAA,GAAGe,CAAU,CAAA,CAAIA,EAGhE,IAAK,CAAA,KAAA,CAAM,WAAYjB,CAAAA,CAAAA,CAAQ,CAC7B,OAAA,CAASkB,EACT,UAAYF,CAAAA,CAAAA,CAAS,WACrB,MAAQd,CAAAA,CAAAA,CAAM,OAASe,CAAW,CAAA,MAAA,CAClC,WAAaA,CAAAA,CAAAA,CAAW,MAAWf,GAAAA,CAAAA,CAAM,MACzC,OAAS,CAAA,CAAA,CACX,CAAC,CAAA,CAGD,IAAK,CAAA,aAAA,CAAcM,EAAaS,CAAYM,CAAAA,CAAM,CAClD,CAAA,IAAA,CAAK,cAAef,CAAAA,CAAAA,CAAaR,CAAM,EAEzC,CAAA,MAASU,CAAO,CAAA,CACd,IAAK,CAAA,GAAA,CAAI,oCAAoCV,CAAM,CAAA,CAAA,CAAIU,CAAK,CAAA,CAC5D,IAAK,CAAA,KAAA,CAAM,YAAYV,CAAQ,CAAA,CAAE,OAAS,CAAA,KAAA,CAAO,KAAOU,CAAAA,CAAe,CAAC,CACxE,CAAA,IAAA,CAAK,SAAUF,CAAAA,CAAAA,CAAaE,CAAc,EAC5C,QAAE,CAEA,IAAA,CAAK,WAAYF,CAAAA,CAAAA,CAAa,KAAK,EACrC,CACF,CAKQ,aAAA,CAAcA,CAAsBkB,CAAAA,CAAAA,CAA0BH,CAAuB,CAAA,CAC3F,IAAMZ,CAAW,CAAA,IAAA,CAAK,aAAcH,CAAAA,CAAAA,CAAa,CAAIX,CAAAA,EAAAA,CAAW,GAAGC,CAAM,CAAA,QAAQ,CAAG,CAAA,CAAA,CAAA,CACpF,GAAI,CAACa,EAAU,CACb,IAAA,CAAK,GAAI,CAAA,2BAAA,CAA6BH,CAAW,CAAA,CACjD,MACF,CAEKe,CAAAA,EAEmB,IAAK,CAAA,gBAAA,CAAiBf,CAAa,CAAA,uBAAuB,EACpE,OAAQmB,CAAAA,CAAAA,EAAQA,CAAK,CAAA,MAAA,EAAQ,CAAA,CAG3C,IAAMC,CAAW,CAAA,QAAA,CAAS,sBAAuB,EAAA,CACjDF,CAAQ,CAAA,OAAA,CAAQG,GAAU,CACxB,IAAMC,EAAa,IAAK,CAAA,kBAAA,CAAmBnB,EAAUkB,CAAM,CAAA,CAC3DD,CAAS,CAAA,WAAA,CAAYE,CAAU,EACjC,CAAC,CACDtB,CAAAA,CAAAA,CAAY,WAAYoB,CAAAA,CAAQ,CAEhC,CAAA,IAAA,CAAK,IAAI,CAAYF,SAAAA,EAAAA,CAAAA,CAAQ,MAAM,CAAA,uBAAA,CAAA,CAA2BlB,CAAW,EAC3E,CAKQ,kBAAmBG,CAAAA,CAAAA,CAAmBkB,CAAgC,CAAA,CAC5E,IAAMF,CAAAA,CAAOhB,EAAS,SAAU,CAAA,IAAI,CAGpC,CAAA,OAAAgB,CAAK,CAAA,SAAA,CAAU,IAAI,sBAAsB,CAAA,CAGzCA,CAAK,CAAA,eAAA,CAAgB,CAAG9B,EAAAA,CAAW,GAAGC,CAAM,CAAA,QAAQ,CAAE,CAAA,CAAA,CACrD6B,CAAqB,CAAA,KAAA,CAAM,QAAU,EAGtC,CAAA,IAAA,CAAK,eAAeA,CAAME,CAAAA,CAAM,EAGhC,IAAK,CAAA,yBAAA,CAA0BF,CAAME,CAAAA,CAAM,CAG3C,CAAA,IAAA,CAAK,yBAAyBF,CAAME,CAAAA,CAAM,CAEnCF,CAAAA,CACT,CAKQ,cAAA,CAAeA,EAAeE,CAA6B,CAAA,CAC3C,IAAK,CAAA,gBAAA,CAAiBF,CAAM,CAAA,CAAA,CAAA,EAAI9B,CAAW,CAAGC,EAAAA,CAAAA,CAAM,KAAK,CAAA,CAAA,CAAG,CAEpE,CAAA,OAAA,CAAQiC,GAAW,CAC/B,IAAMC,CAAY,CAAA,IAAA,CAAK,OAAQD,CAAAA,CAAAA,CAASjC,EAAM,KAAK,CAAA,CAC7CmC,CAAS,CAAA,IAAA,CAAK,OAAQF,CAAAA,CAAAA,CAASjC,EAAM,MAAM,CAAA,CAEjD,GAAI,CAACkC,CAAa,EAAA,EAAEA,KAAaH,CAAS,CAAA,CAAA,OAE1C,IAAMK,CAAQL,CAAAA,CAAAA,CAAOG,CAAS,CAC9B,CAAA,IAAA,CAAK,eAAgBD,CAAAA,CAAAA,CAASG,CAAOD,CAAAA,CAAM,EAC7C,CAAC,CAAA,CAGqB,IAAK,CAAA,gBAAA,CAAiBN,CAAM,CAAA,qBAAqB,EACzD,OAAQI,CAAAA,CAAAA,EAAW,CAC3BF,CAAAA,CAAO,kBACT,EAAA,IAAA,CAAK,iBAAiBE,CAASF,CAAAA,CAAAA,CAAO,kBAAkB,EAE5D,CAAC,EACH,CAKQ,eAAgBE,CAAAA,CAAAA,CAAkBG,CAAYD,CAAAA,CAAAA,CAA8B,CAClF,GAAI,EAAAC,CAAS,EAAA,IAAA,EAAQA,CAAU,GAAA,EAAA,CAAA,CAG/B,CAAI,GAAA,IAAA,CAAK,aAAaH,CAAO,CAAA,EAAK,OAAOG,CAAAA,EAAU,QAAYA,EAAAA,CAAAA,CAAM,MAAQ,CAAA,CAC3E,IAAK,CAAA,aAAA,CAAcH,CAASG,CAAAA,CAAK,EACjC,MACF,CAEA,GAAIH,CAAAA,YAAmB,iBACrBA,CAAAA,CAAAA,CAAQ,KAAO,MAAOG,CAAAA,CAAK,CACvBH,CAAAA,CAAAA,CAAQ,QAAS,CAAA,MAAA,GAAW,GAAK,CAACA,CAAAA,CAAQ,WAAa,EAAA,IAAA,EACzDA,GAAAA,CAAAA,CAAQ,YAAc,MAAOG,CAAAA,CAAK,CAE3BH,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,YAAmB,gBAC5BA,CAAAA,CAAAA,CAAQ,MAAQ,MAAOG,CAAAA,CAAK,CACnBH,CAAAA,KAAAA,GAAAA,CAAAA,YAAmB,gBAAkB,CAAA,CAE9C,IAAMI,CAAY,CAAA,IAAA,CAAK,eAAgB,CAAA,MAAA,CAAOD,CAAK,CAAC,EAC9CE,CAAiB,CAAA,IAAA,CAAK,iBAAkB,CAAA,MAAA,CAAOF,CAAK,CAAA,CAAGC,CAAS,CACtEJ,CAAAA,CAAAA,CAAQ,IAAMK,CACdL,CAAAA,CAAAA,CAAQ,IAAMA,CAAQ,CAAA,GAAA,EAAO,QAC/B,CAAA,KAAO,CAEL,IAAIM,EAAe,MAAOH,CAAAA,CAAK,CAE/B,CAAA,GAAID,CACF,CAAA,OAAQA,GACN,KAAK,UACHI,CAAAA,CAAAA,CAAe,OAAOH,CAAAA,EAAU,SAAW,CAAIA,CAAAA,EAAAA,CAAK,CAAKG,CAAAA,CAAAA,CAAAA,CACzD,MACF,KAAK,OACHA,CAAeC,CAAAA,YAAAA,CAAM,UAAW,CAAA,OAAOJ,CAAU,EAAA,QAAA,CAAWA,EAAQ,IAAI,CAAA,CACxE,MACF,KAAK,QAEHG,CAAAA,CAAAA,CAAe,OAAOH,CAAU,EAAA,QAAA,CAAWA,CAAM,CAAA,OAAA,CAAQ,CAAC,CAAA,CAAIG,EAC9D,MACF,KAAK,WAEC,OAAOH,CAAAA,EAAU,WACfA,CAAS,EAAA,GAAA,CACXG,CAAe,CAAA,CAAA,CAAA,EAAI,IAAK,CAAA,KAAA,CAAMH,EAAQ,GAAO,CAAC,CACrCA,EAAAA,CAAAA,CAAAA,CAAAA,EAAS,GAClBG,CAAAA,CAAAA,CAAe,IAAI,IAAK,CAAA,KAAA,CAAMH,CAAQ,CAAA,GAAI,CAAC,CAAA,EAAA,CAAA,CAE3CG,EAAe,CAAIH,CAAAA,EAAAA,CAAK,CAG5B,CAAA,CAAA,CAAA,MACF,KAAK,QAAA,CACHG,EAAe,OAAOH,CAAAA,EAAU,QAAWA,CAAAA,CAAAA,CAAM,cAAe,EAAA,CAAIG,EACpE,MACF,KAAK,UACHA,CAAAA,CAAAA,CAAeA,CAAa,CAAA,MAAA,CAAS,IAAMA,CAAa,CAAA,SAAA,CAAU,CAAG,CAAA,EAAE,CAAI,CAAA,KAAA,CAAQA,EACnF,MACF,KAAK,UACHA,CAAeH,CAAAA,CAAAA,CAAQ,MAAQ,IAC/B,CAAA,MACF,KAAK,cAAA,CACHG,CAAeH,CAAAA,CAAAA,CAAQ,YAAc,eACrC,CAAA,KACJ,CAGFH,CAAAA,CAAQ,WAAcM,CAAAA,EACxB,EACF,CAKQ,gBAAA,CAAiBN,CAAkBQ,CAAAA,CAAAA,CAAsB,CAC/D,IAAMC,EAAY,IAAK,CAAA,KAAA,CAAMD,CAAM,CAAA,CAC7BE,CAAcF,CAAAA,CAAAA,CAAS,GAAK,EAC5BG,CAAAA,CAAAA,CAAa,CAAIF,CAAAA,CAAAA,EAAaC,CAAc,CAAA,CAAA,CAAI,GAElDE,CAAY,CAAA,EAAA,CAGhB,IAASC,IAAAA,CAAAA,CAAI,CAAGA,CAAAA,CAAAA,CAAIJ,EAAWI,CAC7BD,EAAAA,CAAAA,CAAAA,EAAa,0DAIXF,CAAAA,CAAAA,GACFE,CAAa,EAAA,0DAAA,CAAA,CAIf,QAASC,CAAI,CAAA,CAAA,CAAGA,CAAIF,CAAAA,CAAAA,CAAYE,CAC9BD,EAAAA,CAAAA,CAAAA,EAAa,4DAGfZ,CAAQ,CAAA,SAAA,CAAYY,CAGpB,CAAA,IAAMhB,CAAOI,CAAAA,CAAAA,CAAQ,QAAQ,wBAAwB,CAAA,EAAKA,CAAQ,CAAA,OAAA,CAAQ,cAAc,CAAA,CACpFJ,GACyB,IAAK,CAAA,gBAAA,CAAiBA,CAAM,CAAA,2BAA2B,CAC/D,CAAA,OAAA,CAAQkB,GAAe,CACxCA,CAAAA,CAAY,WAAcN,CAAAA,CAAAA,CAAO,OAAQ,CAAA,CAAC,EAC5C,CAAC,EAEL,CAKQ,YAAA,CAAaR,CAA2B,CAAA,CAG9C,OAFc,IAAK,CAAA,OAAA,CAAQA,CAASjC,CAAAA,CAAAA,CAAM,KAAK,CAAA,GAE9B,UACnB,CAKQ,aAAA,CAAciC,CAAkBe,CAAAA,CAAAA,CAAmB,CACzD,IAAMX,EAAY,IAAK,CAAA,eAAA,CAAgBW,CAAG,CACpCC,CAAAA,CAAAA,CAAShB,EAAQ,aAEvB,CAAA,GAAI,CAACgB,CAAAA,CAAQ,CACX,IAAA,CAAK,IAAI,6CAA+ChB,CAAAA,CAAO,CAC/D,CAAA,MACF,CAGAA,CAAAA,CAAQ,QAGR,CAAA,IAAIiB,CAEJ,CAAA,OAAQb,CAAW,EACjB,KAAK,OACH,CAAA,IAAMc,CAAsB,CAAA,IAAA,CAAK,iBAAkBH,CAAAA,CAAAA,CAAK,OAAO,CAC/DE,CAAAA,CAAAA,CAAe,IAAK,CAAA,kBAAA,CAAmBC,CAAqBlB,CAAAA,CAAO,EACnE,MACF,KAAK,OACL,CAAA,QACE,IAAMmB,CAAAA,CAAsB,KAAK,iBAAkBJ,CAAAA,CAAAA,CAAK,OAAO,CAAA,CAC/DE,CAAe,CAAA,IAAA,CAAK,mBAAmBE,CAAqBnB,CAAAA,CAAO,EACnE,KACJ,CAGA,KAAK,kBAAmBA,CAAAA,CAAAA,CAASiB,CAAY,CAAA,CAG7CD,CAAO,CAAA,WAAA,CAAYC,CAAY,CAE/B,CAAA,IAAA,CAAK,GAAI,CAAA,CAAA,QAAA,EAAWb,CAAS,CAAA,kBAAA,EAAqBW,CAAG,CAAE,CAAA,EACzD,CAKQ,eAAA,CAAgBA,CAAgC,CAAA,CACtD,GAAI,CAACA,CAAAA,EAAO,OAAOA,CAAAA,EAAQ,QACzB,CAAA,OAAA,IAAA,CAAK,IAAI,0CAA4CA,CAAAA,CAAG,CACjD,CAAA,OAAA,CAGT,IAAMK,CAAAA,CAAWL,EAAI,WAAY,EAAA,CAGjC,GAAI,IAAA,CAAK,MAAO,CAAA,mBAAA,EAAuBK,EAAS,QAAS,CAAA,MAAM,CAC3D,CAAA,OAAO,OAKX,CAAA,IAAMC,EADkB,CAAC,MAAA,CAAQ,QAAS,MAAQ,CAAA,MAAA,CAAQ,OAAQ,MAAM,CAAA,CAC/B,IAAKC,CAAAA,CAAAA,EAAOF,CAAS,CAAA,QAAA,CAASE,CAAG,CAAC,CAAA,CACrEC,CAAoBH,CAAAA,CAAAA,CAAS,QAAS,CAAA,iBAAiB,GAAKA,CAAS,CAAA,QAAA,CAAS,SAAS,CAAA,CAE7F,OAAIC,CAAAA,EAAoBE,EACf,OAIF,CAAA,OACT,CAKQ,kBAAA,CAAmBR,CAAaS,CAAAA,CAAAA,CAA4C,CAClF,IAAMC,CAAAA,CAAQ,QAAS,CAAA,aAAA,CAAc,OAAO,CAAA,CAG5CA,EAAM,GAAMV,CAAAA,CAAAA,CACZU,CAAM,CAAA,IAAA,CAAO,IAAK,CAAA,MAAA,CAAO,UACzBA,CAAM,CAAA,WAAA,CAAc,IACpBA,CAAAA,CAAAA,CAAM,OAAU,CAAA,UAAA,CAChBA,EAAM,QAAW,CAAA,IAAA,CAAK,MAAO,CAAA,aAAA,CAG7B,IAAMC,CAAAA,CAAY,KAAK,qBAAsBX,CAAAA,CAAG,CAmChD,CAAA,GAlCIW,CACFD,GAAAA,CAAAA,CAAM,OAASC,CACf,CAAA,IAAA,CAAK,GAAI,CAAA,CAAA,qBAAA,EAAwBX,CAAG,CAAA,EAAA,EAAKW,CAAS,CAAE,CAAA,CAAA,CAAA,CAIlD,IAAK,CAAA,MAAA,CAAO,UACZD,GAAAA,CAAAA,CAAM,MAAQ,IACdA,CAAAA,CAAAA,CAAM,YAAa,CAAA,OAAA,CAAS,EAAE,CAAA,CAAA,CAIlCA,EAAM,KAAM,CAAA,KAAA,CAAQ,MACpBA,CAAAA,CAAAA,CAAM,KAAM,CAAA,MAAA,CAAS,OACrBA,CAAM,CAAA,KAAA,CAAM,SAAY,CAAA,OAAA,CACxBA,CAAM,CAAA,KAAA,CAAM,aAAe,SAGvB,CAAA,IAAA,CAAK,MAAO,CAAA,aAAA,GACdA,CAAM,CAAA,QAAA,CAAW,KACjBA,CAAM,CAAA,YAAA,CAAa,WAAY,EAAE,CAAA,CAAA,CAInCA,EAAM,OAAU,CAAA,IAAM,CACpB,IAAA,CAAK,GAAI,CAAA,CAAA,sBAAA,EAAyBV,CAAG,CAAE,CAAA,CAAA,CAEvC,IAAMY,CAAAA,CAAc,IAAK,CAAA,kBAAA,CAAmBD,GAAaX,CAAKS,CAAAA,CAAe,CACzEC,CAAAA,CAAAA,CAAM,aACRA,EAAAA,CAAAA,CAAM,cAAc,YAAaE,CAAAA,CAAAA,CAAaF,CAAK,EAEvD,CAGI,CAAA,IAAA,CAAK,OAAO,cAAkB,EAAA,CAAC,IAAK,CAAA,MAAA,CAAO,aAAe,CAAA,CAC5D,IAAIG,CAAY,CAAA,KAAA,CAEVC,CAAY,CAAA,IAAM,CACjBD,CAAAA,GACLH,EAAM,WAAc,CAAA,CAAA,CAClBA,CAAM,CAAA,IAAA,EAAO,CAAA,IAAA,CAAK,IAAM,CACtBG,CAAAA,CAAY,KACd,CAAC,CAAE,CAAA,KAAA,CAAOjD,GAAU,CAClB,IAAA,CAAK,GAAI,CAAA,oBAAA,CAAsBA,CAAK,EACtC,CAAC,CAEL,EAAA,CAAA,CAEMmD,CAAa,CAAA,IAAM,CACnBF,CAAAA,GACJH,EAAM,KAAM,EAAA,CACZA,CAAM,CAAA,WAAA,CAAc,CAClBG,CAAAA,CAAAA,CAAY,OAEhB,CAGAH,CAAAA,CAAAA,CAAM,gBAAiB,CAAA,YAAA,CAAcI,CAAS,CAAA,CAC9CJ,EAAM,gBAAiB,CAAA,YAAA,CAAcK,CAAU,CAAA,CAG/C,IAAIC,CAAAA,CAEJN,EAAM,gBAAiB,CAAA,YAAA,CAAelC,CAAM,EAAA,CAEtCwC,CACF,EAAA,YAAA,CAAaA,CAAY,CAI3BF,CAAAA,CAAAA,EAGAE,CAAAA,CAAAA,CAAe,MAAO,CAAA,UAAA,CAAW,IAAM,CACrCD,CAAAA,GACF,CAAG,CAAA,GAAI,EACT,CAAG,CAAA,CAAE,OAAS,CAAA,IAAK,CAAC,CAAA,CAEpBL,EAAM,gBAAiB,CAAA,UAAA,CAAY,IAAM,CAEnCM,CACF,EAAA,YAAA,CAAaA,CAAY,CAG3B,CAAA,UAAA,CAAWD,CAAY,CAAA,GAAG,EAC5B,CAAA,CAAG,CAAE,OAAS,CAAA,IAAK,CAAC,EACtB,CAEA,OAAOL,CACT,CAKQ,kBAAA,CAAmBV,CAAaS,CAAAA,CAAAA,CAA4C,CAClF,IAAMQ,EAAM,QAAS,CAAA,aAAA,CAAc,KAAK,CAAA,CAExC,OAAAA,CAAAA,CAAI,IAAMjB,CACViB,CAAAA,CAAAA,CAAI,GAAMR,CAAAA,CAAAA,CAAgB,YAAa,CAAA,KAAK,GAAK,eACjDQ,CAAAA,CAAAA,CAAI,OAAU,CAAA,MAAA,CAGdA,CAAI,CAAA,KAAA,CAAM,MAAQ,MAClBA,CAAAA,CAAAA,CAAI,KAAM,CAAA,MAAA,CAAS,MACnBA,CAAAA,CAAAA,CAAI,MAAM,SAAY,CAAA,OAAA,CACtBA,CAAI,CAAA,KAAA,CAAM,YAAe,CAAA,SAAA,CAGzBA,EAAI,OAAU,CAAA,IAAM,CAClB,IAAA,CAAK,GAAI,CAAA,CAAA,sBAAA,EAAyBjB,CAAG,CAAE,CAAA,CAAA,CACvCiB,CAAI,CAAA,KAAA,CAAM,UAAa,CAAA,SAAA,CACvBA,EAAI,KAAM,CAAA,OAAA,CAAU,KACpBA,CAAAA,CAAAA,CAAI,GAAM,CAAA,mBAAA,CAGVA,EAAI,KAAM,CAAA,QAAA,CAAW,UACrB,CAAA,IAAMC,CAAc,CAAA,QAAA,CAAS,cAAc,KAAK,CAAA,CAChDA,CAAY,CAAA,KAAA,CAAM,OAAU,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAA,CAAA,CAS5BA,CAAY,CAAA,WAAA,CAAc,mCAC1BD,CAAAA,CAAAA,CAAI,aAAe,EAAA,WAAA,CAAYC,CAAW,EAC5C,CAEOD,CAAAA,CACT,CAKQ,qBAAA,CAAsBE,EAAiC,CAC7D,GAAI,CAACA,CAAAA,CAAS,QAAS,CAAA,gBAAgB,CACnC,CAAA,OAAA,IAAA,CAAK,IAAI,uEAAyEA,CAAAA,CAAQ,CACnF,CAAA,IAAA,CAIX,IAAIR,CAAAA,CAAYQ,CAAS,CAAA,OAAA,CAAQ,qCAAsC,MAAM,CAAA,CAEvEC,CAAe,CAAA,UAAA,CACfC,CAAQV,CAAAA,CAAAA,CAAU,KAAMS,CAAAA,CAAY,CAE1C,CAAA,GAAIC,CAAM,CAAA,MAAA,GAAW,CACjB,CAAA,OAAA,IAAA,CAAK,GAAI,CAAA,CAAA,8CAAA,EAAiDF,CAAQ,CAAE,CAAA,CAAA,CAE7DR,CAGX,CAAA,GAAM,CAACW,CAAAA,CAASC,CAAI,CAAA,CAAIF,EACpBG,CAAiBD,CAAAA,CAAAA,CAAK,KAAM,CAAA,GAAG,CAG7BE,CAAAA,CAAAA,CAAqBD,CAAe,CAAA,CAAC,EAG3C,GAAI,CAFuB1E,CAA8B,CAAA,IAAA,CAAK4E,CAAUD,EAAAA,CAAAA,CAAmB,QAASC,CAAAA,CAAM,CAAC,CAAA,CAIvG,OAAK,IAAA,CAAA,GAAA,CAAI,CAA6EP,0EAAAA,EAAAA,CAAQ,CAAE,CAAA,CAAA,CACzFR,EAYX,IAAMgB,CAAAA,CAAAA,CATgBH,CAAe,CAAA,KAAA,EAAW,EAAA,EAAA,EAGjB,KAAM,CAAA,GAAG,EACV,MAAOI,CAAAA,CAAAA,EACjC,CAACA,CAAAA,CAAM,UAAW,CAAA,KAAK,CACvBA,EAAAA,CAAAA,GAAU,QACd,CAE0C,CAAA,IAAA,CAAK,GAAG,CAAA,CAG9CD,CACAH,EAAAA,CAAAA,CAAe,OAAQG,CAAAA,CAAkB,CAG7C,CAAA,IAAME,CAAUL,CAAAA,CAAAA,CAAe,IAAK,CAAA,GAAG,CACjCM,CAAAA,CAAAA,CAAW,GAAGR,CAAO,CAAA,EAAGF,CAAY,CAAA,EAAGS,CAAO,CAAA,CAAA,CAEpD,OAAK,IAAA,CAAA,GAAA,CAAI,yBAAyBC,CAAQ,CAAA,iBAAA,EAAoBX,CAAQ,CAAA,CAAE,CACjEW,CAAAA,CACT,CAKQ,kBAAA,CAAmBC,EAAeC,CAAuB,CAAA,CAc/D,GAZID,CAAAA,CAAK,SACPC,GAAAA,CAAAA,CAAG,SAAYD,CAAAA,CAAAA,CAAK,SAItB,CAAA,CAAA,KAAA,CAAM,IAAKA,CAAAA,CAAAA,CAAK,UAAU,CAAA,CAAE,OAAQE,CAAAA,CAAAA,EAAQ,CACtCA,CAAK,CAAA,IAAA,CAAK,UAAW,CAAA,OAAO,CAAKA,EAAAA,CAAAA,CAAK,IAAS,GAAA,CAAA,EAAGlF,CAAW,CAAGC,EAAAA,CAAAA,CAAM,KAAK,CAAA,CAAA,EAC7EgF,CAAG,CAAA,YAAA,CAAaC,CAAK,CAAA,IAAA,CAAMA,EAAK,KAAK,EAEzC,CAAC,CAAA,CAGGF,CAAK,CAAA,YAAA,CAAa,OAAO,CAAA,CAAG,CAC9B,IAAMG,CAAgBF,CAAAA,CAAAA,CAAG,YAAa,CAAA,OAAO,CAAK,EAAA,EAAA,CAClDA,EAAG,YAAa,CAAA,OAAA,CAASE,CAAgB,CAAA,IAAA,CAAOH,CAAK,CAAA,YAAA,CAAa,OAAO,CAAC,EAC5E,CACF,CAKQ,yBAA0BlD,CAAAA,CAAAA,CAAeE,CAA6B,CAAA,CACrD,IAAK,CAAA,gBAAA,CAAiBF,EAAM,CAAI9B,CAAAA,EAAAA,CAAW,CAAGC,EAAAA,CAAAA,CAAM,MAAM,CAAA,CAAA,CAAG,CAErE,CAAA,OAAA,CAAQmF,CAAa,EAAA,CAClC,IAAMC,CAAAA,CAAa,IAAK,CAAA,OAAA,CAAQD,CAAWnF,CAAAA,CAAAA,CAAM,MAAM,CACjDqF,CAAAA,CAAAA,CAAW,QAAS,CAAA,IAAA,CAAK,OAAQF,CAAAA,CAAAA,CAAWnF,CAAM,CAAA,GAAG,GAAK,IAAI,CAAA,CAEhEoF,CAAe,GAAA,UAAA,EAAcrD,CAAO,CAAA,QAAA,CACtC,IAAK,CAAA,0BAAA,CAA2BoD,EAAWpD,CAAO,CAAA,QAAA,CAAS,KAAM,CAAA,CAAA,CAAGsD,CAAQ,CAAC,CACpED,CAAAA,CAAAA,GAAe,aAAiBrD,EAAAA,CAAAA,CAAO,WAChD,CAAA,IAAA,CAAK,0BAA2BoD,CAAAA,CAAAA,CAAWpD,CAAO,CAAA,WAAA,CAAY,MAAM,CAAGsD,CAAAA,CAAQ,CAAC,CAAA,CACvED,CAAe,GAAA,WAAA,EAAerD,CAAO,CAAA,SAAA,EAC9C,KAAK,0BAA2BoD,CAAAA,CAAAA,CAAWpD,CAAO,CAAA,SAAA,CAAU,KAAM,CAAA,CAAA,CAAGsD,CAAQ,CAAA,CAAE,IAAKC,CAAiB,GAAA,CAAE,IAAMA,CAAAA,CAAI,CAAE,CAAA,CAAC,EAExH,CAAC,EACH,CAKQ,0BAA2BH,CAAAA,CAAAA,CAAoBI,CAAoB,CAAA,CACzE,IAAM1E,CAAAA,CAAWsE,EAAU,iBACtBtE,CAAAA,CAAAA,GAGLsE,CAAU,CAAA,SAAA,CAAY,EAGtBI,CAAAA,CAAAA,CAAM,OAAQC,CAAAA,CAAAA,EAAQ,CACpB,IAAMC,CAAAA,CAAc5E,CAAS,CAAA,SAAA,CAAU,IAAI,CAAA,CAI3C,GADsB,IAAA,CAAK,QAAQsE,CAAWnF,CAAAA,CAAAA,CAAM,MAAM,CAAA,GACpC,WAAe,EAAA,OAAOwF,CAAS,EAAA,QAAA,EAAYA,CAAK,CAAA,IAAA,CAAM,CAE1E,IAAME,CAAc,CAAA,IAAA,CAAK,aAAcD,CAAAA,CAAAA,CAAa,IAAI1F,CAAW,CAAA,EAAGC,CAAM,CAAA,KAAK,CAAU,QAAA,CAAA,CAAA,CACvF0F,CACFA,GAAAA,CAAAA,CAAY,YAAcF,CAAK,CAAA,IAAA,EAEnC,CAEA,KAAA,IAAA,CAAK,cAAeC,CAAAA,CAAAA,CAAaD,CAAI,CAAA,CAGrCL,EAAU,WAAYM,CAAAA,CAAW,EACnC,CAAC,CAGGF,CAAAA,CAAAA,CAAM,MAAW,GAAA,CAAA,GAClBJ,CAA0B,CAAA,KAAA,CAAM,OAAU,CAAA,MAAA,CAAA,EAE/C,CAKQ,wBAAA,CAAyBtD,CAAeE,CAAAA,CAAAA,CAA6B,CAC/C,IAAK,CAAA,gBAAA,CAAiBF,CAAM,CAAA,CAAA,CAAA,EAAI9B,CAAW,CAAA,EAAGC,CAAM,CAAA,QAAQ,OAAOD,CAAW,CAAA,EAAGC,CAAM,CAAA,QAAQ,CAAG,CAAA,CAAA,CAAA,CAE1G,OAAQiC,CAAAA,CAAAA,EAAW,CACrC,IAAM0D,CAAAA,CAAW,IAAK,CAAA,OAAA,CAAQ1D,CAASjC,CAAAA,CAAAA,CAAM,QAAQ,CAAA,CAC/C4F,CAAW,CAAA,IAAA,CAAK,OAAQ3D,CAAAA,CAAAA,CAASjC,CAAM,CAAA,QAAQ,CAEjD6F,CAAAA,CAAAA,CAAa,KAEbF,CACFE,GAAAA,CAAAA,CAAa,IAAK,CAAA,iBAAA,CAAkB9D,CAAQ4D,CAAAA,CAAQ,CAGlDC,CAAAA,CAAAA,CAAAA,GACFC,EAAaA,CAAc,EAAA,CAAC,IAAK,CAAA,iBAAA,CAAkB9D,CAAQ6D,CAAAA,CAAQ,CAGpE3D,CAAAA,CAAAA,CAAAA,CAAwB,MAAM,OAAU4D,CAAAA,CAAAA,CAAa,EAAK,CAAA,OAC7D,CAAC,EACH,CAKQ,iBAAA,CAAkB9D,CAAuB+D,CAAAA,CAAAA,CAA4B,CAC3E,GAAI,CAACA,CAAAA,EAAa,OAAOA,CAAAA,EAAc,SACrC,OAAK,IAAA,CAAA,GAAA,CAAI,6BAA+BA,CAAAA,CAAS,CAC1C,CAAA,KAAA,CAIT,IAAMzB,CAAAA,CAAQyB,EAAU,KAAM,CAAA,GAAG,CACjC,CAAA,GAAIzB,CAAM,CAAA,MAAA,CAAS,CACjB,CAAA,OAAA,IAAA,CAAK,IAAI,2BAA6ByB,CAAAA,CAAS,CACxC,CAAA,KAAA,CAGT,IAAMC,CAAAA,CAAQ1B,CAAM,CAAA,CAAC,CACf2B,CAAAA,CAAAA,CAAkB3B,CAAM,CAAA,KAAA,CAAM,CAAC,CAAA,CAAE,IAAK,CAAA,GAAG,EACzC4B,CAAelE,CAAAA,CAAAA,CAAegE,CAAK,CAAA,CAIzC,GAFA,IAAA,CAAK,GAAI,CAAA,CAAA,sBAAA,EAAyBA,CAAK,CAAKE,EAAAA,EAAAA,CAAW,CAAW,QAAA,EAAA,OAAOA,CAAW,CAAA,UAAA,EAAaD,CAAe,CAAA,CAAE,EAE9GC,CAAe,EAAA,IAAA,CACjB,OAAK,IAAA,CAAA,GAAA,CAAI,CAAUF,OAAAA,EAAAA,CAAK,CAAsC,oCAAA,CAAA,CAAA,CACvD,KAIT,CAAA,GAAIC,CAAgB,CAAA,UAAA,CAAW,IAAI,CAAA,CAAG,CACpC,IAAM5D,EAAQ4D,CAAgB,CAAA,SAAA,CAAU,CAAC,CAAA,CACnCE,CAAS,CAAA,MAAA,CAAOD,CAAW,CAAA,EAAK,OAAO7D,CAAK,CAAA,CAClD,OAAK,IAAA,CAAA,GAAA,CAAI,CAAe6D,YAAAA,EAAAA,CAAW,CAAO7D,IAAAA,EAAAA,CAAK,MAAM8D,CAAM,CAAA,CAAE,CACtDA,CAAAA,CACT,CAAWF,KAAAA,GAAAA,CAAAA,CAAgB,UAAW,CAAA,IAAI,CAAG,CAAA,CAC3C,IAAM5D,CAAAA,CAAQ4D,CAAgB,CAAA,SAAA,CAAU,CAAC,CAAA,CACnCE,EAAS,MAAOD,CAAAA,CAAW,CAAK,EAAA,MAAA,CAAO7D,CAAK,CAAA,CAClD,OAAK,IAAA,CAAA,GAAA,CAAI,eAAe6D,CAAW,CAAA,IAAA,EAAO7D,CAAK,CAAA,GAAA,EAAM8D,CAAM,CAAA,CAAE,CACtDA,CAAAA,CACT,SAAWF,CAAgB,CAAA,UAAA,CAAW,GAAG,CAAA,CAAG,CAC1C,IAAM5D,CAAQ4D,CAAAA,CAAAA,CAAgB,SAAU,CAAA,CAAC,CACnCE,CAAAA,CAAAA,CAAS,MAAOD,CAAAA,CAAW,CAAI,CAAA,MAAA,CAAO7D,CAAK,CACjD,CAAA,OAAA,IAAA,CAAK,GAAI,CAAA,CAAA,YAAA,EAAe6D,CAAW,CAAA,GAAA,EAAM7D,CAAK,CAAA,GAAA,EAAM8D,CAAM,CAAE,CAAA,CAAA,CACrDA,CACT,CAAA,KAAA,GAAWF,CAAgB,CAAA,UAAA,CAAW,GAAG,CAAA,CAAG,CAC1C,IAAM5D,CAAAA,CAAQ4D,CAAgB,CAAA,SAAA,CAAU,CAAC,CAAA,CACnCE,CAAS,CAAA,MAAA,CAAOD,CAAW,CAAA,CAAI,MAAO7D,CAAAA,CAAK,CACjD,CAAA,OAAA,IAAA,CAAK,GAAI,CAAA,CAAA,YAAA,EAAe6D,CAAW,CAAM7D,GAAAA,EAAAA,CAAK,CAAM8D,GAAAA,EAAAA,CAAM,CAAE,CAAA,CAAA,CACrDA,CACT,CAAA,KAAO,CAEL,IAAIA,CAAAA,CAAS,KAGb,CAAA,GAAI,OAAOD,CAAAA,EAAgB,SAErBD,CAAAA,CAAAA,CAAgB,aAAkB,GAAA,MAAA,CACpCE,CAASD,CAAAA,CAAAA,GAAgB,IAChBD,CAAAA,CAAAA,CAAgB,WAAY,EAAA,GAAM,OAC3CE,CAAAA,CAAAA,CAASD,CAAgB,GAAA,KAAA,CAEzBC,CAAS,CAAA,KAAA,CAEX,IAAK,CAAA,GAAA,CAAI,uBAAuBD,CAAW,CAAA,KAAA,EAAQD,CAAgB,CAAA,WAAA,EAAkB,GAAA,MAAM,CAAME,GAAAA,EAAAA,CAAM,EAAE,CAChG,CAAA,KAAA,GAAA,OAAOD,CAAgB,EAAA,QAAA,CAAU,CAE1C,IAAME,CAAW,CAAA,MAAA,CAAOH,CAAe,CACvCE,CAAAA,CAAAA,CAAS,CAAC,KAAA,CAAMC,CAAQ,CAAA,EAAKF,CAAgBE,GAAAA,CAAAA,CAC7C,IAAK,CAAA,GAAA,CAAI,CAAsBF,mBAAAA,EAAAA,CAAW,CAAQE,KAAAA,EAAAA,CAAQ,CAAMD,GAAAA,EAAAA,CAAM,EAAE,EAC1E,CAAA,KAAO,CAEL,IAAME,CAAY,CAAA,MAAA,CAAOH,CAAW,CAAA,CAC9BI,EAAW,MAAOL,CAAAA,CAAe,CACvCE,CAAAA,CAAAA,CAASE,CAAU,CAAA,WAAA,EAAkBC,GAAAA,CAAAA,CAAS,aAC9C,CAAA,IAAA,CAAK,GAAI,CAAA,CAAA,oBAAA,EAAuBD,CAAS,CAAA,OAAA,EAAUC,CAAQ,CAAA,IAAA,EAAOH,CAAM,CAAA,CAAE,EAC5E,CAEA,OAAOA,CACT,CACF,CAKQ,eAAexF,CAAsBR,CAAAA,CAAAA,CAAsB,CACjE,IAAME,CAAQ,CAAA,IAAA,CAAK,KAAM,CAAA,QAAA,CAASF,CAAM,CAElCwB,CAAAA,CAAAA,CAAe,IAAK,CAAA,aAAA,CAAchB,CAAa,CAAA,CAAA,CAAA,EAAIX,CAAW,CAAA,EAAGC,EAAM,KAAK,CAAA,CAAA,CAAG,CACrF,CAAA,GAAI0B,CAAc,CAAA,CAEd,IAAM4E,CAAAA,CADY,CAAClG,CAAAA,CAAM,OAAWA,EAAAA,CAAAA,CAAM,OAAQ,CAAA,MAAA,GAAW,CACjC,CAAA,OAAA,CAAU,OACrCsB,CAA6B,CAAA,KAAA,CAAM,WAAY,CAAA,SAAA,CAAW4E,CAAS,CAAA,WAAW,CAC/E,CAAA,IAAA,CAAK,IAAI,CAAQpG,KAAAA,EAAAA,CAAM,CAAiCoG,8BAAAA,EAAAA,CAAO,CAAI,EAAA,CAAA,EACvE,CAEA,IAAMC,EAAiB,IAAK,CAAA,aAAA,CAAc,QAAS,CAAA,IAAA,CAAM,CAAIxG,CAAAA,EAAAA,CAAW,CAAGC,EAAAA,CAAAA,CAAM,MAAM,CAAA,cAAA,EAAiBD,CAAW,CAAA,EAAGC,CAAM,CAAA,UAAU,CAAKE,EAAAA,EAAAA,CAAM,IAAI,CACrJ,CAAA,GAAIqG,CAAgB,CAAA,CAClB,IAAMC,CAAAA,CAAMD,CAEND,CAAAA,CAAAA,CADU,CAAClG,CAAM,CAAA,OAAA,EAAWA,CAAM,CAAA,WAAA,CACd,cAAiB,CAAA,MAAA,CAC1CmG,CAA+B,CAAA,KAAA,CAAM,YAAY,SAAWD,CAAAA,CAAAA,CAAS,WAAW,CAAA,CACjFE,CAAI,CAAA,QAAA,CAAWpG,CAAM,CAAA,OAAA,CACrBoG,CAAI,CAAA,WAAA,CAAcpG,CAAM,CAAA,OAAA,CAAU,YAAe,CAAA,YACnD,CACF,CAKQ,aAAakB,CAAgBC,CAAAA,CAAAA,CAAsBF,CAAuB,CAAA,CAChF,GAAIC,CAAAA,GAAW,WAAa,CAAA,CAC1B,IAAMZ,CAAc,CAAA,IAAA,CAAK,aAAc,CAAA,QAAA,CAAS,IAAM,CAAA,CAAA,CAAA,EAAIX,CAAW,CAAA,EAAGC,EAAM,MAAM,CAAA,EAAA,EAAKuB,CAAY,CAAA,EAAA,CAAI,CACnGZ,CAAAA,CAAAA,CAAY,IAAK,CAAA,OAAA,CAAQD,CAAcV,CAAAA,CAAAA,CAAM,OAAO,CAAA,CACtDU,CAAeC,EAAAA,CAAAA,CACjB,IAAK,CAAA,WAAA,CAAYY,EAAcZ,CAAW,CAAA,IAAI,CAE9C,CAAA,IAAA,CAAK,GAAI,CAAA,CAAA,2CAAA,EAA8CY,CAAY,CAAA,CAAE,EAEzE,CAAWD,KAAAA,CAAAA,GAAW,eACpB,EAAA,IAAA,CAAK,YAAaC,CAAAA,CAAY,EAElC,CAEQ,aAAaA,CAA4B,CAAA,CAC/C,IAAMb,CAAAA,CAAc,IAAK,CAAA,aAAA,CAAc,QAAS,CAAA,IAAA,CAAM,CAAIX,CAAAA,EAAAA,CAAW,CAAGC,EAAAA,CAAAA,CAAM,MAAM,CAAA,EAAA,EAAKuB,CAAY,CAAA,EAAA,CAAI,EACzG,GAAI,CAACb,CAAa,CAAA,CACd,IAAK,CAAA,GAAA,CAAI,CAAqCa,kCAAAA,EAAAA,CAAY,oBAAoB,CAC9E,CAAA,MACJ,CACA,IAAMZ,CAAY,CAAA,IAAA,CAAK,OAAQD,CAAAA,CAAAA,CAAaV,EAAM,OAAO,CAAA,CACzD,GAAI,CAACW,CAAW,CAAA,CACZ,IAAK,CAAA,GAAA,CAAI,CAAmCY,gCAAAA,EAAAA,CAAY,CAAE,CAAA,CAAA,CAC1D,MACJ,CAEA,IAAK,CAAA,GAAA,CAAI,8BAA8BA,CAAY,CAAA,CAAE,CAGrD,CAAA,IAAA,CAAK,KAAM,CAAA,WAAA,CAAYA,CAAc,CAAA,CAAE,QAAS,EAAC,CAAG,MAAQ,CAAA,CAAE,CAAC,CAAA,CAGxC,IAAK,CAAA,gBAAA,CAAiB,SAAS,IAAM,CAAA,CAAA,8CAAA,EAAiDA,CAAY,CAAA,EAAA,CAAI,CAC9G,CAAA,OAAA,CAAQkF,CAAW,EAAA,CAC9B,IAAK,CAAA,iBAAA,CAAkBA,CAA+C,EAC1E,CAAC,CAAA,CAGD,IAAK,CAAA,WAAA,CAAYlF,EAAcZ,CAAW,CAAA,KAAK,EACjD,CAEQ,iBAAkB8F,CAAAA,CAAAA,CAAqD,CAC7E,GAAIA,aAAmB,gBACnB,CAAA,OAAQA,CAAQ,CAAA,IAAA,EACZ,KAAK,UACL,CAAA,KAAK,QACDA,CAAQ,CAAA,OAAA,CAAU,KAClB,CAAA,MACJ,KAAK,QAAA,CACL,KAAK,OAAA,CACDA,CAAQ,CAAA,KAAA,CAAQ,EAChB,CAAA,MACJ,QACIA,CAAAA,CAAQ,KAAQ,CAAA,EAAA,CAChB,KACR,CACOA,KAAAA,CAAAA,YAAmB,iBAC1BA,GAAAA,CAAAA,CAAQ,aAAgB,CAAA,CAAA,EAE9B,CAEQ,qBAAA,CAAsBvG,EAAgBS,CAAmB+F,CAAAA,CAAAA,CAAmBtE,CAAkB,CAAA,CAEpG,IAAMuE,CAAAA,CAAa,CAAE,GADP,KAAK,KAAM,CAAA,QAAA,CAASzG,CAAM,CAAA,CACV,OAAQ,CAAA,CAGlC0G,CAAiBxE,CAAAA,CAAAA,CAcrB,GAbIsE,CAAAA,GAAc,WAGhBE,CAAAA,CAAAA,CAAiBxE,CAAQ,CAAA,IAAA,CAAO,MACvB,CAAA,CAAC,UAAW,SAAS,CAAA,CAAE,QAASsE,CAAAA,CAAS,CAClDE,CAAAA,CAAAA,CAAkBxE,CAAU,GAAA,EAAA,EAAMA,IAAU,IAAQ,CAAA,MAAA,CAAY,MAAOA,CAAAA,CAAK,CACnEsE,CAAAA,CAAAA,GAAc,WAAe,EAAA,OAAOtE,GAAU,QACrDwE,GAAAA,CAAAA,CAAiBxE,CAAM,CAAA,KAAA,CAAM,GAAG,CAAA,CAAE,GAAIyE,CAAAA,CAAAA,EAAKA,CAAE,CAAA,IAAA,EAAM,CAAA,CAAE,MAAOA,CAAAA,CAAAA,EAAKA,CAAC,CAAA,CAC9DD,EAAe,MAAW,GAAA,CAAA,GAC1BA,CAAiB,CAAA,MAAA,CAAA,CAAA,CAIrBA,CAAmB,GAAA,MAAA,EAAaA,CAAmB,GAAA,EAAA,CAAI,CACvD,IAAME,CAAAA,CAAS,IAAK,CAAA,aAAA,CAAcJ,CAAS,CAAA,EAAKA,CAC/CC,CAAAA,CAAAA,CAAmBG,CAAM,CAAIF,CAAAA,EAClC,CAAO,KAAA,CACH,IAAME,CAAAA,CAAS,IAAK,CAAA,aAAA,CAAcJ,CAAS,CAAKA,EAAAA,CAAAA,CAChD,OAAQC,CAAAA,CAAmBG,CAAM,EACrC,CAGA,IAAA,CAAK,MAAM,WAAY5G,CAAAA,CAAAA,CAAQ,CAAE,OAAA,CAASyG,CAAY,CAAA,MAAA,CAAQ,CAAE,CAAC,EAEjE,IAAK,CAAA,GAAA,CAAI,CAA2BzG,wBAAAA,EAAAA,CAAM,CAA6ByG,yBAAAA,CAAAA,CAAAA,CAAU,CAGjF,CAAA,IAAA,CAAK,YAAYzG,CAAQS,CAAAA,CAAAA,CAAW,KAAK,EAC3C,CAEQ,kBAAA,EAA2B,CACjC,IAAMoG,CAAiB,CAAA,IAAA,CAAK,gBAAiB,CAAA,QAAA,CAAS,IAAM,CAAA,sBAAsB,CAClF,CAAA,IAAA,CAAK,IAAI,CAASA,MAAAA,EAAAA,CAAAA,CAAe,MAAM,CAAA,yBAAA,CAA2B,CAElEA,CAAAA,CAAAA,CAAe,OAAQN,CAAAA,CAAAA,EAAW,CAC9B,IAAMC,CAAAA,CAAYD,CAAQ,CAAA,YAAA,CAAa,oBAAoB,CAAA,CACrDlF,CAAekF,CAAAA,CAAAA,CAAQ,aAAa,yBAAyB,CAAA,CAEnE,GAAI,CAACC,CAAa,EAAA,CAACnF,CAAc,CAAA,CAC7B,IAAK,CAAA,GAAA,CAAI,2FAA6FkF,CAAAA,CAAO,CAC7G,CAAA,MACJ,CAEA,IAAM/F,EAAc,IAAK,CAAA,aAAA,CAAc,QAAS,CAAA,IAAA,CAAM,CAAIX,CAAAA,EAAAA,CAAW,CAAYwB,SAAAA,EAAAA,CAAY,IAAI,CACjG,CAAA,GAAI,CAACb,CAAAA,CAAa,OAClB,IAAMC,CAAY,CAAA,IAAA,CAAK,QAAQD,CAAaV,CAAAA,CAAAA,CAAM,OAAO,CAAA,CACzD,GAAI,CAACW,CAAW,CAAA,OAEhB,IAAMqG,CAAAA,CAAgBP,CAAmB,YAAA,gBAAA,EAAoB,CAAC,MAAA,CAAQ,QAAQ,CAAA,CAAE,SAASA,CAAQ,CAAA,IAAI,CAAK,CAAA,GAAA,CAAM,CAE1GQ,CAAAA,CAAAA,CAAU,IAAM,CAClB,IAAM7E,CAAQ,CAAA,IAAA,CAAK,eAAgBqE,CAAAA,CAA+C,CAClF,CAAA,IAAA,CAAK,qBAAsBlF,CAAAA,CAAAA,CAAcZ,EAAW+F,CAAWtE,CAAAA,CAAK,EACxE,CAAA,CAEM8E,CAAmB,CAAA,IAAA,CAAK,QAASD,CAAAA,CAAAA,CAASD,CAAY,CAAA,CAEtDG,CAAaV,CAAAA,CAAAA,YAAmB,gBAAoB,EAAA,CAAC,MAAQ,CAAA,QAAQ,EAAE,QAASA,CAAAA,CAAAA,CAAQ,IAAI,CAAA,CAAK,OAAU,CAAA,QAAA,CACjHA,CAAQ,CAAA,gBAAA,CAAiBU,EAAWD,CAAgB,EACxD,CAAC,EACH,CAEQ,QAAA,CAASE,CAAgCC,CAAAA,CAAAA,CAAyC,CACxF,IAAIC,CAAAA,CACJ,OAAO,CAAA,GAAIC,CAAgB,GAAA,CACvB,YAAaD,CAAAA,CAAS,CAClBD,CAAAA,CAAAA,CAAQ,CACRC,CAAAA,CAAAA,CAAY,MAAO,CAAA,UAAA,CAAW,IAAMF,CAAAA,CAAK,MAAM,IAAMG,CAAAA,CAAI,CAAGF,CAAAA,CAAK,CAEjED,CAAAA,CAAAA,CAAK,KAAM,CAAA,IAAA,CAAMG,CAAI,EAE7B,CACF,CAKQ,OAAA,CAAQtF,CAAkBuF,CAAAA,CAAAA,CAA6B,CAC7D,OAAOvF,EAAQ,YAAa,CAAA,CAAA,EAAGlC,CAAW,CAAA,EAAGyH,CAAI,CAAA,CAAE,CACrD,CAEQ,aAAcvF,CAAAA,CAAAA,CAAkBwF,CAAkC,CAAA,CACxE,OAAOxF,CAAAA,CAAQ,aAAcwF,CAAAA,CAAQ,CACvC,CAEQ,gBAAA,CAAiBxF,CAAkBwF,CAAAA,CAAAA,CAA6B,CACtE,OAAO,KAAM,CAAA,IAAA,CAAKxF,EAAQ,gBAAiBwF,CAAAA,CAAQ,CAAC,CACtD,CAEQ,uBAAA,CAAwBxF,CAAiC,CAAA,CAC/D,IAAMN,CAAyB,CAAA,EAc/B,CAAA,OAAA,MAAA,CAAO,OAXW,CAAA,CAChB,SAAa,CAAA,WAAA,CACb,SAAa,CAAA,WAAA,CACb,QAAY,CAAA,UAAA,CACZ,UAAY,CAAA,SAAA,CACZ,UAAY,CAAA,SAAA,CACZ,KAAQ,QACR,CAAA,KAAA,CAAS,OACT,CAAA,MAAA,CAAU,QACZ,CAEwB,CAAE,CAAA,OAAA,CAAQ,CAAC,CAACsD,CAAAA,CAAMyB,CAAS,CAAA,GAAM,CACvD,IAAMtE,CAAQ,CAAA,IAAA,CAAK,QAAQH,CAASgD,CAAAA,CAAI,CACpC7C,CAAAA,CAAAA,EAAS,IACPsE,GAAAA,CAAAA,GAAc,WACf/E,CAAAA,CAAAA,CAAgB+E,CAAS,CAAA,CAAItE,CAAU,GAAA,MAAA,CAC/BsE,CAAc,GAAA,WAAA,CACtB/E,CAAgB+E,CAAAA,CAAS,EAAItE,CAAM,CAAA,KAAA,CAAM,GAAG,CAAA,CAAE,GAAIyE,CAAAA,CAAAA,EAAKA,CAAE,CAAA,IAAA,EAAM,CACvD,CAAA,CAAC,SAAW,CAAA,SAAA,CAAW,OAAS,CAAA,QAAQ,CAAE,CAAA,QAAA,CAASH,CAAS,CACpE/E,CAAAA,CAAAA,CAAgB+E,CAAS,CAAA,CAAI,QAAStE,CAAAA,CAAK,CAE3CT,CAAAA,CAAAA,CAAgB+E,CAAS,CAAA,CAAItE,CAGpC,EAAA,CAAC,CAGGT,CAAAA,CAAAA,CAAQ,MAAW,GAAA,MAAA,GACrBA,EAAQ,MAAS,CAAA,CAAA,CAAA,CAGZA,CACT,CAEQ,eAAgB8E,CAAAA,CAAAA,CAAoD,CAC1E,GAAIA,aAAmB,gBACrB,CAAA,OAAQA,CAAQ,CAAA,IAAA,EACd,KAAK,UACH,CAAA,OAAOA,EAAQ,OACjB,CAAA,KAAK,QACL,CAAA,KAAK,OACH,CAAA,OAAOA,CAAQ,CAAA,aAAA,CACjB,QACE,OAAOA,CAAQ,CAAA,KACnB,CACSA,KAAAA,GAAAA,CAAAA,YAAmB,iBAC5B,CAAA,OAAIA,EAAQ,QACH,CAAA,KAAA,CAAM,IAAKA,CAAAA,CAAAA,CAAQ,eAAe,CAAA,CAAE,GAAIiB,CAAAA,CAAAA,EAAUA,EAAO,KAAK,CAAA,CAEhEjB,CAAQ,CAAA,KAAA,CAEjB,OAAO,IACT,CAEQ,WAAA,CAAYtB,EAAoBwC,CAAqB,CAAA,CAC3D,IAAMC,CAAAA,CAAiB,IAAK,CAAA,aAAA,CAAczC,CAAW,CAAA,CAAA,CAAA,EAAIpF,CAAW,CAAA,EAAGC,CAAM,CAAA,OAAO,CAAG,CAAA,CAAA,CAAA,CACvF,GAAI4H,CAAAA,CAAgB,CAClB,IAAMtB,CAAAA,CAAUqB,CAAO,CAAA,OAAA,CAAU,MAChCC,CAAAA,CAAAA,CAA+B,KAAM,CAAA,WAAA,CAAY,UAAWtB,CAAS,CAAA,WAAW,EACnF,CACF,CAEQ,SAAA,CAAUnB,CAAoBvE,CAAAA,CAAAA,CAAoB,CACxD,IAAMiH,CAAAA,CAAe,IAAK,CAAA,aAAA,CAAc1C,CAAW,CAAA,CAAA,CAAA,EAAIpF,CAAW,CAAA,EAAGC,CAAM,CAAA,KAAK,CAAG,CAAA,CAAA,CAAA,CAC/E6H,CACFA,GAAAA,CAAAA,CAAa,WAAcjH,CAAAA,CAAAA,CAAM,QAChCiH,CAA6B,CAAA,KAAA,CAAM,WAAY,CAAA,SAAA,CAAW,OAAS,CAAA,WAAW,CAEhF1C,CAAAA,CAAAA,CAAAA,CAA0B,UAAU,GAAI,CAAA,IAAA,CAAK,MAAO,CAAA,UAAU,CAC/D,CAAA,IAAA,CAAK,GAAI,CAAA,iBAAA,CAAmBvE,CAAK,EACnC,CAEQ,aAAckH,CAAAA,CAAAA,CAA4BC,CAAmBC,CAAAA,CAAAA,CAAmB,CACtF,IAAMC,CAAQ,CAAA,IAAI,WAAY,CAAA,CAAA,OAAA,EAAUF,CAAS,CAAA,CAAA,CAAI,CAAE,MAAA,CAAAC,CAAO,CAAC,CAAA,CAC/DF,CAAO,CAAA,aAAA,CAAcG,CAAK,EAC5B,CAEQ,GAAA,CAAIC,KAAoBX,CAAmB,CAAA,CAC7C,IAAK,CAAA,MAAA,CAAO,KACd,EAAA,OAAA,CAAQ,GAAI,CAAA,CAAA,gBAAA,EAAmBW,CAAO,CAAI,CAAA,CAAA,GAAGX,CAAI,EAErD,CAEA,MAAc,mBAAoB5G,CAAAA,CAAAA,CAAmC,CACnE,IAAMqC,CAAM,CAAA,CAAA,uCAAA,EAA0CrC,CAAS,CAAA,QAAA,CAAA,CAC/D,IAAK,CAAA,GAAA,CAAI,2CAA2CA,CAAS,CAAA,CAAE,CAC/D,CAAA,GAAI,CACA,IAAMO,CAAW,CAAA,MAAM,MAAM8B,CAAK,CAAA,CAC9B,OAAS,CAAA,CACL,WAAa,CAAA,IAAA,CAAK,MAAO,CAAA,MAAA,CACzB,OAAU,kBACd,CACJ,CAAC,CAAA,CACD,GAAI,CAAC9B,CAAS,CAAA,EAAA,CACV,MAAM,IAAI,KAAM,CAAA,CAAA,yBAAA,EAA4BA,CAAS,CAAA,UAAU,CAAE,CAAA,CAAA,CAErE,IAAMiH,CAAO,CAAA,MAAMjH,CAAS,CAAA,IAAA,EAC5B,CAAA,OAAA,IAAA,CAAK,GAAI,CAAA,8BAAA,CAAgCiH,EAAK,IAAI,CAAA,CAC3CA,CAAK,CAAA,IAAA,EAAQ,EACxB,CAASvH,MAAAA,CAAAA,CAAO,CACZ,OAAK,IAAA,CAAA,GAAA,CAAI,kCAAoCA,CAAAA,CAAK,CAC3C,CAAA,EACX,CACF,CAEQ,oBAAA,CAAqB8F,CAAmBtE,CAAAA,CAAAA,CAAuB,CACrE,IAAMgG,CAAS,CAAA,IAAA,CAAK,mBAAmB1B,CAAS,CAAA,CAChD,OAAI0B,CAAAA,EAAUA,CAAOhG,CAAAA,CAAK,CACjBgG,CAAAA,CAAAA,CAAOhG,CAAK,CAGdA,CAAAA,CAAAA,CAAM,MAAO,CAAA,CAAC,CAAE,CAAA,WAAA,EAAgBA,CAAAA,CAAAA,CAAM,MAAM,CAAC,CAAA,CAAE,WAAY,EACpE,CAEQ,yBAAA,CAA0B3B,CAA0C,CAAA,CAC1E,IAAK,CAAA,GAAA,CAAI,+CAA+C,CAAA,CACpC,IAAK,CAAA,gBAAA,CAAiB,QAAS,CAAA,IAAA,CAAM,sBAAsB,CAEnE,CAAA,OAAA,CAAQgG,CAAW,EAAA,CAC7B,IAAMlF,CAAAA,CAAekF,CAAQ,CAAA,YAAA,CAAa,yBAAyB,CACnE,CAAA,GAAI,CAAClF,CAAAA,CAAc,OAEnB,IAAM8G,CAAa,CAAA,IAAA,CAAK,cAAc,QAAS,CAAA,IAAA,CAAM,CAAyB9G,sBAAAA,EAAAA,CAAY,CAAI,EAAA,CAAA,CAAA,CAC9F,GAAI,CAAC8G,CAAY,CAAA,OAEjB,IAAM1H,CAAAA,CAAY,IAAK,CAAA,OAAA,CAAQ0H,CAAYrI,CAAAA,CAAAA,CAAM,OAAO,CACxD,CAAA,GAAI,CAACW,CAAAA,CAAW,OAEhB,IAAMgB,CAAUlB,CAAAA,CAAAA,CAAe,IAAIE,CAAS,CAAA,CAC5C,GAAI,CAACgB,CAAS,CAAA,OAEd,IAAM+E,CAAAA,CAAYD,EAAQ,YAAa,CAAA,oBAAoB,CACrD6B,CAAAA,CAAAA,CAAY3G,CAAQ,CAAA,IAAA,CAAK,CAAK,EAAA,CAAA,CAAE,IAAS+E,GAAAA,CAAS,CAEnD4B,CAAAA,CAAAA,GAGDA,CAAU,CAAA,IAAA,GAAS,QAAY7B,EAAAA,CAAAA,YAAmB,mBAChD6B,CAAU,CAAA,OAAA,GAAY,MAAW7B,GAAAA,CAAAA,CAAQ,GAAM,CAAA,MAAA,CAAO6B,CAAU,CAAA,OAAO,GACvEA,CAAU,CAAA,OAAA,GAAY,MAAW7B,GAAAA,CAAAA,CAAQ,GAAM,CAAA,MAAA,CAAO6B,CAAU,CAAA,OAAO,IAIzEA,CAAU,CAAA,OAAA,GACN7B,CAAmB,YAAA,iBAAA,CACnB,IAAK,CAAA,qBAAA,CAAsBA,CAASC,CAAAA,CAAAA,CAAY4B,CAAU,CAAA,OAAO,CAC1D7B,CAAAA,CAAAA,YAAmB,gBAAoBA,EAAAA,CAAAA,CAAQ,YAAa,CAAA,MAAM,GACzE,IAAK,CAAA,uBAAA,CAAwBA,CAASC,CAAAA,CAAAA,CAAY4B,CAAU,CAAA,OAAO,CAG7E,CAAA,EAAA,CAAC,EACH,CAEQ,qBAAA,CAAsB7B,CAA4BC,CAAAA,CAAAA,CAAmB6B,CAAsB,CAAA,CACjG,IAAK,CAAA,GAAA,CAAI,kCAAkC7B,CAAS,CAAA,YAAA,CAAA,CAAgBD,CAAO,CAAA,CAE3E,IAAMvC,CAAAA,CAAcuC,CAAQ,CAAA,iBAAA,EAAmB,SAAU,CAAA,IAAI,CAC7DA,CAAAA,CAAAA,CAAQ,SAAY,CAAA,EAAA,CAChBvC,CAAeA,EAAAA,CAAAA,CAAY,aAAa,OAAO,CAAA,GAAM,EACvDuC,EAAAA,CAAAA,CAAQ,WAAYvC,CAAAA,CAAW,CAGjCqE,CAAAA,CAAAA,CAAQ,QAASb,CAAgB,EAAA,CAC/B,IAAMc,CAAAA,CAAgB,QAAS,CAAA,aAAA,CAAc,QAAQ,CAAA,CAC/CpG,EAAQ,OAAOsF,CAAAA,EAAW,QAAYA,EAAAA,CAAAA,CAAO,KAAU,GAAA,MAAA,CAAYA,CAAO,CAAA,KAAA,CAAQ,MAAOA,CAAAA,CAAM,CAErGc,CAAAA,CAAAA,CAAc,KAAQpG,CAAAA,CAAAA,CAEtB,IAAIqG,CAAAA,CACJ,GAAI/B,CAAc,GAAA,WAAA,CAAa,CAC7B,IAAMgC,CAAatG,CAAAA,CAAAA,CAAM,KAAM,CAAA,aAAa,EAC5CqG,CAAQC,CAAAA,CAAAA,CAAaA,CAAW,CAAA,CAAC,CAAE,CAAA,IAAA,EAAStG,CAAAA,EAC9C,MACEqG,CAAQ,CAAA,IAAA,CAAK,oBAAqB/B,CAAAA,CAAAA,CAAYtE,CAAK,CAAA,CAErDoG,CAAc,CAAA,WAAA,CAAcC,CAExB/B,CAAAA,CAAAA,GAAc,QAAYtE,EAAAA,CAAAA,GAAU,WACtCoG,GAAAA,CAAAA,CAAc,QAAW,CAAA,IAAA,CAAA,CAE3B/B,EAAQ,WAAY+B,CAAAA,CAAa,EACnC,CAAC,EACH,CAEQ,uBAAwB/B,CAAAA,CAAAA,CAA2BC,EAAmB6B,CAAsB,CAAA,CAChG,IAAMI,CAAAA,CAAalC,CAAQ,CAAA,YAAA,CAAa,MAAM,CAAA,CAC9C,GAAI,CAACkC,CAAAA,CAAY,OAEjB,IAAMC,CAAW,CAAA,QAAA,CAAS,cAAeD,CAAAA,CAAU,CACnD,CAAA,GAAI,CAACC,CAAAA,CAAU,CACX,IAAA,CAAK,GAAI,CAAA,CAAA,kBAAA,EAAqBD,CAAU,CAAkClC,8BAAAA,CAAAA,CAAAA,CAAO,CACjF,CAAA,MACJ,CAEA,IAAA,CAAK,GAAI,CAAA,CAAA,sBAAA,EAAyBkC,CAAU,CAAiBjC,cAAAA,EAAAA,CAAS,CAAG,CAAA,CAAA,CAAA,CACzEkC,CAAS,CAAA,SAAA,CAAY,EAErBL,CAAAA,CAAAA,CAAQ,QAASb,CAAgB,EAAA,CAC7B,IAAMc,CAAAA,CAAgB,QAAS,CAAA,aAAA,CAAc,QAAQ,CAAA,CAC/CpG,CAAQ,CAAA,OAAOsF,CAAW,EAAA,QAAA,EAAYA,CAAO,CAAA,KAAA,GAAU,MAAYA,CAAAA,CAAAA,CAAO,MAAQ,MAAOA,CAAAA,CAAM,CAEjGnF,CAAAA,CAAAA,CAAeH,CAEnB,CAAA,GAAIsE,CAAc,GAAA,WAAA,CAAa,CAC3B,IAAMgC,CAAAA,CAAatG,CAAM,CAAA,KAAA,CAAM,aAAa,CAAA,CAC5CG,CAAemG,CAAAA,CAAAA,CAAaA,EAAW,CAAC,CAAA,CAAE,IAAK,EAAA,CAAItG,EACvD,CAEAoG,CAAc,CAAA,KAAA,CAAQjG,CACtBqG,CAAAA,CAAAA,CAAS,WAAYJ,CAAAA,CAAa,EACtC,CAAC,EACL,CAEQ,kBAAkBxF,CAAaX,CAAAA,CAAAA,CAAsC,CAC3E,GAAI,CAACW,CAAAA,EAAQ,CAACA,CAAAA,CAAI,SAAS,iBAAiB,CAAA,EAAK,CAACA,CAAAA,CAAI,QAAS,CAAA,mBAAmB,CAC9E,CAAA,OAAOA,EAGX,IAAM6F,CAAAA,CAAkBxG,CAAc,GAAA,OAAA,CAChC,IAAK,CAAA,MAAA,CAAO,oBACZ,CAAA,IAAA,CAAK,MAAO,CAAA,oBAAA,CAElB,GAAI,CAACwG,CACD,CAAA,OAAO7F,CAGX,CAAA,IAAI8F,EAAe9F,CACfX,CAAAA,CAAAA,GAAc,OAAWW,EAAAA,CAAAA,CAAI,WAAY,EAAA,CAAE,QAAS,CAAA,MAAM,IAC1D8F,CAAe9F,CAAAA,CAAAA,CAAI,OAAQ,CAAA,SAAA,CAAW,MAAM,CAAA,CAC5C,IAAK,CAAA,GAAA,CAAI,0BAA0B8F,CAAY,CAAA,CAAE,CAGrD,CAAA,CAAA,IAAM1E,CAAe,CAAA,UAAA,CACfC,CAAQyE,CAAAA,CAAAA,CAAa,KAAM1E,CAAAA,CAAY,CAE7C,CAAA,GAAIC,CAAM,CAAA,MAAA,GAAW,CACjB,CAAA,OAAA,IAAA,CAAK,IAAI,CAA2DyE,wDAAAA,EAAAA,CAAY,CAAE,CAAA,CAAA,CAC3EA,CAGX,CAAA,GAAM,CAACxE,CAAAA,CAASC,CAAI,CAAIF,CAAAA,CAAAA,CACpBG,CAAiBD,CAAAA,CAAAA,CAAK,KAAM,CAAA,GAAG,CAE7BE,CAAAA,CAAAA,CAAqBD,EAAe,CAAC,CAAA,CACR1E,CAA8B,CAAA,IAAA,CAAK4E,CAAUD,EAAAA,CAAAA,CAAmB,QAASC,CAAAA,CAAM,CAAC,CAAA,GAG/G,IAAK,CAAA,GAAA,CAAI,CAA+CoE,4CAAAA,EAAAA,CAAY,CAAE,CAAA,CAAA,CACtEtE,EAAe,KAAM,EAAA,CAAA,CAGzB,IAAMuE,CAAAA,CAAYvE,CAAe,CAAA,IAAA,CAAK,GAAG,CAAA,CACnCM,EAAW,CAAGR,EAAAA,CAAO,CAAGF,EAAAA,CAAY,CAAGyE,EAAAA,CAAe,CAAIE,CAAAA,EAAAA,CAAS,GAEzE,OAAK,IAAA,CAAA,GAAA,CAAI,CAAe1G,YAAAA,EAAAA,CAAS,CAAcW,WAAAA,EAAAA,CAAG,CAAS8B,MAAAA,EAAAA,CAAQ,CAAG,CAAA,CAAA,CAAA,CAC/DA,CACT,CACF,EAKA,SAASkE,CAAiB,EAAA,CACxB,IAAMC,CAAgB,CAAA,QAAA,CAAS,cAAe,CAAA,eAAe,CAC7D,CAAA,GAAI,CAACA,CAAAA,CAAe,CAClB,OAAQ,CAAA,IAAA,CAAK,mEAAmE,CAAA,CAChF,MACF,CAEA,GAAI,CACF,IAAM3I,CAAS,CAAA,IAAA,CAAK,KAAM2I,CAAAA,CAAAA,CAAc,WAAe,EAAA,IAAI,CAG3D,CAAA,GAAI,CAAC3I,CAAAA,CAAO,MAAQ,CAAA,CAClB,OAAQ,CAAA,KAAA,CAAM,gDAAgD,CAAA,CAC9D,MACF,CAcA,UAAA,CAZ0B,IAAM,CAChC,IAAM4I,CAAAA,CAAU,IAAI7I,CAAAA,CAAqBC,CAAM,CAG9C,CAAA,MAAA,CAAe,aAAgB4I,CAAAA,CAAAA,CAEhCA,CAAQ,CAAA,IAAA,EAAO,CAAA,KAAA,CAAMtI,GAAS,CAC5B,OAAA,CAAQ,KAAM,CAAA,gDAAA,CAAkDA,CAAK,EACvE,CAAC,EACD,EAG8B,GAAG,EAEnC,CAASA,MAAAA,CAAAA,CAAO,CACd,OAAA,CAAQ,KAAM,CAAA,yCAAA,CAA2CA,CAAK,EAChE,CACF,CAGI,QAAA,CAAS,UAAe,GAAA,SAAA,CAC1B,QAAS,CAAA,gBAAA,CAAiB,mBAAoBoI,CAAQ,CAAA,CAC7C,QAAS,CAAA,UAAA,GAAe,aAEjC,CAAA,UAAA,CAAWA,CAAU,CAAA,EAAE,EAGvBA,CAAS,EAAA","file":"index.js","sourcesContent":["import { ContraClient, utils } from '@contra/client';\nimport type {\n  ExpertProfile,\n  ExpertFilters,\n  FilterChangeEvent,\n  ExpertLoadEvent,\n  ErrorEvent,\n  ExpertField\n} from '@contra/types';\n\n/**\n * Webflow Runtime for Contra Experts\n * Simplified for flexibility and predictability.\n */\n\n// Simplified configuration\ninterface RuntimeConfig {\n  apiKey: string;\n  debug?: boolean;\n  loadingClass?: string;\n  errorClass?: string;\n  emptyClass?: string;\n  // Video configuration\n  videoAutoplay?: boolean;\n  videoHoverPlay?: boolean;\n  videoMuted?: boolean;\n  videoLoop?: boolean;\n  videoControls?: boolean;\n  // Cloudinary transformations\n  imageTransformations?: string;\n  videoTransformations?: string;\n  optimizeGifsAsVideo?: boolean;\n}\n\nconst CLOUDINARY_TRANSFORM_PREFIXES = [\n  'w_', 'h_', 'c_', 'f_', 'q_', 'fl_', 'vc_', 'b_', 'e_', 'o_', 'a_', 'dpr_', 'ar_'\n];\n\n// Attribute constants\nconst ATTR_PREFIX = 'data-contra-';\nconst ATTRS = {\n  // Core list attributes\n  listId: 'list-id',\n  program: 'program',\n  template: 'template',\n  \n  // States\n  loading: 'loading',\n  error: 'error',\n  empty: 'empty',\n  \n  // Field binding\n  field: 'field',\n  format: 'format',\n  \n  // Repeating elements\n  repeat: 'repeat',\n  max: 'max',\n  \n  // Sorting and pagination\n  limit: 'limit',\n  \n  // Actions\n  action: 'action',\n  listTarget: 'list-target',\n\n  // Conditional display\n  showWhen: 'show-when',\n  hideWhen: 'hide-when'\n} as const;\n\n// State management is now keyed by the list's unique ID\nclass RuntimeState {\n  private states = new Map<string, {\n    filters: ExpertFilters;\n    experts: ExpertProfile[];\n    loading: boolean;\n    error: Error | null;\n    offset: number;\n    limit: number;\n    totalCount: number;\n    hasNextPage: boolean;\n  }>();\n\n  getState(listId: string) {\n    if (!this.states.has(listId)) {\n      this.states.set(listId, {\n        filters: {},\n        experts: [],\n        loading: false,\n        error: null,\n        offset: 0,\n        limit: 20, // Default limit\n        totalCount: 0,\n        hasNextPage: false\n      });\n    }\n    return this.states.get(listId)!;\n  }\n\n  updateState(listId: string, updates: Partial<ReturnType<RuntimeState['getState']>>) {\n    const state = this.getState(listId);\n    Object.assign(state, updates);\n    this.states.set(listId, state);\n  }\n}\n\n/**\n * Main Runtime Class\n */\nexport class ContraWebflowRuntime {\n  private client: ContraClient;\n  private config: Required<RuntimeConfig>;\n  private state = new RuntimeState();\n  private debouncedReload: Map<string, () => void> = new Map();\n  private filterNameMap: Record<string, string> = {\n    locations: 'location',\n  };\n  private filterOptionLabels: Record<string, Record<string, string>> = {\n    sortBy: {\n      relevance: 'Relevance',\n      oldest: 'Oldest',\n      newest: 'Newest',\n      rate_asc: 'Rate (Low to High)',\n      rate_desc: 'Rate (High to Low)'\n    }\n  };\n\n  constructor(config: RuntimeConfig) {\n    this.config = {\n      debug: false,\n      loadingClass: 'loading',\n      errorClass: 'error',\n      emptyClass: 'empty',\n      // Video configuration defaults\n      videoAutoplay: false,\n      videoHoverPlay: true,\n      videoMuted: true,\n      videoLoop: true,\n      videoControls: false,\n      // Cloudinary transformation defaults\n      imageTransformations: 'f_auto,q_auto:eco,c_limit,w_800',\n      videoTransformations: 'fl_progressive,f_auto,q_auto:eco,vc_auto,c_limit,h_720',\n      optimizeGifsAsVideo: true,\n      ...config\n    };\n\n    this.client = new ContraClient({\n      apiKey: this.config.apiKey,\n      debug: this.config.debug\n    });\n\n    this.log('Runtime initialized', this.config);\n  }\n\n  /**\n   * Initialize the runtime by finding and setting up all lists.\n   */\n  async init(): Promise<void> {\n    this.log('Initializing runtime...');\n\n    try {\n      // 1. Discover all lists and unique programs to fetch filters for\n      const listElements = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.listId}]`);\n      this.log(`Found ${listElements.length} lists to initialize.`);\n      \n      const programFilters = new Map<string, any[]>();\n      for (const listElement of listElements) {\n        const programId = this.getAttr(listElement, ATTRS.program);\n        if (programId && !programFilters.has(programId)) {\n          this.log(`Fetching filters for program: ${programId}`);\n          programFilters.set(programId, await this.getAvailableFilters(programId));\n        }\n      }\n\n      // 2. Populate all filter controls on the page once\n      this.populateAllFilterControls(programFilters);\n\n      // 3. Initialize each list\n      for (const listElement of listElements) {\n        await this.initList(listElement);\n      }\n\n      // 4. Wire up all action buttons and filter controls\n      this.wireActionButtons();\n      this.wireFilterControls();\n\n      this.log('Runtime initialization complete');\n    } catch (error) {\n      this.log('Runtime initialization failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize a single expert list.\n   */\n  private async initList(listElement: Element): Promise<void> {\n    const listId = this.getAttr(listElement, ATTRS.listId);\n    const programId = this.getAttr(listElement, ATTRS.program);\n\n    if (!listId || !programId) {\n      this.log('List element is missing required attributes `data-contra-list-id` or `data-contra-program`.', listElement);\n      return;\n    }\n\n    this.log(`Initializing list: ${listId} for program: ${programId}`);\n\n    try {\n      (listElement as HTMLElement).setAttribute('data-contra-initialized', 'true');\n      (listElement as HTMLElement).classList.add('contra-list');\n      \n      const template = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.template}]`);\n      if (template) {\n          (template as HTMLElement).style.display = 'none';\n          this.log(`Template found and hidden for list: ${listId}`);\n      }\n      \n      // Defensively remove inline display styles from state elements to prevent conflicts.\n      const loadingEl = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n      if (loadingEl) (loadingEl as HTMLElement).style.removeProperty('display');\n      const emptyEl = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n      if (emptyEl) (emptyEl as HTMLElement).style.removeProperty('display');\n\n      const initialFilters = this.parseFiltersFromElement(listElement);\n      const limit = parseInt(this.getAttr(listElement, ATTRS.limit) || '20', 10);\n      \n      this.state.updateState(listId, { \n      filters: initialFilters,\n        limit: limit,\n        offset: initialFilters.offset || 0,\n      });\n      \n      this.state.updateState(listId, { loading: true, error: null });\n      this.showLoading(listElement, true);\n\n      const response = await this.client.listExperts(programId, initialFilters);\n      \n      this.log(`Loaded ${response.data.length} experts for list ${listId}`, response);\n\n      const newExperts = response.data;\n      const allExperts = newExperts;\n\n      // Update state before touching the DOM\n      this.state.updateState(listId, {\n        experts: allExperts,\n        totalCount: response.totalCount,\n        offset: initialFilters.offset || 0 + newExperts.length,\n        hasNextPage: newExperts.length === limit,\n        loading: false\n      });\n\n      // Render experts and then immediately update all UI states\n      this.renderExperts(listElement, newExperts, false);\n      this.updateUIStates(listElement, listId);\n\n    } catch (error) {\n      this.log(`Failed to initialize list ${listId}`, error);\n      this.state.updateState(listId, { loading: false, error: error as Error });\n      this.showError(listElement, error as Error);\n    } finally {\n      this.showLoading(listElement, false);\n    }\n  }\n\n  /**\n   * Wire up all action buttons on the page.\n   */\n  private wireActionButtons(): void {\n    const actionButtons = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.action}]`);\n    \n    actionButtons.forEach(button => {\n      const action = this.getAttr(button, ATTRS.action);\n      const targetListId = this.getAttr(button, ATTRS.listTarget);\n      \n      if (!action || !targetListId) {\n        this.log('Action button is missing required `data-contra-action` or `data-contra-list-target` attributes.', button);\n        return;\n      }\n\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.handleAction(action, targetListId, button);\n      });\n    });\n  }\n\n  /**\n   * Load experts for a given list.\n   */\n  private async loadExperts(listId: string, programId: string, append = false): Promise<void> {\n    const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${listId}\"]`);\n    if (!listElement) {\n      this.log(`Cannot find list element with ID: ${listId}`);\n          return;\n        }\n\n    // When reloading the list (not appending), we must hide the empty state message first.\n    const emptyElement = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (!append && emptyElement) {\n        (emptyElement as HTMLElement).style.display = 'none';\n    }\n\n    const state = this.state.getState(listId);\n    const filters = {\n      ...state.filters,\n      limit: state.limit,\n      offset: state.offset,\n    };\n    \n    this.log(`Loading experts for list: ${listId}`, filters);\n\n    try {\n      this.showLoading(listElement, true);\n      this.state.updateState(listId, { loading: true, error: null });\n\n      const response = await this.client.listExperts(programId, filters);\n      \n      this.log(`Loaded ${response.data.length} experts for list ${listId}`, response);\n\n      const newExperts = response.data;\n      const allExperts = append ? [...state.experts, ...newExperts] : newExperts;\n\n      // Update state before touching the DOM\n      this.state.updateState(listId, {\n        experts: allExperts,\n        totalCount: response.totalCount,\n        offset: state.offset + newExperts.length,\n        hasNextPage: newExperts.length === state.limit,\n        loading: false\n      });\n\n      // Render experts and then immediately update all UI states\n      this.renderExperts(listElement, newExperts, append);\n      this.updateUIStates(listElement, listId);\n\n    } catch (error) {\n      this.log(`Failed to load experts for list: ${listId}`, error);\n      this.state.updateState(listId, { loading: false, error: error as Error });\n      this.showError(listElement, error as Error);\n    } finally {\n      // Always ensure loading state is removed\n      this.showLoading(listElement, false);\n    }\n  }\n\n  /**\n   * Render experts into the container. Can clear or append.\n   */\n  private renderExperts(listElement: Element, experts: ExpertProfile[], append: boolean): void {\n    const template = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    if (!template) {\n      this.log('No template found in list', listElement);\n      return;\n    }\n\n    if (!append) {\n      // Clear only previously rendered expert cards\n      const existingCards = this.querySelectorAll(listElement, '.contra-rendered-item');\n    existingCards.forEach(card => card.remove());\n    }\n\n    const fragment = document.createDocumentFragment();\n    experts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert);\n      fragment.appendChild(expertCard);\n    });\n    listElement.appendChild(fragment);\n\n    this.log(`Rendered ${experts.length} expert cards into list`, listElement);\n  }\n\n  /**\n   * Populate expert card from template\n   */\n  private populateExpertCard(template: Element, expert: ExpertProfile): Element {\n    const card = template.cloneNode(true) as Element;\n    \n    // Add a marker class to identify this as a rendered card\n    card.classList.add('contra-rendered-item');\n    \n    // Remove template attribute and show the card\n    card.removeAttribute(`${ATTR_PREFIX}${ATTRS.template}`);\n    (card as HTMLElement).style.display = '';\n\n    // Populate field bindings\n    this.populateFields(card, expert);\n    \n    // Handle repeating elements (projects, social links)\n    this.populateRepeatingElements(card, expert);\n    \n    // Handle conditional display\n    this.handleConditionalDisplay(card, expert);\n\n    return card;\n  }\n\n  /**\n   * Populate data fields in the card\n   */\n  private populateFields(card: Element, expert: ExpertProfile): void {\n    const fieldElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.field}]`);\n    \n    fieldElements.forEach(element => {\n      const fieldName = this.getAttr(element, ATTRS.field) as ExpertField;\n      const format = this.getAttr(element, ATTRS.format);\n      \n      if (!fieldName || !(fieldName in expert)) return;\n\n      const value = expert[fieldName];\n      this.setElementValue(element, value, format);\n    });\n\n    // Handle star ratings\n    const starsElements = this.querySelectorAll(card, '[data-contra-stars]');\n    starsElements.forEach(element => {\n      if (expert.averageReviewScore) {\n        this.renderStarRating(element, expert.averageReviewScore);\n      }\n    });\n  }\n\n  /**\n   * Set element value with proper formatting\n   */\n  private setElementValue(element: Element, value: any, format?: string | null): void {\n    if (value == null || value === '') return;\n\n    // Media type detection and handling\n    if (this.isMediaField(element) && typeof value === 'string' && value.trim()) {\n      this.setMediaValue(element, value);\n      return;\n    }\n\n    if (element instanceof HTMLAnchorElement) {\n      element.href = String(value);\n      if (element.children.length === 0 && !element.textContent?.trim()) {\n        element.textContent = String(value);\n      }\n    } else if (element instanceof HTMLInputElement) {\n      element.value = String(value);\n    } else if (element instanceof HTMLImageElement) {\n      // Regular image handling for avatars and other images\n      const mediaType = this.detectMediaType(String(value));\n      const transformedUrl = this.transformMediaUrl(String(value), mediaType);\n      element.src = transformedUrl;\n      element.alt = element.alt || 'Image';\n    } else {\n      // Text content with formatting\n      let displayValue = String(value);\n      \n      if (format) {\n        switch (format) {\n          case 'currency':\n            displayValue = typeof value === 'number' ? `$${value}` : displayValue;\n            break;\n          case 'rate':\n            displayValue = utils.formatRate(typeof value === 'number' ? value : null);\n            break;\n          case 'rating':\n            // Format rating to one decimal place (5.0, 4.9, etc.)\n            displayValue = typeof value === 'number' ? value.toFixed(1) : displayValue;\n            break;\n          case 'earnings':\n            // Format earnings like $25k+\n            if (typeof value === 'number') {\n              if (value >= 1000000) {\n                displayValue = `$${Math.floor(value / 1000000)}M+`;\n              } else if (value >= 1000) {\n                displayValue = `$${Math.floor(value / 1000)}k+`;\n              } else {\n                displayValue = `$${value}`;\n              }\n            }\n            break;\n          case 'number':\n            displayValue = typeof value === 'number' ? value.toLocaleString() : displayValue;\n            break;\n          case 'truncate':\n            displayValue = displayValue.length > 100 ? displayValue.substring(0, 97) + '...' : displayValue;\n            break;\n          case 'boolean':\n            displayValue = value ? 'Yes' : 'No';\n            break;\n          case 'availability':\n            displayValue = value ? 'Available' : 'Not Available';\n            break;\n        }\n      }\n      \n      element.textContent = displayValue;\n    }\n  }\n\n  /**\n   * Star rating rendering with optional text display\n   */\n  private renderStarRating(element: Element, rating: number): void {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    let starsHtml = '';\n    \n    // Full stars\n    for (let i = 0; i < fullStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-full\">★</span>';\n    }\n    \n    // Half star\n    if (hasHalfStar) {\n      starsHtml += '<span class=\"contra-star contra-star-half\">★</span>';\n    }\n    \n    // Empty stars\n    for (let i = 0; i < emptyStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-empty\">☆</span>';\n    }\n    \n    element.innerHTML = starsHtml;\n    \n    // Also update any rating text elements in the same card\n    const card = element.closest('[data-contra-template]') || element.closest('.expert-card');\n    if (card) {\n      const ratingTextElements = this.querySelectorAll(card, '[data-contra-rating-text]');\n      ratingTextElements.forEach(textElement => {\n        textElement.textContent = rating.toFixed(1);\n      });\n    }\n  }\n\n  /**\n   * Media type detection and element handling\n   */\n  private isMediaField(element: Element): boolean {\n    const field = this.getAttr(element, ATTRS.field);\n    // Only apply advanced media handling to project cover URLs, not avatars\n    return field === 'coverUrl';\n  }\n\n  /**\n   * Media value setting with automatic type detection\n   */\n  private setMediaValue(element: Element, url: string): void {\n    const mediaType = this.detectMediaType(url);\n    const parent = element.parentElement;\n    \n    if (!parent) {\n      this.log('Media element has no parent for replacement', element);\n      return;\n    }\n\n    // Remove existing media element\n    element.remove();\n\n    // Create appropriate media element\n    let mediaElement: HTMLElement;\n    \n    switch (mediaType) {\n      case 'video':\n        const transformedVideoUrl = this.transformMediaUrl(url, 'video');\n        mediaElement = this.createVideoElement(transformedVideoUrl, element);\n        break;\n      case 'image':\n      default:\n        const transformedImageUrl = this.transformMediaUrl(url, 'image');\n        mediaElement = this.createImageElement(transformedImageUrl, element);\n        break;\n    }\n\n    // Preserve classes and attributes from original element\n    this.transferAttributes(element, mediaElement);\n    \n    // Insert new media element\n    parent.appendChild(mediaElement);\n    \n    this.log(`Created ${mediaType} element for URL: ${url}`);\n  }\n\n  /**\n   * Detect media type from URL\n   */\n  private detectMediaType(url: string): 'image' | 'video' {\n    if (!url || typeof url !== 'string') {\n      this.log('Invalid URL provided to detectMediaType:', url);\n      return 'image';\n    }\n    \n    const urlLower = url.toLowerCase();\n    \n    // If optimizing GIFs as videos, treat them as such immediately.\n    if (this.config.optimizeGifsAsVideo && urlLower.endsWith('.gif')) {\n        return 'video';\n    }\n    \n    // Video formats - check for extensions and Cloudinary video path\n    const videoExtensions = ['.mp4', '.webm', '.mov', '.avi', '.mkv', '.ogg'];\n    const isVideoExtension = videoExtensions.some(ext => urlLower.endsWith(ext));\n    const isCloudinaryVideo = urlLower.includes('cloudinary.com/') && urlLower.includes('/video/');\n    \n    if (isVideoExtension || isCloudinaryVideo) {\n      return 'video';\n    }\n    \n    // Default to image\n    return 'image';\n  }\n\n  /**\n   * Create video element with fallback\n   */\n  private createVideoElement(url: string, originalElement: Element): HTMLVideoElement {\n    const video = document.createElement('video');\n    \n    // Video attributes\n    video.src = url;\n    video.loop = this.config.videoLoop;\n    video.playsInline = true; // Essential for inline playback on iOS\n    video.preload = 'metadata';\n    video.controls = this.config.videoControls;\n    \n    // Set a poster image proactively for better mobile compatibility and UX.\n    const posterUrl = this.extractVideoThumbnail(url);\n    if (posterUrl) {\n      video.poster = posterUrl;\n      this.log(`Set poster for video ${url}: ${posterUrl}`);\n    }\n\n    // Muted is critical for autoplay on mobile.\n    if (this.config.videoMuted) {\n        video.muted = true;\n        video.setAttribute('muted', ''); // Set attribute for maximum compatibility\n    }\n    \n    // Maintain aspect ratio and object-fit from original\n    video.style.width = '100%';\n    video.style.height = '100%';\n    video.style.objectFit = 'cover';\n    video.style.borderRadius = 'inherit';\n    \n    // Autoplay configuration\n    if (this.config.videoAutoplay) {\n      video.autoplay = true;\n      video.setAttribute('autoplay', '');\n    }\n    \n    // Error handling with fallback to poster or placeholder\n    video.onerror = () => {\n      this.log(`Video failed to load: ${url}`);\n      // Create a fallback image element\n      const fallbackImg = this.createImageElement(posterUrl || url, originalElement);\n      if (video.parentElement) {\n        video.parentElement.replaceChild(fallbackImg, video);\n      }\n    };\n\n    // Hover-to-play functionality (if enabled and not autoplay)\n    if (this.config.videoHoverPlay && !this.config.videoAutoplay) {\n      let isPlaying = false;\n      \n      const playVideo = () => {\n        if (!isPlaying) {\n        video.currentTime = 0;\n          video.play().then(() => {\n            isPlaying = true;\n          }).catch((error) => {\n            this.log('Video play failed:', error);\n          });\n        }\n      };\n      \n      const pauseVideo = () => {\n        if (isPlaying) {\n        video.pause();\n        video.currentTime = 0;\n          isPlaying = false;\n        }\n      };\n\n      // Desktop events\n      video.addEventListener('mouseenter', playVideo);\n      video.addEventListener('mouseleave', pauseVideo);\n      \n      // Mobile (touch) events - simplified approach\n      let touchTimeout: number;\n      \n      video.addEventListener('touchstart', (e) => {\n        // Clear any existing timeout\n        if (touchTimeout) {\n          clearTimeout(touchTimeout);\n        }\n        \n        // Start playing on touch\n        playVideo();\n        \n        // Set a timeout to pause after 3 seconds if no touchend\n        touchTimeout = window.setTimeout(() => {\n          pauseVideo();\n        }, 3000);\n      }, { passive: true });\n      \n      video.addEventListener('touchend', () => {\n        // Clear timeout and pause\n        if (touchTimeout) {\n          clearTimeout(touchTimeout);\n        }\n        // Small delay before pausing to avoid immediate pause on quick taps\n        setTimeout(pauseVideo, 100);\n      }, { passive: true });\n    }\n\n    return video;\n  }\n\n  /**\n   * Create image element with error handling\n   */\n  private createImageElement(url: string, originalElement: Element): HTMLImageElement {\n    const img = document.createElement('img');\n    \n    img.src = url;\n    img.alt = originalElement.getAttribute('alt') || 'Media content';\n    img.loading = 'lazy';\n    \n    // Maintain styling\n    img.style.width = '100%';\n    img.style.height = '100%';\n    img.style.objectFit = 'cover';\n    img.style.borderRadius = 'inherit';\n    \n    // Error handling\n    img.onerror = () => {\n      this.log(`Image failed to load: ${url}`);\n      img.style.background = '#f3f4f6';\n      img.style.opacity = '0.5';\n      img.alt = 'Image unavailable';\n      \n      // Add broken image icon\n      img.style.position = 'relative';\n      const placeholder = document.createElement('div');\n      placeholder.style.cssText = `\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        color: #9ca3af;\n        font-size: 12px;\n        text-align: center;\n      `;\n      placeholder.textContent = '🖼️ Image unavailable';\n      img.parentElement?.appendChild(placeholder);\n    };\n\n    return img;\n  }\n\n  /**\n   * Extract video thumbnail from Cloudinary URL\n   */\n  private extractVideoThumbnail(videoUrl: string): string | null {\n    if (!videoUrl.includes('/video/upload/')) {\n        this.log('URL does not appear to be a Cloudinary video, cannot generate poster.', videoUrl);\n        return null;\n    }\n\n    // Always change the file extension to .jpg for the poster\n    let posterUrl = videoUrl.replace(/\\.(mp4|webm|mov|avi|mkv|ogg|gif)$/i, '.jpg');\n\n    const uploadMarker = '/upload/';\n    const parts = posterUrl.split(uploadMarker);\n\n    if (parts.length !== 2) {\n        this.log(`Could not parse URL for thumbnail generation: ${videoUrl}`);\n        // Fallback to just the jpg-extended URL\n        return posterUrl;\n    }\n\n    const [baseUrl, path] = parts;\n    let pathComponents = path.split('/');\n    \n    // The transformation string is the first component after /upload/\n    const firstPathComponent = pathComponents[0];\n    const hasTransformations = CLOUDINARY_TRANSFORM_PREFIXES.some(prefix => firstPathComponent.includes(prefix));\n\n    if (!hasTransformations) {\n        // No transformations to modify, just return the URL with the .jpg extension\n        this.log(`No Cloudinary transformations found, returning basic .jpg poster URL for: ${videoUrl}`);\n        return posterUrl;\n    }\n\n    let transformations = pathComponents.shift() || '';\n    \n    // From the transformation string, remove params that are not ideal for a static poster image.\n    const params = transformations.split(',');\n    const filteredParams = params.filter(param => \n        !param.startsWith('fl_') && // remove all flags (e.g., fl_progressive, fl_animated for gifs)\n        param !== 'f_auto'         // remove f_auto, as we are forcing jpg\n    );\n\n    const newTransformations = filteredParams.join(',');\n\n    // Re-add the transformations only if any exist to avoid empty transformation blocks (e.g. \"//\")\n    if (newTransformations) {\n        pathComponents.unshift(newTransformations);\n    }\n\n    const newPath = pathComponents.join('/');\n    const finalUrl = `${baseUrl}${uploadMarker}${newPath}`;\n    \n    this.log(`Generated poster URL: ${finalUrl} from video URL: ${videoUrl}`);\n    return finalUrl;\n  }\n\n  /**\n   * Transfer attributes and classes from old element to new\n   */\n  private transferAttributes(from: Element, to: HTMLElement): void {\n    // Transfer classes\n    if (from.className) {\n      to.className = from.className;\n    }\n    \n    // Transfer data attributes (except contra-field)\n    Array.from(from.attributes).forEach(attr => {\n      if (attr.name.startsWith('data-') && attr.name !== `${ATTR_PREFIX}${ATTRS.field}`) {\n        to.setAttribute(attr.name, attr.value);\n      }\n    });\n    \n    // Transfer style\n    if (from.getAttribute('style')) {\n      const existingStyle = to.getAttribute('style') || '';\n      to.setAttribute('style', existingStyle + '; ' + from.getAttribute('style'));\n    }\n  }\n\n  /**\n   * Handle repeating elements (projects, social links)\n   */\n  private populateRepeatingElements(card: Element, expert: ExpertProfile): void {\n    const repeatElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.repeat}]`);\n    \n    repeatElements.forEach(container => {\n      const repeatType = this.getAttr(container, ATTRS.repeat);\n      const maxItems = parseInt(this.getAttr(container, ATTRS.max) || '10');\n      \n      if (repeatType === 'projects' && expert.projects) {\n        this.populateRepeatingContainer(container, expert.projects.slice(0, maxItems));\n      } else if (repeatType === 'socialLinks' && expert.socialLinks) {\n        this.populateRepeatingContainer(container, expert.socialLinks.slice(0, maxItems));\n      } else if (repeatType === 'skillTags' && expert.skillTags) {\n        this.populateRepeatingContainer(container, expert.skillTags.slice(0, maxItems).map((tag: string) => ({ name: tag })));\n      }\n    });\n  }\n\n  /**\n   * Populate a repeating container with items\n   */\n  private populateRepeatingContainer(container: Element, items: any[]): void {\n    const template = container.firstElementChild;\n    if (!template) return;\n\n    // Clear existing items\n    container.innerHTML = '';\n    \n    // Create items from template\n    items.forEach(item => {\n      const itemElement = template.cloneNode(true) as Element;\n      \n      // Special handling for different item types\n      const containerType = this.getAttr(container, ATTRS.repeat);\n      if (containerType === 'skillTags' && typeof item === 'object' && item.name) {\n        // For skill tags, directly set the text content instead of using populateFields\n        const nameElement = this.querySelector(itemElement, `[${ATTR_PREFIX}${ATTRS.field}=\"name\"]`);\n        if (nameElement) {\n          nameElement.textContent = item.name;\n        }\n      } else {\n        // For other types (projects, socialLinks), use normal field population\n      this.populateFields(itemElement, item);\n      }\n      \n      container.appendChild(itemElement);\n    });\n    \n    // Hide container if no items\n    if (items.length === 0) {\n      (container as HTMLElement).style.display = 'none';\n    }\n  }\n\n  /**\n   * Handle conditional display based on data\n   */\n  private handleConditionalDisplay(card: Element, expert: ExpertProfile): void {\n    const conditionalElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.showWhen}], [${ATTR_PREFIX}${ATTRS.hideWhen}]`);\n    \n    conditionalElements.forEach(element => {\n      const showWhen = this.getAttr(element, ATTRS.showWhen);\n      const hideWhen = this.getAttr(element, ATTRS.hideWhen);\n      \n      let shouldShow = true;\n      \n      if (showWhen) {\n        shouldShow = this.evaluateCondition(expert, showWhen);\n      }\n      \n      if (hideWhen) {\n        shouldShow = shouldShow && !this.evaluateCondition(expert, hideWhen);\n      }\n      \n      (element as HTMLElement).style.display = shouldShow ? '' : 'none';\n    });\n  }\n\n  /**\n   * Evaluate a condition against expert data\n   */\n  private evaluateCondition(expert: ExpertProfile, condition: string): boolean {\n    if (!condition || typeof condition !== 'string') {\n      this.log('Invalid condition provided:', condition);\n      return false;\n    }\n    \n    // Parse condition: \"field:value\" or \"field:>value\" etc.\n    const parts = condition.split(':');\n    if (parts.length < 2) {\n      this.log('Invalid condition format:', condition);\n      return false;\n    }\n    \n    const field = parts[0];\n    const restOfCondition = parts.slice(1).join(':'); // Handle colons in values\n    const expertValue = (expert as any)[field];\n    \n    this.log(`Evaluating condition: ${field} (${expertValue}, type: ${typeof expertValue}) against ${restOfCondition}`);\n    \n    if (expertValue == null) {\n      this.log(`Field '${field}' is null/undefined, condition fails`);\n      return false;\n    }\n    \n    // Check for comparison operators\n    if (restOfCondition.startsWith('>=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) >= Number(value);\n      this.log(`Comparison: ${expertValue} >= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) <= Number(value);\n      this.log(`Comparison: ${expertValue} <= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('>')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) > Number(value);\n      this.log(`Comparison: ${expertValue} > ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) < Number(value);\n      this.log(`Comparison: ${expertValue} < ${value} = ${result}`);\n      return result;\n    } else {\n      // Direct value comparison with type-aware handling\n      let result = false;\n      \n      // Handle boolean fields specially\n      if (typeof expertValue === 'boolean') {\n        // Convert string condition to boolean for comparison\n        if (restOfCondition.toLowerCase() === 'true') {\n          result = expertValue === true;\n        } else if (restOfCondition.toLowerCase() === 'false') {\n          result = expertValue === false;\n        } else {\n          result = false;\n        }\n        this.log(`Boolean comparison: ${expertValue} === ${restOfCondition.toLowerCase() === 'true'} = ${result}`);\n      } else if (typeof expertValue === 'number') {\n        // Handle numeric comparisons\n        const numValue = Number(restOfCondition);\n        result = !isNaN(numValue) && expertValue === numValue;\n        this.log(`Number comparison: ${expertValue} === ${numValue} = ${result}`);\n      } else {\n        // String comparison (case-insensitive)\n        const expertStr = String(expertValue);\n        const valueStr = String(restOfCondition);\n        result = expertStr.toLowerCase() === valueStr.toLowerCase();\n        this.log(`String comparison: '${expertStr}' === '${valueStr}' = ${result}`);\n      }\n      \n      return result;\n    }\n  }\n\n  /**\n   * Update UI states based on current data for a specific list.\n   */\n  private updateUIStates(listElement: Element, listId: string): void {\n    const state = this.state.getState(listId);\n    \n    const emptyElement = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (emptyElement) {\n        const showEmpty = !state.loading && state.experts.length === 0;\n        const display = showEmpty ? 'block' : 'none';\n        (emptyElement as HTMLElement).style.setProperty('display', display, 'important');\n        this.log(`List ${listId}: Empty state display set to '${display}'.`);\n    }\n    \n    const loadMoreButton = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.action}=\"load-more\"][${ATTR_PREFIX}${ATTRS.listTarget}=\"${listId}\"]`);\n    if (loadMoreButton) {\n      const btn = loadMoreButton as HTMLButtonElement;\n      const hasMore = !state.loading && state.hasNextPage;\n      const display = hasMore ? 'inline-block' : 'none';\n      (loadMoreButton as HTMLElement).style.setProperty('display', display, 'important');\n      btn.disabled = state.loading;\n      btn.textContent = state.loading ? 'Loading...' : 'Load More';\n    }\n  }\n\n  /**\n   * Handle action buttons (just load-more for now).\n   */\n  private handleAction(action: string, targetListId: string, button: Element): void {\n    if (action === 'load-more') {\n      const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${targetListId}\"]`);\n      const programId = this.getAttr(listElement!, ATTRS.program);\n      if (listElement && programId) {\n        this.loadExperts(targetListId, programId, true); // `true` to append\n      } else {\n        this.log(`Could not find list or program for target: ${targetListId}`);\n      }\n    } else if (action === 'clear-filters') {\n      this.clearFilters(targetListId);\n    }\n  }\n\n  private clearFilters(targetListId: string): void {\n    const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${targetListId}\"]`);\n    if (!listElement) {\n        this.log(`Cannot find list element with ID: ${targetListId} to clear filters.`);\n        return;\n    }\n    const programId = this.getAttr(listElement, ATTRS.program);\n    if (!programId) {\n        this.log(`Cannot find programId for list: ${targetListId}`);\n        return;\n    }\n\n    this.log(`Clearing filters for list: ${targetListId}`);\n\n    // 1. Reset state\n    this.state.updateState(targetListId, { filters: {}, offset: 0 });\n\n    // 2. Reset controls visually\n    const filterControls = this.querySelectorAll(document.body, `[data-contra-filter][data-contra-list-target=\"${targetListId}\"]`);\n    filterControls.forEach(control => {\n        this.resetControlValue(control as HTMLInputElement | HTMLSelectElement);\n    });\n\n    // 3. Reload data\n    this.loadExperts(targetListId, programId, false); // false to replace, not append\n  }\n\n  private resetControlValue(control: HTMLInputElement | HTMLSelectElement): void {\n    if (control instanceof HTMLInputElement) {\n        switch (control.type) {\n            case 'checkbox':\n            case 'radio':\n                control.checked = false;\n                break;\n            case 'number':\n            case 'range':\n                control.value = '';\n                break;\n            default: // text, search, etc.\n                control.value = '';\n                break;\n        }\n    } else if (control instanceof HTMLSelectElement) {\n        control.selectedIndex = 0; // Reset to the first option\n    }\n  }\n\n  private updateFilterAndReload(listId: string, programId: string, filterKey: string, value: any): void {\n    const state = this.state.getState(listId);\n    const newFilters = { ...state.filters };\n\n    // Process and set value\n    let processedValue = value;\n    if (filterKey === 'available') {\n      // If checkbox is checked, value is true. If unchecked, it's false.\n      // We only want to apply the filter when it's true.\n      processedValue = value ? true : undefined;\n    } else if (['minRate', 'maxRate'].includes(filterKey)) {\n      processedValue = (value === '' || value === null) ? undefined : Number(value);\n    } else if (filterKey === 'languages' && typeof value === 'string') {\n        processedValue = value.split(',').map(v => v.trim()).filter(v => v);\n        if (processedValue.length === 0) {\n            processedValue = undefined;\n        }\n    }\n\n    if (processedValue !== undefined && processedValue !== '') {\n        const apiKey = this.filterNameMap[filterKey] || filterKey;\n        (newFilters as any)[apiKey] = processedValue;\n    } else {\n        const apiKey = this.filterNameMap[filterKey] || filterKey;\n        delete (newFilters as any)[apiKey];\n    }\n    \n    // Reset offset and update state\n    this.state.updateState(listId, { filters: newFilters, offset: 0 });\n\n    this.log(`Filter updated for list ${listId}, reloading. New filters:`, newFilters);\n    \n    // Reload the list\n    this.loadExperts(listId, programId, false);\n  }\n\n  private wireFilterControls(): void {\n    const filterControls = this.querySelectorAll(document.body, `[data-contra-filter]`);\n    this.log(`Found ${filterControls.length} filter controls to wire.`);\n\n    filterControls.forEach(control => {\n        const filterKey = control.getAttribute('data-contra-filter');\n        const targetListId = control.getAttribute('data-contra-list-target');\n\n        if (!filterKey || !targetListId) {\n            this.log('Filter control missing required attributes: data-contra-filter or data-contra-list-target', control);\n            return;\n        }\n\n        const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}list-id=\"${targetListId}\"]`);\n        if (!listElement) return;\n        const programId = this.getAttr(listElement, ATTRS.program);\n        if (!programId) return;\n\n        const debounceTime = (control instanceof HTMLInputElement && ['text', 'search'].includes(control.type)) ? 300 : 0;\n        \n        const handler = () => {\n            const value = this.getControlValue(control as HTMLInputElement | HTMLSelectElement);\n            this.updateFilterAndReload(targetListId, programId, filterKey, value);\n        };\n        \n        const debouncedHandler = this.debounce(handler, debounceTime);\n        \n        const eventType = (control instanceof HTMLInputElement && ['text', 'search'].includes(control.type)) ? 'input' : 'change';\n        control.addEventListener(eventType, debouncedHandler);\n    });\n  }\n\n  private debounce(func: (...args: any[]) => void, delay: number): (...args: any[]) => void {\n    let timeoutId: number;\n    return (...args: any[]) => {\n        clearTimeout(timeoutId);\n        if (delay > 0) {\n            timeoutId = window.setTimeout(() => func.apply(this, args), delay);\n        } else {\n            func.apply(this, args);\n        }\n    };\n  }\n\n  /**\n   * Utility Methods\n   */\n  private getAttr(element: Element, name: string): string | null {\n    return element.getAttribute(`${ATTR_PREFIX}${name}`);\n  }\n\n  private querySelector(element: Element, selector: string): Element | null {\n    return element.querySelector(selector);\n  }\n\n  private querySelectorAll(element: Element, selector: string): Element[] {\n    return Array.from(element.querySelectorAll(selector));\n  }\n\n  private parseFiltersFromElement(element: Element): ExpertFilters {\n    const filters: ExpertFilters = {};\n    \n    // Parse filter attributes\n    const filterMap = {\n      'available': 'available',\n      'languages': 'languages', \n      'location': 'location',\n      'min-rate': 'minRate',\n      'max-rate': 'maxRate',\n      'sort': 'sortBy',\n      'limit': 'limit',\n      'offset': 'offset'\n    };\n\n    Object.entries(filterMap).forEach(([attr, filterKey]) => {\n      const value = this.getAttr(element, attr);\n      if (value != null) {\n        if (filterKey === 'available') {\n          (filters as any)[filterKey] = value === 'true';\n        } else if (filterKey === 'languages') {\n          (filters as any)[filterKey] = value.split(',').map(v => v.trim());\n        } else if (['minRate', 'maxRate', 'limit', 'offset'].includes(filterKey)) {\n          (filters as any)[filterKey] = parseInt(value);\n        } else {\n          (filters as any)[filterKey] = value;\n        }\n      }\n    });\n\n    // Ensure offset defaults to 0 if not specified\n    if (filters.offset === undefined) {\n      filters.offset = 0;\n    }\n\n    return filters;\n  }\n\n  private getControlValue(control: HTMLInputElement | HTMLSelectElement): any {\n    if (control instanceof HTMLInputElement) {\n      switch (control.type) {\n        case 'checkbox':\n          return control.checked;\n        case 'number':\n        case 'range':\n          return control.valueAsNumber;\n        default:\n          return control.value;\n      }\n    } else if (control instanceof HTMLSelectElement) {\n      if (control.multiple) {\n        return Array.from(control.selectedOptions).map(option => option.value);\n      }\n      return control.value;\n    }\n    return null;\n  }\n\n  private showLoading(container: Element, show: boolean): void {\n    const loadingElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n    if (loadingElement) {\n      const display = show ? 'block' : 'none';\n      (loadingElement as HTMLElement).style.setProperty('display', display, 'important');\n    }\n  }\n\n  private showError(container: Element, error: Error): void {\n    const errorElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.error}]`);\n    if (errorElement) {\n      errorElement.textContent = error.message;\n      (errorElement as HTMLElement).style.setProperty('display', 'block', 'important');\n    }\n    (container as HTMLElement).classList.add(this.config.errorClass);\n    this.log('Error displayed', error);\n  }\n\n  private dispatchEvent(target: Element | Document, eventName: string, detail: any): void {\n    const event = new CustomEvent(`contra:${eventName}`, { detail });\n    target.dispatchEvent(event);\n  }\n\n  private log(message: string, ...args: any[]): void {\n    if (this.config.debug) {\n      console.log(`[ContraWebflow] ${message}`, ...args);\n    }\n  }\n\n  private async getAvailableFilters(programId: string): Promise<any[]> {\n    const url = `https://contra.com/public-api/programs/${programId}/filters`;\n    this.log(`Fetching available filters for program: ${programId}`);\n    try {\n        const response = await fetch(url, {\n            headers: {\n                'X-API-Key': this.config.apiKey,\n                'Accept': 'application/json'\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Failed to fetch filters: ${response.statusText}`);\n        }\n        const data = await response.json();\n        this.log('Successfully fetched filters', data.data);\n        return data.data || [];\n    } catch (error) {\n        this.log('Error fetching available filters', error);\n        return [];\n    }\n  }\n  \n  private getFilterOptionLabel(filterKey: string, value: string): string {\n    const labels = this.filterOptionLabels[filterKey];\n    if (labels && labels[value]) {\n      return labels[value];\n    }\n    // Capitalize the first letter and lowercase the rest as a fallback\n    return value.charAt(0).toUpperCase() + value.slice(1).toLowerCase();\n  }\n\n  private populateAllFilterControls(programFilters: Map<string, any[]>): void {\n    this.log('Populating all filter controls on the page...');\n    const allControls = this.querySelectorAll(document.body, `[data-contra-filter]`);\n\n    allControls.forEach(control => {\n      const targetListId = control.getAttribute('data-contra-list-target');\n      if (!targetListId) return;\n\n      const targetList = this.querySelector(document.body, `[data-contra-list-id=\"${targetListId}\"]`);\n      if (!targetList) return;\n\n      const programId = this.getAttr(targetList, ATTRS.program);\n      if (!programId) return;\n\n      const filters = programFilters.get(programId);\n      if (!filters) return;\n\n      const filterKey = control.getAttribute('data-contra-filter');\n      const filterDef = filters.find(f => f.name === filterKey);\n\n      if (!filterDef) return;\n\n      // Handle number input ranges\n      if (filterDef.type === 'number' && control instanceof HTMLInputElement) {\n        if (filterDef.minimum !== undefined) control.min = String(filterDef.minimum);\n        if (filterDef.maximum !== undefined) control.max = String(filterDef.maximum);\n      }\n      \n      // Handle populating controls with options (select, datalist)\n      if (filterDef.options) {\n          if (control instanceof HTMLSelectElement) {\n              this.populateSelectControl(control, filterKey!, filterDef.options);\n          } else if (control instanceof HTMLInputElement && control.getAttribute('list')) {\n              this.populateDatalistControl(control, filterKey!, filterDef.options);\n          }\n      }\n    });\n  }\n\n  private populateSelectControl(control: HTMLSelectElement, filterKey: string, options: any[]): void {\n    this.log(`Populating options for filter '${filterKey}' on control`, control);\n    \n    const placeholder = control.firstElementChild?.cloneNode(true) as Element | null;\n    control.innerHTML = '';\n    if (placeholder && placeholder.getAttribute('value') === '') {\n      control.appendChild(placeholder);\n    }\n\n    options.forEach((option: any) => {\n      const optionElement = document.createElement('option');\n      const value = typeof option === 'object' && option.value !== undefined ? option.value : String(option);\n      \n      optionElement.value = value;\n\n      let label: string;\n      if (filterKey === 'locations') {\n        const labelMatch = value.match(/^(.*?)\\s*\\(/);\n        label = labelMatch ? labelMatch[1].trim() : value;\n      } else {\n        label = this.getFilterOptionLabel(filterKey!, value);\n      }\n      optionElement.textContent = label;\n      \n      if (filterKey === 'sortBy' && value === 'relevance') {\n        optionElement.selected = true;\n      }\n      control.appendChild(optionElement);\n    });\n  }\n\n  private populateDatalistControl(control: HTMLInputElement, filterKey: string, options: any[]): void {\n      const datalistId = control.getAttribute('list');\n      if (!datalistId) return;\n\n      const datalist = document.getElementById(datalistId);\n      if (!datalist) {\n          this.log(`Datalist with id '${datalistId}' not found for input control.`, control);\n          return;\n      }\n\n      this.log(`Populating datalist '#${datalistId}' for filter '${filterKey}'`);\n      datalist.innerHTML = ''; // Clear existing options\n\n      options.forEach((option: any) => {\n          const optionElement = document.createElement('option');\n          const value = typeof option === 'object' && option.value !== undefined ? option.value : String(option);\n          \n          let displayValue = value;\n          // For locations, we want a cleaner value for the user to select.\n          if (filterKey === 'locations') {\n              const labelMatch = value.match(/^(.*?)\\s*\\(/);\n              displayValue = labelMatch ? labelMatch[1].trim() : value;\n          }\n\n          optionElement.value = displayValue;\n          datalist.appendChild(optionElement);\n      });\n  }\n\n  private transformMediaUrl(url: string, mediaType: 'image' | 'video'): string {\n    if (!url || (!url.includes('cloudinary.com/') && !url.includes('media.contra.com/'))) {\n        return url;\n    }\n\n    const transformations = mediaType === 'image' \n        ? this.config.imageTransformations \n        : this.config.videoTransformations;\n\n    if (!transformations) {\n        return url;\n    }\n\n    let processedUrl = url;\n    if (mediaType === 'video' && url.toLowerCase().endsWith('.gif')) {\n        processedUrl = url.replace(/\\.gif$/i, '.mp4');\n        this.log(`Converting GIF to MP4: ${processedUrl}`);\n    }\n\n    const uploadMarker = '/upload/';\n    const parts = processedUrl.split(uploadMarker);\n\n    if (parts.length !== 2) {\n        this.log(`Could not apply transformations, URL format unexpected: ${processedUrl}`);\n        return processedUrl;\n    }\n    \n    const [baseUrl, path] = parts;\n    let pathComponents = path.split('/');\n    \n    const firstPathComponent = pathComponents[0];\n    const hasExistingTransformations = CLOUDINARY_TRANSFORM_PREFIXES.some(prefix => firstPathComponent.includes(prefix));\n\n    if (hasExistingTransformations) {\n        this.log(`Removing existing transformations from URL: ${processedUrl}`);\n        pathComponents.shift();\n    }\n\n    const cleanPath = pathComponents.join('/');\n    const finalUrl = `${baseUrl}${uploadMarker}${transformations}/${cleanPath}`;\n    \n    this.log(`Transformed ${mediaType} URL from \"${url}\" to \"${finalUrl}\"`);\n    return finalUrl;\n  }\n}\n\n/**\n * Auto-initialize runtime when DOM is ready\n */\nfunction autoInit(): void {\n  const configElement = document.getElementById('contra-config');\n  if (!configElement) {\n    console.warn('[ContraWebflow] No config element found. Runtime not initialized.');\n    return;\n  }\n\n  try {\n    const config = JSON.parse(configElement.textContent || '{}');\n    \n    // Validate required config\n    if (!config.apiKey) {\n      console.error('[ContraWebflow] API key is required in config.');\n      return;\n    }\n    \n    const initializeRuntime = () => {\n    const runtime = new ContraWebflowRuntime(config);\n    \n    // Expose runtime globally for debugging\n    (window as any).contraRuntime = runtime;\n    \n    runtime.init().catch(error => {\n      console.error('[ContraWebflow] Runtime initialization failed:', error);\n    });\n    };\n    \n    // Use setTimeout to ensure DOM is fully ready\n    setTimeout(initializeRuntime, 100);\n    \n  } catch (error) {\n    console.error('[ContraWebflow] Failed to parse config:', error);\n  }\n}\n\n// Auto-initialize when DOM is ready with multiple fallbacks\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', autoInit);\n} else if (document.readyState === 'interactive') {\n  // DOM is ready but resources might still be loading\n  setTimeout(autoInit, 50);\n} else {\n  // DOM and resources are ready\n  autoInit();\n}\n\n// Export runtime class for manual initialization\nexport { ContraWebflowRuntime as default }; "]}
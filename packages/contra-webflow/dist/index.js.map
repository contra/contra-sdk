{"version":3,"sources":["../src/runtime.ts"],"names":["CLOUDINARY_TRANSFORM_PREFIXES","ATTR_PREFIX","ATTRS","RuntimeState","listId","updates","state","ContraWebflowRuntime","config","ContraClient","listElements","programFilters","listElement","programId","error","template","loadingEl","emptyEl","initialFilters","limit","response","newExperts","allExperts","button","action","targetListId","e","append","emptyElement","filters","experts","card","fragment","expert","expertCard","element","fieldName","format","value","mediaType","transformedUrl","displayValue","utils","rating","fullStars","hasHalfStar","emptyStars","starsHtml","i","textElement","url","parent","mediaElement","transformedVideoUrl","transformedImageUrl","urlLower","isVideoExtension","ext","isCloudinaryVideo","originalElement","video","posterUrl","fallbackImg","playVideo","pauseVideo","img","placeholder","videoUrl","imageUrl","from","to","attr","existingStyle","container","repeatType","maxItems","tag","items","item","itemElement","showWhen","hideWhen","shouldShow","condition","parts","field","restOfCondition","expertValue","result","numValue","expertStr","valueStr","display","loadMoreButton","btn","control","filterKey","newFilters","processedValue","v","apiKey","filterControls","debounceTime","handler","debouncedHandler","eventType","func","delay","timeoutId","args","name","selector","option","show","loadingElement","errorElement","target","eventName","detail","event","message","data","labels","targetList","filterDef","f","options","optionElement","label","labelMatch","datalistId","datalist","transformations","processedUrl","uploadMarker","baseUrl","path","pathComponents","firstPathComponent","prefix","cleanPath","finalUrl","autoInit","configElement","runtime"],"mappings":"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","file":"index.js","sourcesContent":["import { ContraClient, utils } from '@contra/client';\nimport type {\n  ExpertProfile,\n  ExpertFilters,\n  FilterChangeEvent,\n  ExpertLoadEvent,\n  ErrorEvent,\n  ExpertField\n} from '@contra/types';\n\n/**\n * Webflow Runtime for Contra Experts\n * Simplified for flexibility and predictability.\n */\n\n// Simplified configuration\ninterface RuntimeConfig {\n  apiKey: string;\n  debug?: boolean;\n  loadingClass?: string;\n  errorClass?: string;\n  emptyClass?: string;\n  // Video configuration\n  videoAutoplay?: boolean;\n  videoHoverPlay?: boolean;\n  videoMuted?: boolean;\n  videoLoop?: boolean;\n  videoControls?: boolean;\n  // Cloudinary transformations\n  imageTransformations?: string;\n  videoTransformations?: string;\n  optimizeGifsAsVideo?: boolean;\n}\n\nconst CLOUDINARY_TRANSFORM_PREFIXES = [\n  'w_', 'h_', 'c_', 'f_', 'q_', 'fl_', 'vc_', 'b_', 'e_', 'o_', 'a_', 'dpr_', 'ar_'\n];\n\n// Attribute constants\nconst ATTR_PREFIX = 'data-contra-';\nconst ATTRS = {\n  // Core list attributes\n  listId: 'list-id',\n  program: 'program',\n  template: 'template',\n  \n  // States\n  loading: 'loading',\n  error: 'error',\n  empty: 'empty',\n  \n  // Field binding\n  field: 'field',\n  format: 'format',\n  \n  // Repeating elements\n  repeat: 'repeat',\n  max: 'max',\n  \n  // Sorting and pagination\n  limit: 'limit',\n  \n  // Actions\n  action: 'action',\n  listTarget: 'list-target',\n\n  // Conditional display\n  showWhen: 'show-when',\n  hideWhen: 'hide-when'\n} as const;\n\n// State management is now keyed by the list's unique ID\nclass RuntimeState {\n  private states = new Map<string, {\n    filters: ExpertFilters;\n    experts: ExpertProfile[];\n    loading: boolean;\n    error: Error | null;\n    offset: number;\n    limit: number;\n    totalCount: number;\n    hasNextPage: boolean;\n  }>();\n\n  getState(listId: string) {\n    if (!this.states.has(listId)) {\n      this.states.set(listId, {\n        filters: {},\n        experts: [],\n        loading: false,\n        error: null,\n        offset: 0,\n        limit: 20, // Default limit\n        totalCount: 0,\n        hasNextPage: false\n      });\n    }\n    return this.states.get(listId)!;\n  }\n\n  updateState(listId: string, updates: Partial<ReturnType<RuntimeState['getState']>>) {\n    const state = this.getState(listId);\n    Object.assign(state, updates);\n    this.states.set(listId, state);\n  }\n}\n\n/**\n * Main Runtime Class\n */\nexport class ContraWebflowRuntime {\n  private client: ContraClient;\n  private config: Required<RuntimeConfig>;\n  private state = new RuntimeState();\n  private debouncedReload: Map<string, () => void> = new Map();\n  private filterNameMap: Record<string, string> = {\n    locations: 'location',\n  };\n  private filterOptionLabels: Record<string, Record<string, string>> = {\n    sortBy: {\n      relevance: 'Relevance',\n      oldest: 'Oldest',\n      newest: 'Newest',\n      rate_asc: 'Rate (Low to High)',\n      rate_desc: 'Rate (High to Low)'\n    }\n  };\n\n  constructor(config: RuntimeConfig) {\n    this.config = {\n      debug: false,\n      loadingClass: 'loading',\n      errorClass: 'error',\n      emptyClass: 'empty',\n      // Video configuration defaults\n      videoAutoplay: false,\n      videoHoverPlay: true,\n      videoMuted: true,\n      videoLoop: true,\n      videoControls: false,\n      // Cloudinary transformation defaults\n      imageTransformations: 'f_auto,q_auto:eco,c_limit,w_800',\n      videoTransformations: 'fl_progressive,f_auto,q_auto:eco,vc_auto,c_limit,h_720',\n      optimizeGifsAsVideo: true,\n      ...config\n    };\n\n    this.client = new ContraClient({\n      apiKey: this.config.apiKey,\n      debug: this.config.debug\n    });\n\n    this.log('Runtime initialized', this.config);\n  }\n\n  /**\n   * Initialize the runtime by finding and setting up all lists.\n   */\n  async init(): Promise<void> {\n    this.log('Initializing runtime...');\n\n    try {\n      // 1. Discover all lists and unique programs to fetch filters for\n      const listElements = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.listId}]`);\n      this.log(`Found ${listElements.length} lists to initialize.`);\n      \n      const programFilters = new Map<string, any[]>();\n      for (const listElement of listElements) {\n        const programId = this.getAttr(listElement, ATTRS.program);\n        if (programId && !programFilters.has(programId)) {\n          this.log(`Fetching filters for program: ${programId}`);\n          programFilters.set(programId, await this.getAvailableFilters(programId));\n        }\n      }\n\n      // 2. Populate all filter controls on the page once\n      this.populateAllFilterControls(programFilters);\n\n      // 3. Initialize each list\n      for (const listElement of listElements) {\n        await this.initList(listElement);\n      }\n\n      // 4. Wire up all action buttons and filter controls\n      this.wireActionButtons();\n      this.wireFilterControls();\n\n      this.log('Runtime initialization complete');\n    } catch (error) {\n      this.log('Runtime initialization failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize a single expert list.\n   */\n  private async initList(listElement: Element): Promise<void> {\n    const listId = this.getAttr(listElement, ATTRS.listId);\n    const programId = this.getAttr(listElement, ATTRS.program);\n\n    if (!listId || !programId) {\n      this.log('List element is missing required attributes `data-contra-list-id` or `data-contra-program`.', listElement);\n      return;\n    }\n\n    this.log(`Initializing list: ${listId} for program: ${programId}`);\n\n    try {\n      (listElement as HTMLElement).setAttribute('data-contra-initialized', 'true');\n      (listElement as HTMLElement).classList.add('contra-list');\n      \n      const template = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.template}]`);\n      if (template) {\n          (template as HTMLElement).style.display = 'none';\n          this.log(`Template found and hidden for list: ${listId}`);\n      }\n      \n      // Defensively remove inline display styles from state elements to prevent conflicts.\n      const loadingEl = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n      if (loadingEl) (loadingEl as HTMLElement).style.removeProperty('display');\n      const emptyEl = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n      if (emptyEl) (emptyEl as HTMLElement).style.removeProperty('display');\n\n      const initialFilters = this.parseFiltersFromElement(listElement);\n      const limit = parseInt(this.getAttr(listElement, ATTRS.limit) || '20', 10);\n      \n      this.state.updateState(listId, { \n      filters: initialFilters,\n        limit: limit,\n        offset: initialFilters.offset || 0,\n      });\n      \n      this.state.updateState(listId, { loading: true, error: null });\n      this.showLoading(listElement, true);\n\n      const response = await this.client.listExperts(programId, initialFilters);\n      \n      this.log(`Loaded ${response.data.length} experts for list ${listId}`, response);\n\n      const newExperts = response.data;\n      const allExperts = newExperts;\n\n      // Update state before touching the DOM\n      this.state.updateState(listId, {\n        experts: allExperts,\n        totalCount: response.totalCount,\n        offset: initialFilters.offset || 0 + newExperts.length,\n        hasNextPage: newExperts.length === limit,\n        loading: false\n      });\n\n      // Render experts and then immediately update all UI states\n      this.renderExperts(listElement, newExperts, false);\n      this.updateUIStates(listElement, listId);\n\n    } catch (error) {\n      this.log(`Failed to initialize list ${listId}`, error);\n      this.state.updateState(listId, { loading: false, error: error as Error });\n      this.showError(listElement, error as Error);\n    } finally {\n      this.showLoading(listElement, false);\n    }\n  }\n\n  /**\n   * Wire up all action buttons on the page.\n   */\n  private wireActionButtons(): void {\n    const actionButtons = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.action}]`);\n    \n    actionButtons.forEach(button => {\n      const action = this.getAttr(button, ATTRS.action);\n      const targetListId = this.getAttr(button, ATTRS.listTarget);\n      \n      if (!action || !targetListId) {\n        this.log('Action button is missing required `data-contra-action` or `data-contra-list-target` attributes.', button);\n        return;\n      }\n\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.handleAction(action, targetListId, button);\n      });\n    });\n  }\n\n  /**\n   * Load experts for a given list.\n   */\n  private async loadExperts(listId: string, programId: string, append = false): Promise<void> {\n    const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${listId}\"]`);\n    if (!listElement) {\n      this.log(`Cannot find list element with ID: ${listId}`);\n          return;\n        }\n\n    // When reloading the list (not appending), we must hide the empty state message first.\n    const emptyElement = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (!append && emptyElement) {\n        (emptyElement as HTMLElement).style.display = 'none';\n    }\n\n    const state = this.state.getState(listId);\n    const filters = {\n      ...state.filters,\n      limit: state.limit,\n      offset: state.offset,\n    };\n    \n    this.log(`Loading experts for list: ${listId}`, filters);\n\n    try {\n      this.showLoading(listElement, true);\n      this.state.updateState(listId, { loading: true, error: null });\n\n      const response = await this.client.listExperts(programId, filters);\n      \n      this.log(`Loaded ${response.data.length} experts for list ${listId}`, response);\n\n      const newExperts = response.data;\n      const allExperts = append ? [...state.experts, ...newExperts] : newExperts;\n\n      // Update state before touching the DOM\n      this.state.updateState(listId, {\n        experts: allExperts,\n        totalCount: response.totalCount,\n        offset: state.offset + newExperts.length,\n        hasNextPage: newExperts.length === state.limit,\n        loading: false\n      });\n\n      // Render experts and then immediately update all UI states\n      this.renderExperts(listElement, newExperts, append);\n      this.updateUIStates(listElement, listId);\n\n    } catch (error) {\n      this.log(`Failed to load experts for list: ${listId}`, error);\n      this.state.updateState(listId, { loading: false, error: error as Error });\n      this.showError(listElement, error as Error);\n    } finally {\n      // Always ensure loading state is removed\n      this.showLoading(listElement, false);\n    }\n  }\n\n  /**\n   * Render experts into the container. Can clear or append.\n   */\n  private renderExperts(listElement: Element, experts: ExpertProfile[], append: boolean): void {\n    const template = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    if (!template) {\n      this.log('No template found in list', listElement);\n      return;\n    }\n\n    if (!append) {\n      // Clear only previously rendered expert cards\n      const existingCards = this.querySelectorAll(listElement, '.contra-rendered-item');\n    existingCards.forEach(card => card.remove());\n    }\n\n    const fragment = document.createDocumentFragment();\n    experts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert);\n      fragment.appendChild(expertCard);\n    });\n    listElement.appendChild(fragment);\n\n    this.log(`Rendered ${experts.length} expert cards into list`, listElement);\n  }\n\n  /**\n   * Populate expert card from template\n   */\n  private populateExpertCard(template: Element, expert: ExpertProfile): Element {\n    const card = template.cloneNode(true) as Element;\n    \n    // Add a marker class to identify this as a rendered card\n    card.classList.add('contra-rendered-item');\n    \n    // Remove template attribute and show the card\n    card.removeAttribute(`${ATTR_PREFIX}${ATTRS.template}`);\n    (card as HTMLElement).style.display = '';\n\n    // Populate field bindings\n    this.populateFields(card, expert);\n    \n    // Handle repeating elements (projects, social links)\n    this.populateRepeatingElements(card, expert);\n    \n    // Handle conditional display\n    this.handleConditionalDisplay(card, expert);\n\n    return card;\n  }\n\n  /**\n   * Populate data fields in the card\n   */\n  private populateFields(card: Element, expert: ExpertProfile): void {\n    const fieldElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.field}]`);\n    \n    fieldElements.forEach(element => {\n      const fieldName = this.getAttr(element, ATTRS.field) as ExpertField;\n      const format = this.getAttr(element, ATTRS.format);\n      \n      if (!fieldName || !(fieldName in expert)) return;\n\n      const value = expert[fieldName];\n      this.setElementValue(element, value, format);\n    });\n\n    // Handle star ratings\n    const starsElements = this.querySelectorAll(card, '[data-contra-stars]');\n    starsElements.forEach(element => {\n      if (expert.averageReviewScore) {\n        this.renderStarRating(element, expert.averageReviewScore);\n      }\n    });\n  }\n\n  /**\n   * Set element value with proper formatting\n   */\n  private setElementValue(element: Element, value: any, format?: string | null): void {\n    if (value == null || value === '') return;\n\n    // Media type detection and handling\n    if (this.isMediaField(element) && typeof value === 'string' && value.trim()) {\n      this.setMediaValue(element, value);\n      return;\n    }\n\n    if (element instanceof HTMLAnchorElement) {\n      element.href = String(value);\n      if (element.children.length === 0 && !element.textContent?.trim()) {\n        element.textContent = String(value);\n      }\n    } else if (element instanceof HTMLInputElement) {\n      element.value = String(value);\n    } else if (element instanceof HTMLImageElement) {\n      // Regular image handling for avatars and other images\n      const mediaType = this.detectMediaType(String(value));\n      const transformedUrl = this.transformMediaUrl(String(value), mediaType);\n      element.src = transformedUrl;\n      element.alt = element.alt || 'Image';\n    } else {\n      // Text content with formatting\n      let displayValue = String(value);\n      \n      if (format) {\n        switch (format) {\n          case 'currency':\n            displayValue = typeof value === 'number' ? `$${value}` : displayValue;\n            break;\n          case 'rate':\n            displayValue = utils.formatRate(typeof value === 'number' ? value : null);\n            break;\n          case 'rating':\n            // Format rating to one decimal place (5.0, 4.9, etc.)\n            displayValue = typeof value === 'number' ? value.toFixed(1) : displayValue;\n            break;\n          case 'earnings':\n            // Format earnings like $25k+\n            if (typeof value === 'number') {\n              if (value >= 1000000) {\n                displayValue = `$${Math.floor(value / 1000000)}M+`;\n              } else if (value >= 1000) {\n                displayValue = `$${Math.floor(value / 1000)}k+`;\n              } else {\n                displayValue = `$${value}`;\n              }\n            }\n            break;\n          case 'number':\n            displayValue = typeof value === 'number' ? value.toLocaleString() : displayValue;\n            break;\n          case 'truncate':\n            displayValue = displayValue.length > 100 ? displayValue.substring(0, 97) + '...' : displayValue;\n            break;\n          case 'boolean':\n            displayValue = value ? 'Yes' : 'No';\n            break;\n          case 'availability':\n            displayValue = value ? 'Available' : 'Not Available';\n            break;\n        }\n      }\n      \n      element.textContent = displayValue;\n    }\n  }\n\n  /**\n   * Star rating rendering with optional text display\n   */\n  private renderStarRating(element: Element, rating: number): void {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    let starsHtml = '';\n    \n    // Full stars\n    for (let i = 0; i < fullStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-full\">★</span>';\n    }\n    \n    // Half star\n    if (hasHalfStar) {\n      starsHtml += '<span class=\"contra-star contra-star-half\">★</span>';\n    }\n    \n    // Empty stars\n    for (let i = 0; i < emptyStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-empty\">☆</span>';\n    }\n    \n    element.innerHTML = starsHtml;\n    \n    // Also update any rating text elements in the same card\n    const card = element.closest('[data-contra-template]') || element.closest('.expert-card');\n    if (card) {\n      const ratingTextElements = this.querySelectorAll(card, '[data-contra-rating-text]');\n      ratingTextElements.forEach(textElement => {\n        textElement.textContent = rating.toFixed(1);\n      });\n    }\n  }\n\n  /**\n   * Media type detection and element handling\n   */\n  private isMediaField(element: Element): boolean {\n    const field = this.getAttr(element, ATTRS.field);\n    // Only apply advanced media handling to project cover URLs, not avatars\n    return field === 'coverUrl';\n  }\n\n  /**\n   * Media value setting with automatic type detection\n   */\n  private setMediaValue(element: Element, url: string): void {\n    const mediaType = this.detectMediaType(url);\n    const parent = element.parentElement;\n    \n    if (!parent) {\n      this.log('Media element has no parent for replacement', element);\n      return;\n    }\n\n    // Remove existing media element\n    element.remove();\n\n    // Create appropriate media element\n    let mediaElement: HTMLElement;\n    \n    switch (mediaType) {\n      case 'video':\n        const transformedVideoUrl = this.transformMediaUrl(url, 'video');\n        mediaElement = this.createVideoElement(transformedVideoUrl, element);\n        break;\n      case 'image':\n      default:\n        const transformedImageUrl = this.transformMediaUrl(url, 'image');\n        mediaElement = this.createImageElement(transformedImageUrl, element);\n        break;\n    }\n\n    // Preserve classes and attributes from original element\n    this.transferAttributes(element, mediaElement);\n    \n    // Insert new media element\n    parent.appendChild(mediaElement);\n    \n    this.log(`Created ${mediaType} element for URL: ${url}`);\n  }\n\n  /**\n   * Detect media type from URL\n   */\n  private detectMediaType(url: string): 'image' | 'video' {\n    if (!url || typeof url !== 'string') {\n      this.log('Invalid URL provided to detectMediaType:', url);\n      return 'image';\n    }\n    \n    const urlLower = url.toLowerCase();\n\n    // If optimizing GIFs as videos, treat them as such immediately.\n    if (this.config.optimizeGifsAsVideo && urlLower.endsWith('.gif')) {\n        return 'video';\n    }\n    \n    // Video formats - check for extensions and Cloudinary video path\n    const videoExtensions = ['.mp4', '.webm', '.mov', '.avi', '.mkv', '.ogg'];\n    const isVideoExtension = videoExtensions.some(ext => urlLower.endsWith(ext));\n    const isCloudinaryVideo = urlLower.includes('cloudinary.com/') && urlLower.includes('/video/');\n    \n    if (isVideoExtension || isCloudinaryVideo) {\n      return 'video';\n    }\n    \n    // Default to image\n    return 'image';\n  }\n\n  /**\n   * Create video element with fallback\n   */\n  private createVideoElement(url: string, originalElement: Element): HTMLVideoElement {\n    const video = document.createElement('video');\n    \n    // Video attributes\n    video.src = url;\n    video.loop = this.config.videoLoop;\n    video.playsInline = true; // Essential for inline playback on iOS\n    video.preload = 'metadata';\n    video.controls = this.config.videoControls;\n    \n    // Set a poster image proactively for better mobile compatibility and UX.\n    const posterUrl = this.extractVideoThumbnail(url);\n    if (posterUrl) {\n      video.poster = posterUrl;\n      this.log(`Set poster for video ${url}: ${posterUrl}`);\n    }\n\n    // Muted is critical for autoplay on mobile.\n    if (this.config.videoMuted) {\n        video.muted = true;\n        video.setAttribute('muted', ''); // Set attribute for maximum compatibility\n    }\n    \n    // Maintain aspect ratio and object-fit from original\n    video.style.width = '100%';\n    video.style.height = '100%';\n    video.style.objectFit = 'cover';\n    video.style.borderRadius = 'inherit';\n    \n    // Autoplay configuration\n    if (this.config.videoAutoplay) {\n      video.autoplay = true;\n      video.setAttribute('autoplay', '');\n    }\n    \n    // Error handling with fallback to poster or placeholder\n    video.onerror = () => {\n      this.log(`Video failed to load: ${url}`);\n      // If a poster was already set, we don't need a fallback image, \n      // as the browser will typically display the broken poster.\n      if (!video.poster) {\n        const fallbackImg = this.createImageElement(posterUrl || url, originalElement);\n        video.parentElement?.replaceChild(fallbackImg, video);\n      }\n    };\n\n    // Hover-to-play functionality (if enabled and not autoplay)\n    if (this.config.videoHoverPlay && !this.config.videoAutoplay) {\n      const playVideo = () => {\n        video.currentTime = 0;\n        video.play().catch(() => { /* Ignore play errors (browser policies) */ });\n      };\n      const pauseVideo = () => {\n        video.pause();\n        video.currentTime = 0;\n      };\n\n      // Desktop events\n      video.addEventListener('mouseenter', playVideo);\n      video.addEventListener('mouseleave', pauseVideo);\n      \n      // Mobile (touch) events\n      video.addEventListener('touchstart', (e) => {\n        e.preventDefault(); // Prevents ghost clicks and other artifacts\n        playVideo();\n      }, { passive: false });\n      video.addEventListener('touchend', pauseVideo);\n    }\n\n    return video;\n  }\n\n  /**\n   * Create image element with error handling\n   */\n  private createImageElement(url: string, originalElement: Element): HTMLImageElement {\n    const img = document.createElement('img');\n    \n    img.src = url;\n    img.alt = originalElement.getAttribute('alt') || 'Media content';\n    img.loading = 'lazy';\n    \n    // Maintain styling\n    img.style.width = '100%';\n    img.style.height = '100%';\n    img.style.objectFit = 'cover';\n    img.style.borderRadius = 'inherit';\n    \n    // Error handling\n    img.onerror = () => {\n      this.log(`Image failed to load: ${url}`);\n      img.style.background = '#f3f4f6';\n      img.style.opacity = '0.5';\n      img.alt = 'Image unavailable';\n      \n      // Add broken image icon\n      img.style.position = 'relative';\n      const placeholder = document.createElement('div');\n      placeholder.style.cssText = `\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        color: #9ca3af;\n        font-size: 12px;\n        text-align: center;\n      `;\n      placeholder.textContent = '🖼️ Image unavailable';\n      img.parentElement?.appendChild(placeholder);\n    };\n\n    return img;\n  }\n\n  /**\n   * Extract video thumbnail from Cloudinary URL\n   */\n  private extractVideoThumbnail(videoUrl: string): string | null {\n    if (videoUrl.includes('cloudinary.com/') && videoUrl.includes('/video/')) {\n      // Convert video URL to image thumbnail\n      const imageUrl = videoUrl\n        .replace('/video/', '/image/')\n        .replace(/\\.(mp4|webm|mov|avi|mkv|ogg)$/i, '.jpg');\n      \n      return this.transformMediaUrl(imageUrl, 'image');\n    }\n    return null;\n  }\n\n  /**\n   * Transfer attributes and classes from old element to new\n   */\n  private transferAttributes(from: Element, to: HTMLElement): void {\n    // Transfer classes\n    if (from.className) {\n      to.className = from.className;\n    }\n    \n    // Transfer data attributes (except contra-field)\n    Array.from(from.attributes).forEach(attr => {\n      if (attr.name.startsWith('data-') && attr.name !== `${ATTR_PREFIX}${ATTRS.field}`) {\n        to.setAttribute(attr.name, attr.value);\n      }\n    });\n    \n    // Transfer style\n    if (from.getAttribute('style')) {\n      const existingStyle = to.getAttribute('style') || '';\n      to.setAttribute('style', existingStyle + '; ' + from.getAttribute('style'));\n    }\n  }\n\n  /**\n   * Handle repeating elements (projects, social links)\n   */\n  private populateRepeatingElements(card: Element, expert: ExpertProfile): void {\n    const repeatElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.repeat}]`);\n    \n    repeatElements.forEach(container => {\n      const repeatType = this.getAttr(container, ATTRS.repeat);\n      const maxItems = parseInt(this.getAttr(container, ATTRS.max) || '10');\n      \n      if (repeatType === 'projects' && expert.projects) {\n        this.populateRepeatingContainer(container, expert.projects.slice(0, maxItems));\n      } else if (repeatType === 'socialLinks' && expert.socialLinks) {\n        this.populateRepeatingContainer(container, expert.socialLinks.slice(0, maxItems));\n      } else if (repeatType === 'skillTags' && expert.skillTags) {\n        this.populateRepeatingContainer(container, expert.skillTags.slice(0, maxItems).map((tag: string) => ({ name: tag })));\n      }\n    });\n  }\n\n  /**\n   * Populate a repeating container with items\n   */\n  private populateRepeatingContainer(container: Element, items: any[]): void {\n    const template = container.firstElementChild;\n    if (!template) return;\n\n    // Clear existing items\n    container.innerHTML = '';\n    \n    // Create items from template\n    items.forEach(item => {\n      const itemElement = template.cloneNode(true) as Element;\n      this.populateFields(itemElement, item);\n      container.appendChild(itemElement);\n    });\n    \n    // Hide container if no items\n    if (items.length === 0) {\n      (container as HTMLElement).style.display = 'none';\n    }\n  }\n\n  /**\n   * Handle conditional display based on data\n   */\n  private handleConditionalDisplay(card: Element, expert: ExpertProfile): void {\n    const conditionalElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.showWhen}], [${ATTR_PREFIX}${ATTRS.hideWhen}]`);\n    \n    conditionalElements.forEach(element => {\n      const showWhen = this.getAttr(element, ATTRS.showWhen);\n      const hideWhen = this.getAttr(element, ATTRS.hideWhen);\n      \n      let shouldShow = true;\n      \n      if (showWhen) {\n        shouldShow = this.evaluateCondition(expert, showWhen);\n      }\n      \n      if (hideWhen) {\n        shouldShow = shouldShow && !this.evaluateCondition(expert, hideWhen);\n      }\n      \n      (element as HTMLElement).style.display = shouldShow ? '' : 'none';\n    });\n  }\n\n  /**\n   * Evaluate a condition against expert data\n   */\n  private evaluateCondition(expert: ExpertProfile, condition: string): boolean {\n    if (!condition || typeof condition !== 'string') {\n      this.log('Invalid condition provided:', condition);\n      return false;\n    }\n    \n    // Parse condition: \"field:value\" or \"field:>value\" etc.\n    const parts = condition.split(':');\n    if (parts.length < 2) {\n      this.log('Invalid condition format:', condition);\n      return false;\n    }\n    \n    const field = parts[0];\n    const restOfCondition = parts.slice(1).join(':'); // Handle colons in values\n    const expertValue = (expert as any)[field];\n    \n    this.log(`Evaluating condition: ${field} (${expertValue}, type: ${typeof expertValue}) against ${restOfCondition}`);\n    \n    if (expertValue == null) {\n      this.log(`Field '${field}' is null/undefined, condition fails`);\n      return false;\n    }\n    \n    // Check for comparison operators\n    if (restOfCondition.startsWith('>=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) >= Number(value);\n      this.log(`Comparison: ${expertValue} >= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) <= Number(value);\n      this.log(`Comparison: ${expertValue} <= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('>')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) > Number(value);\n      this.log(`Comparison: ${expertValue} > ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) < Number(value);\n      this.log(`Comparison: ${expertValue} < ${value} = ${result}`);\n      return result;\n    } else {\n      // Direct value comparison with type-aware handling\n      let result = false;\n      \n      // Handle boolean fields specially\n      if (typeof expertValue === 'boolean') {\n        // Convert string condition to boolean for comparison\n        if (restOfCondition.toLowerCase() === 'true') {\n          result = expertValue === true;\n        } else if (restOfCondition.toLowerCase() === 'false') {\n          result = expertValue === false;\n        } else {\n          result = false;\n        }\n        this.log(`Boolean comparison: ${expertValue} === ${restOfCondition.toLowerCase() === 'true'} = ${result}`);\n      } else if (typeof expertValue === 'number') {\n        // Handle numeric comparisons\n        const numValue = Number(restOfCondition);\n        result = !isNaN(numValue) && expertValue === numValue;\n        this.log(`Number comparison: ${expertValue} === ${numValue} = ${result}`);\n      } else {\n        // String comparison (case-insensitive)\n        const expertStr = String(expertValue);\n        const valueStr = String(restOfCondition);\n        result = expertStr.toLowerCase() === valueStr.toLowerCase();\n        this.log(`String comparison: '${expertStr}' === '${valueStr}' = ${result}`);\n      }\n      \n      return result;\n    }\n  }\n\n  /**\n   * Update UI states based on current data for a specific list.\n   */\n  private updateUIStates(listElement: Element, listId: string): void {\n    const state = this.state.getState(listId);\n    \n    const emptyElement = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (emptyElement) {\n        const showEmpty = !state.loading && state.experts.length === 0;\n        const display = showEmpty ? 'block' : 'none';\n        (emptyElement as HTMLElement).style.setProperty('display', display, 'important');\n        this.log(`List ${listId}: Empty state display set to '${display}'.`);\n    }\n    \n    const loadMoreButton = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.action}=\"load-more\"][${ATTR_PREFIX}${ATTRS.listTarget}=\"${listId}\"]`);\n    if (loadMoreButton) {\n      const btn = loadMoreButton as HTMLButtonElement;\n      const hasMore = !state.loading && state.hasNextPage;\n      const display = hasMore ? 'inline-block' : 'none';\n      (loadMoreButton as HTMLElement).style.setProperty('display', display, 'important');\n      btn.disabled = state.loading;\n      btn.textContent = state.loading ? 'Loading...' : 'Load More';\n    }\n  }\n\n  /**\n   * Handle action buttons (just load-more for now).\n   */\n  private handleAction(action: string, targetListId: string, button: Element): void {\n    if (action === 'load-more') {\n      const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${targetListId}\"]`);\n      const programId = this.getAttr(listElement!, ATTRS.program);\n      if (listElement && programId) {\n        this.loadExperts(targetListId, programId, true); // `true` to append\n      } else {\n        this.log(`Could not find list or program for target: ${targetListId}`);\n      }\n    } else if (action === 'clear-filters') {\n      this.clearFilters(targetListId);\n    }\n  }\n\n  private clearFilters(targetListId: string): void {\n    const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${targetListId}\"]`);\n    if (!listElement) {\n        this.log(`Cannot find list element with ID: ${targetListId} to clear filters.`);\n        return;\n    }\n    const programId = this.getAttr(listElement, ATTRS.program);\n    if (!programId) {\n        this.log(`Cannot find programId for list: ${targetListId}`);\n        return;\n    }\n\n    this.log(`Clearing filters for list: ${targetListId}`);\n\n    // 1. Reset state\n    this.state.updateState(targetListId, { filters: {}, offset: 0 });\n\n    // 2. Reset controls visually\n    const filterControls = this.querySelectorAll(document.body, `[data-contra-filter][data-contra-list-target=\"${targetListId}\"]`);\n    filterControls.forEach(control => {\n        this.resetControlValue(control as HTMLInputElement | HTMLSelectElement);\n    });\n\n    // 3. Reload data\n    this.loadExperts(targetListId, programId, false); // false to replace, not append\n  }\n\n  private resetControlValue(control: HTMLInputElement | HTMLSelectElement): void {\n    if (control instanceof HTMLInputElement) {\n        switch (control.type) {\n            case 'checkbox':\n            case 'radio':\n                control.checked = false;\n                break;\n            case 'number':\n            case 'range':\n                control.value = '';\n                break;\n            default: // text, search, etc.\n                control.value = '';\n                break;\n        }\n    } else if (control instanceof HTMLSelectElement) {\n        control.selectedIndex = 0; // Reset to the first option\n    }\n  }\n\n  private updateFilterAndReload(listId: string, programId: string, filterKey: string, value: any): void {\n    const state = this.state.getState(listId);\n    const newFilters = { ...state.filters };\n\n    // Process and set value\n    let processedValue = value;\n    if (filterKey === 'available') {\n      // If checkbox is checked, value is true. If unchecked, it's false.\n      // We only want to apply the filter when it's true.\n      processedValue = value ? true : undefined;\n    } else if (['minRate', 'maxRate'].includes(filterKey)) {\n      processedValue = (value === '' || value === null) ? undefined : Number(value);\n    } else if (filterKey === 'languages' && typeof value === 'string') {\n        processedValue = value.split(',').map(v => v.trim()).filter(v => v);\n        if (processedValue.length === 0) {\n            processedValue = undefined;\n        }\n    }\n\n    if (processedValue !== undefined && processedValue !== '') {\n        const apiKey = this.filterNameMap[filterKey] || filterKey;\n        (newFilters as any)[apiKey] = processedValue;\n    } else {\n        const apiKey = this.filterNameMap[filterKey] || filterKey;\n        delete (newFilters as any)[apiKey];\n    }\n    \n    // Reset offset and update state\n    this.state.updateState(listId, { filters: newFilters, offset: 0 });\n\n    this.log(`Filter updated for list ${listId}, reloading. New filters:`, newFilters);\n    \n    // Reload the list\n    this.loadExperts(listId, programId, false);\n  }\n\n  private wireFilterControls(): void {\n    const filterControls = this.querySelectorAll(document.body, `[data-contra-filter]`);\n    this.log(`Found ${filterControls.length} filter controls to wire.`);\n\n    filterControls.forEach(control => {\n        const filterKey = control.getAttribute('data-contra-filter');\n        const targetListId = control.getAttribute('data-contra-list-target');\n\n        if (!filterKey || !targetListId) {\n            this.log('Filter control missing required attributes: data-contra-filter or data-contra-list-target', control);\n            return;\n        }\n\n        const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}list-id=\"${targetListId}\"]`);\n        if (!listElement) return;\n        const programId = this.getAttr(listElement, ATTRS.program);\n        if (!programId) return;\n\n        const debounceTime = (control instanceof HTMLInputElement && ['text', 'search'].includes(control.type)) ? 300 : 0;\n        \n        const handler = () => {\n            const value = this.getControlValue(control as HTMLInputElement | HTMLSelectElement);\n            this.updateFilterAndReload(targetListId, programId, filterKey, value);\n        };\n        \n        const debouncedHandler = this.debounce(handler, debounceTime);\n        \n        const eventType = (control instanceof HTMLInputElement && ['text', 'search'].includes(control.type)) ? 'input' : 'change';\n        control.addEventListener(eventType, debouncedHandler);\n    });\n  }\n\n  private debounce(func: (...args: any[]) => void, delay: number): (...args: any[]) => void {\n    let timeoutId: number;\n    return (...args: any[]) => {\n        clearTimeout(timeoutId);\n        if (delay > 0) {\n            timeoutId = window.setTimeout(() => func.apply(this, args), delay);\n        } else {\n            func.apply(this, args);\n        }\n    };\n  }\n\n  /**\n   * Utility Methods\n   */\n  private getAttr(element: Element, name: string): string | null {\n    return element.getAttribute(`${ATTR_PREFIX}${name}`);\n  }\n\n  private querySelector(element: Element, selector: string): Element | null {\n    return element.querySelector(selector);\n  }\n\n  private querySelectorAll(element: Element, selector: string): Element[] {\n    return Array.from(element.querySelectorAll(selector));\n  }\n\n  private parseFiltersFromElement(element: Element): ExpertFilters {\n    const filters: ExpertFilters = {};\n    \n    // Parse filter attributes\n    const filterMap = {\n      'available': 'available',\n      'languages': 'languages', \n      'location': 'location',\n      'min-rate': 'minRate',\n      'max-rate': 'maxRate',\n      'sort': 'sortBy',\n      'limit': 'limit',\n      'offset': 'offset'\n    };\n\n    Object.entries(filterMap).forEach(([attr, filterKey]) => {\n      const value = this.getAttr(element, attr);\n      if (value != null) {\n        if (filterKey === 'available') {\n          (filters as any)[filterKey] = value === 'true';\n        } else if (filterKey === 'languages') {\n          (filters as any)[filterKey] = value.split(',').map(v => v.trim());\n        } else if (['minRate', 'maxRate', 'limit', 'offset'].includes(filterKey)) {\n          (filters as any)[filterKey] = parseInt(value);\n        } else {\n          (filters as any)[filterKey] = value;\n        }\n      }\n    });\n\n    // Ensure offset defaults to 0 if not specified\n    if (filters.offset === undefined) {\n      filters.offset = 0;\n    }\n\n    return filters;\n  }\n\n  private getControlValue(control: HTMLInputElement | HTMLSelectElement): any {\n    if (control instanceof HTMLInputElement) {\n      switch (control.type) {\n        case 'checkbox':\n          return control.checked;\n        case 'number':\n        case 'range':\n          return control.valueAsNumber;\n        default:\n          return control.value;\n      }\n    } else if (control instanceof HTMLSelectElement) {\n      if (control.multiple) {\n        return Array.from(control.selectedOptions).map(option => option.value);\n      }\n      return control.value;\n    }\n    return null;\n  }\n\n  private showLoading(container: Element, show: boolean): void {\n    const loadingElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n    if (loadingElement) {\n      const display = show ? 'block' : 'none';\n      (loadingElement as HTMLElement).style.setProperty('display', display, 'important');\n    }\n  }\n\n  private showError(container: Element, error: Error): void {\n    const errorElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.error}]`);\n    if (errorElement) {\n      errorElement.textContent = error.message;\n      (errorElement as HTMLElement).style.setProperty('display', 'block', 'important');\n    }\n    (container as HTMLElement).classList.add(this.config.errorClass);\n    this.log('Error displayed', error);\n  }\n\n  private dispatchEvent(target: Element | Document, eventName: string, detail: any): void {\n    const event = new CustomEvent(`contra:${eventName}`, { detail });\n    target.dispatchEvent(event);\n  }\n\n  private log(message: string, ...args: any[]): void {\n    if (this.config.debug) {\n      console.log(`[ContraWebflow] ${message}`, ...args);\n    }\n  }\n\n  private async getAvailableFilters(programId: string): Promise<any[]> {\n    const url = `https://contra.com/public-api/programs/${programId}/filters`;\n    this.log(`Fetching available filters for program: ${programId}`);\n    try {\n        const response = await fetch(url, {\n            headers: {\n                'X-API-Key': this.config.apiKey,\n                'Accept': 'application/json'\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Failed to fetch filters: ${response.statusText}`);\n        }\n        const data = await response.json();\n        this.log('Successfully fetched filters', data.data);\n        return data.data || [];\n    } catch (error) {\n        this.log('Error fetching available filters', error);\n        return [];\n    }\n  }\n  \n  private getFilterOptionLabel(filterKey: string, value: string): string {\n    const labels = this.filterOptionLabels[filterKey];\n    if (labels && labels[value]) {\n      return labels[value];\n    }\n    // Capitalize the first letter and lowercase the rest as a fallback\n    return value.charAt(0).toUpperCase() + value.slice(1).toLowerCase();\n  }\n\n  private populateAllFilterControls(programFilters: Map<string, any[]>): void {\n    this.log('Populating all filter controls on the page...');\n    const allControls = this.querySelectorAll(document.body, `[data-contra-filter]`);\n\n    allControls.forEach(control => {\n      const targetListId = control.getAttribute('data-contra-list-target');\n      if (!targetListId) return;\n\n      const targetList = this.querySelector(document.body, `[data-contra-list-id=\"${targetListId}\"]`);\n      if (!targetList) return;\n\n      const programId = this.getAttr(targetList, ATTRS.program);\n      if (!programId) return;\n\n      const filters = programFilters.get(programId);\n      if (!filters) return;\n\n      const filterKey = control.getAttribute('data-contra-filter');\n      const filterDef = filters.find(f => f.name === filterKey);\n\n      if (!filterDef) return;\n\n      // Handle number input ranges\n      if (filterDef.type === 'number' && control instanceof HTMLInputElement) {\n        if (filterDef.minimum !== undefined) control.min = String(filterDef.minimum);\n        if (filterDef.maximum !== undefined) control.max = String(filterDef.maximum);\n      }\n      \n      // Handle populating controls with options (select, datalist)\n      if (filterDef.options) {\n          if (control instanceof HTMLSelectElement) {\n              this.populateSelectControl(control, filterKey!, filterDef.options);\n          } else if (control instanceof HTMLInputElement && control.getAttribute('list')) {\n              this.populateDatalistControl(control, filterKey!, filterDef.options);\n          }\n      }\n    });\n  }\n\n  private populateSelectControl(control: HTMLSelectElement, filterKey: string, options: any[]): void {\n    this.log(`Populating options for filter '${filterKey}' on control`, control);\n    \n    const placeholder = control.firstElementChild?.cloneNode(true) as Element | null;\n    control.innerHTML = '';\n    if (placeholder && placeholder.getAttribute('value') === '') {\n      control.appendChild(placeholder);\n    }\n\n    options.forEach((option: any) => {\n      const optionElement = document.createElement('option');\n      const value = typeof option === 'object' && option.value !== undefined ? option.value : String(option);\n      \n      optionElement.value = value;\n\n      let label: string;\n      if (filterKey === 'locations') {\n        const labelMatch = value.match(/^(.*?)\\s*\\(/);\n        label = labelMatch ? labelMatch[1].trim() : value;\n      } else {\n        label = this.getFilterOptionLabel(filterKey!, value);\n      }\n      optionElement.textContent = label;\n      \n      if (filterKey === 'sortBy' && value === 'relevance') {\n        optionElement.selected = true;\n      }\n      control.appendChild(optionElement);\n    });\n  }\n\n  private populateDatalistControl(control: HTMLInputElement, filterKey: string, options: any[]): void {\n      const datalistId = control.getAttribute('list');\n      if (!datalistId) return;\n\n      const datalist = document.getElementById(datalistId);\n      if (!datalist) {\n          this.log(`Datalist with id '${datalistId}' not found for input control.`, control);\n          return;\n      }\n\n      this.log(`Populating datalist '#${datalistId}' for filter '${filterKey}'`);\n      datalist.innerHTML = ''; // Clear existing options\n\n      options.forEach((option: any) => {\n          const optionElement = document.createElement('option');\n          const value = typeof option === 'object' && option.value !== undefined ? option.value : String(option);\n          \n          let displayValue = value;\n          // For locations, we want a cleaner value for the user to select.\n          if (filterKey === 'locations') {\n              const labelMatch = value.match(/^(.*?)\\s*\\(/);\n              displayValue = labelMatch ? labelMatch[1].trim() : value;\n          }\n\n          optionElement.value = displayValue;\n          datalist.appendChild(optionElement);\n      });\n  }\n\n  private transformMediaUrl(url: string, mediaType: 'image' | 'video'): string {\n    if (!url || (!url.includes('cloudinary.com/') && !url.includes('media.contra.com/'))) {\n        return url;\n    }\n\n    const transformations = mediaType === 'image' \n        ? this.config.imageTransformations \n        : this.config.videoTransformations;\n\n    if (!transformations) {\n        return url;\n    }\n\n    let processedUrl = url;\n    if (mediaType === 'video' && url.toLowerCase().endsWith('.gif')) {\n        processedUrl = url.replace(/\\.gif$/i, '.mp4');\n        this.log(`Converting GIF to MP4: ${processedUrl}`);\n    }\n\n    const uploadMarker = '/upload/';\n    const parts = processedUrl.split(uploadMarker);\n\n    if (parts.length !== 2) {\n        this.log(`Could not apply transformations, URL format unexpected: ${processedUrl}`);\n        return processedUrl;\n    }\n    \n    const [baseUrl, path] = parts;\n    let pathComponents = path.split('/');\n    \n    const firstPathComponent = pathComponents[0];\n    const hasExistingTransformations = CLOUDINARY_TRANSFORM_PREFIXES.some(prefix => firstPathComponent.includes(prefix));\n\n    if (hasExistingTransformations) {\n        this.log(`Removing existing transformations from URL: ${processedUrl}`);\n        pathComponents.shift();\n    }\n\n    const cleanPath = pathComponents.join('/');\n    const finalUrl = `${baseUrl}${uploadMarker}${transformations}/${cleanPath}`;\n    \n    this.log(`Transformed ${mediaType} URL from \"${url}\" to \"${finalUrl}\"`);\n    return finalUrl;\n  }\n}\n\n/**\n * Auto-initialize runtime when DOM is ready\n */\nfunction autoInit(): void {\n  const configElement = document.getElementById('contra-config');\n  if (!configElement) {\n    console.warn('[ContraWebflow] No config element found. Runtime not initialized.');\n    return;\n  }\n\n  try {\n    const config = JSON.parse(configElement.textContent || '{}');\n    \n    // Validate required config\n    if (!config.apiKey) {\n      console.error('[ContraWebflow] API key is required in config.');\n      return;\n    }\n    \n    const initializeRuntime = () => {\n    const runtime = new ContraWebflowRuntime(config);\n    \n    // Expose runtime globally for debugging\n    (window as any).contraRuntime = runtime;\n    \n    runtime.init().catch(error => {\n      console.error('[ContraWebflow] Runtime initialization failed:', error);\n    });\n    };\n    \n    // Use setTimeout to ensure DOM is fully ready\n    setTimeout(initializeRuntime, 100);\n    \n  } catch (error) {\n    console.error('[ContraWebflow] Failed to parse config:', error);\n  }\n}\n\n// Auto-initialize when DOM is ready with multiple fallbacks\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', autoInit);\n} else if (document.readyState === 'interactive') {\n  // DOM is ready but resources might still be loading\n  setTimeout(autoInit, 50);\n} else {\n  // DOM and resources are ready\n  autoInit();\n}\n\n// Export runtime class for manual initialization\nexport { ContraWebflowRuntime as default }; "]}
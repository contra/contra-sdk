{"version":3,"sources":["../src/runtime.ts"],"names":["ATTR_PREFIX","ATTRS","RuntimeState","listId","updates","state","ContraWebflowRuntime","config","ContraClient","listElements","programFilters","listElement","programId","error","template","initialFilters","limit","button","action","targetListId","e","append","filters","response","newExperts","allExperts","experts","card","fragment","expert","expertCard","element","fieldName","format","value","displayValue","utils","rating","fullStars","hasHalfStar","emptyStars","starsHtml","i","textElement","url","mediaType","parent","mediaElement","urlLower","isVideo","ext","isCloudinaryVideo","originalElement","video","posterUrl","fallbackImg","img","placeholder","videoUrl","from","to","attr","existingStyle","container","repeatType","maxItems","tag","items","item","itemElement","showWhen","hideWhen","shouldShow","condition","parts","field","restOfCondition","expertValue","result","numValue","expertStr","valueStr","emptyElement","loadMoreButton","btn","hasMore","control","filterKey","newFilters","processedValue","v","apiKey","filterControls","debounceTime","handler","debouncedHandler","eventType","func","delay","timeoutId","args","name","selector","option","show","loadingElement","errorElement","target","eventName","detail","event","message","data","labels","targetList","filterDef","optionElement","label","labelMatch","autoInit","configElement","runtime"],"mappings":"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","file":"index.js","sourcesContent":["import { ContraClient, utils } from '@contra/client';\nimport type {\n  ExpertProfile,\n  ExpertFilters,\n  FilterChangeEvent,\n  ExpertLoadEvent,\n  ErrorEvent,\n  ExpertField\n} from '@contra/types';\n\n/**\n * Webflow Runtime for Contra Experts\n * Simplified for flexibility and predictability.\n */\n\n// Simplified configuration\ninterface RuntimeConfig {\n  apiKey: string;\n  debug?: boolean;\n  loadingClass?: string;\n  errorClass?: string;\n  emptyClass?: string;\n  // Video configuration\n  videoAutoplay?: boolean;\n  videoHoverPlay?: boolean;\n  videoMuted?: boolean;\n  videoLoop?: boolean;\n  videoControls?: boolean;\n}\n\n// Attribute constants\nconst ATTR_PREFIX = 'data-contra-';\nconst ATTRS = {\n  // Core list attributes\n  listId: 'list-id',\n  program: 'program',\n  template: 'template',\n  \n  // States\n  loading: 'loading',\n  error: 'error',\n  empty: 'empty',\n  \n  // Field binding\n  field: 'field',\n  format: 'format',\n  \n  // Repeating elements\n  repeat: 'repeat',\n  max: 'max',\n  \n  // Sorting and pagination\n  limit: 'limit',\n  \n  // Actions\n  action: 'action',\n  listTarget: 'list-target',\n\n  // Conditional display\n  showWhen: 'show-when',\n  hideWhen: 'hide-when'\n} as const;\n\n// State management is now keyed by the list's unique ID\nclass RuntimeState {\n  private states = new Map<string, {\n    filters: ExpertFilters;\n    experts: ExpertProfile[];\n    loading: boolean;\n    error: Error | null;\n    offset: number;\n    limit: number;\n    totalCount: number;\n    hasNextPage: boolean;\n  }>();\n\n  getState(listId: string) {\n    if (!this.states.has(listId)) {\n      this.states.set(listId, {\n        filters: {},\n        experts: [],\n        loading: false,\n        error: null,\n        offset: 0,\n        limit: 20, // Default limit\n        totalCount: 0,\n        hasNextPage: false\n      });\n    }\n    return this.states.get(listId)!;\n  }\n\n  updateState(listId: string, updates: Partial<ReturnType<RuntimeState['getState']>>) {\n    const state = this.getState(listId);\n    Object.assign(state, updates);\n    this.states.set(listId, state);\n  }\n}\n\n/**\n * Main Runtime Class\n */\nexport class ContraWebflowRuntime {\n  private client: ContraClient;\n  private config: Required<RuntimeConfig>;\n  private state = new RuntimeState();\n  private debouncedReload: Map<string, () => void> = new Map();\n  private filterNameMap: Record<string, string> = {\n    locations: 'location',\n  };\n  private filterOptionLabels: Record<string, Record<string, string>> = {\n    sortBy: {\n      relevance: 'Relevance',\n      oldest: 'Oldest',\n      newest: 'Newest',\n      rate_asc: 'Rate (Low to High)',\n      rate_desc: 'Rate (High to Low)'\n    }\n  };\n\n  constructor(config: RuntimeConfig) {\n    this.config = {\n      debug: false,\n      loadingClass: 'loading',\n      errorClass: 'error',\n      emptyClass: 'empty',\n      // Video configuration defaults\n      videoAutoplay: false,\n      videoHoverPlay: true,\n      videoMuted: true,\n      videoLoop: true,\n      videoControls: false,\n      ...config\n    };\n\n    this.client = new ContraClient({\n      apiKey: this.config.apiKey,\n      debug: this.config.debug\n    });\n\n    this.log('Runtime initialized', this.config);\n  }\n\n  /**\n   * Initialize the runtime by finding and setting up all lists.\n   */\n  async init(): Promise<void> {\n    this.log('Initializing runtime...');\n\n    try {\n      // 1. Discover all lists and unique programs to fetch filters for\n      const listElements = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.listId}]`);\n      this.log(`Found ${listElements.length} lists to initialize.`);\n      \n      const programFilters = new Map<string, any[]>();\n      for (const listElement of listElements) {\n        const programId = this.getAttr(listElement, ATTRS.program);\n        if (programId && !programFilters.has(programId)) {\n          this.log(`Fetching filters for program: ${programId}`);\n          programFilters.set(programId, await this.getAvailableFilters(programId));\n        }\n      }\n\n      // 2. Populate all filter controls on the page once\n      this.populateAllFilterControls(programFilters);\n\n      // 3. Initialize each list\n      for (const listElement of listElements) {\n        await this.initList(listElement);\n      }\n\n      // 4. Wire up all action buttons and filter controls\n      this.wireActionButtons();\n      this.wireFilterControls();\n\n      this.log('Runtime initialization complete');\n    } catch (error) {\n      this.log('Runtime initialization failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize a single expert list.\n   */\n  private async initList(listElement: Element): Promise<void> {\n    const listId = this.getAttr(listElement, ATTRS.listId);\n    const programId = this.getAttr(listElement, ATTRS.program);\n\n    if (!listId || !programId) {\n      this.log('List element is missing required attributes `data-contra-list-id` or `data-contra-program`.', listElement);\n      return;\n    }\n\n    this.log(`Initializing list: ${listId} for program: ${programId}`);\n\n    try {\n      // Mark as initialized\n      (listElement as HTMLElement).setAttribute('data-contra-initialized', 'true');\n      \n      // Find and hide the template immediately to prevent flash of un-rendered content.\n      const template = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.template}]`);\n      if (template) {\n          (template as HTMLElement).style.display = 'none';\n          this.log(`Template found and hidden for list: ${listId}`);\n      }\n\n      // Parse initial filters from the list element itself\n      const initialFilters = this.parseFiltersFromElement(listElement);\n      const limit = parseInt(this.getAttr(listElement, ATTRS.limit) || '20', 10);\n      \n      // Update state with these initial settings\n      this.state.updateState(listId, { \n      filters: initialFilters,\n        limit: limit,\n        offset: initialFilters.offset || 0,\n      });\n      \n      this.log(`List setup complete for: ${listId}`, { initialFilters, limit });\n      \n      // Load initial data for the list\n      await this.loadExperts(listId, programId);\n\n    } catch (error) {\n      this.log(`Failed to initialize list ${listId}`, error);\n      this.showError(listElement, error as Error);\n    }\n  }\n\n  /**\n   * Wire up all action buttons on the page.\n   */\n  private wireActionButtons(): void {\n    const actionButtons = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.action}]`);\n    \n    actionButtons.forEach(button => {\n      const action = this.getAttr(button, ATTRS.action);\n      const targetListId = this.getAttr(button, ATTRS.listTarget);\n      \n      if (!action || !targetListId) {\n        this.log('Action button is missing required `data-contra-action` or `data-contra-list-target` attributes.', button);\n        return;\n      }\n\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.handleAction(action, targetListId, button);\n      });\n    });\n  }\n\n  /**\n   * Load experts for a given list.\n   */\n  private async loadExperts(listId: string, programId: string, append = false): Promise<void> {\n    const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${listId}\"]`);\n    if (!listElement) {\n      this.log(`Cannot find list element with ID: ${listId}`);\n      return;\n    }\n\n    const state = this.state.getState(listId);\n    const filters = {\n      ...state.filters,\n      limit: state.limit,\n      offset: state.offset,\n    };\n    \n    this.log(`Loading experts for list: ${listId}`, filters);\n\n    try {\n      this.showLoading(listElement, true);\n      this.state.updateState(listId, { loading: true, error: null });\n\n      const response = await this.client.listExperts(programId, filters);\n      \n      this.log(`Loaded ${response.data.length} experts for list ${listId}`, response);\n\n      const newExperts = response.data;\n      const allExperts = append ? [...state.experts, ...newExperts] : newExperts;\n\n      // Update state\n      this.state.updateState(listId, {\n        experts: allExperts,\n        totalCount: response.totalCount,\n        offset: state.offset + newExperts.length,\n        hasNextPage: newExperts.length === state.limit,\n        loading: false\n      });\n\n      // Render experts\n      this.renderExperts(listElement, newExperts, append);\n      \n      // Update UI states\n      this.updateUIStates(listElement, listId);\n\n    } catch (error) {\n      this.log(`Failed to load experts for list: ${listId}`, error);\n      \n      this.state.updateState(listId, { \n        loading: false, \n        error: error as Error \n      });\n      \n      this.showError(listElement, error as Error);\n      \n    } finally {\n      this.showLoading(listElement, false);\n    }\n  }\n\n  /**\n   * Render experts into the container. Can clear or append.\n   */\n  private renderExperts(listElement: Element, experts: ExpertProfile[], append: boolean): void {\n    const template = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    if (!template) {\n      this.log('No template found in list', listElement);\n      return;\n    }\n\n    if (!append) {\n      // Clear only previously rendered expert cards\n      const existingCards = this.querySelectorAll(listElement, '.contra-rendered-item');\n      existingCards.forEach(card => card.remove());\n    }\n\n    const fragment = document.createDocumentFragment();\n    experts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert);\n      fragment.appendChild(expertCard);\n    });\n    listElement.appendChild(fragment);\n\n    this.log(`Rendered ${experts.length} expert cards into list`, listElement);\n  }\n\n  /**\n   * Populate expert card from template\n   */\n  private populateExpertCard(template: Element, expert: ExpertProfile): Element {\n    const card = template.cloneNode(true) as Element;\n    \n    // Add a marker class to identify this as a rendered card\n    card.classList.add('contra-rendered-item');\n    \n    // Remove template attribute and show the card\n    card.removeAttribute(`${ATTR_PREFIX}${ATTRS.template}`);\n    (card as HTMLElement).style.display = '';\n\n    // Populate field bindings\n    this.populateFields(card, expert);\n    \n    // Handle repeating elements (projects, social links)\n    this.populateRepeatingElements(card, expert);\n    \n    // Handle conditional display\n    this.handleConditionalDisplay(card, expert);\n\n    return card;\n  }\n\n  /**\n   * Populate data fields in the card\n   */\n  private populateFields(card: Element, expert: ExpertProfile): void {\n    const fieldElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.field}]`);\n    \n    fieldElements.forEach(element => {\n      const fieldName = this.getAttr(element, ATTRS.field) as ExpertField;\n      const format = this.getAttr(element, ATTRS.format);\n      \n      if (!fieldName || !(fieldName in expert)) return;\n\n      const value = expert[fieldName];\n      this.setElementValue(element, value, format);\n    });\n\n    // Handle star ratings\n    const starsElements = this.querySelectorAll(card, '[data-contra-stars]');\n    starsElements.forEach(element => {\n      if (expert.averageReviewScore) {\n        this.renderStarRating(element, expert.averageReviewScore);\n      }\n    });\n  }\n\n  /**\n   * Set element value with proper formatting\n   */\n  private setElementValue(element: Element, value: any, format?: string | null): void {\n    if (value == null || value === '') return;\n\n    // Media type detection and handling\n    if (this.isMediaField(element) && typeof value === 'string' && value.trim()) {\n      this.setMediaValue(element, value);\n      return;\n    }\n\n    if (element instanceof HTMLAnchorElement) {\n      element.href = String(value);\n      if (element.children.length === 0 && !element.textContent?.trim()) {\n        element.textContent = String(value);\n      }\n    } else if (element instanceof HTMLInputElement) {\n      element.value = String(value);\n    } else if (element instanceof HTMLImageElement) {\n      // Regular image handling for avatars and other images\n      element.src = String(value);\n      element.alt = element.alt || 'Image';\n    } else {\n      // Text content with formatting\n      let displayValue = String(value);\n      \n      if (format) {\n        switch (format) {\n          case 'currency':\n            displayValue = typeof value === 'number' ? `$${value}` : displayValue;\n            break;\n          case 'rate':\n            displayValue = utils.formatRate(typeof value === 'number' ? value : null);\n            break;\n          case 'rating':\n            // Format rating to one decimal place (5.0, 4.9, etc.)\n            displayValue = typeof value === 'number' ? value.toFixed(1) : displayValue;\n            break;\n          case 'earnings':\n            // Format earnings like $25k+\n            if (typeof value === 'number') {\n              if (value >= 1000000) {\n                displayValue = `$${Math.floor(value / 1000000)}M+`;\n              } else if (value >= 1000) {\n                displayValue = `$${Math.floor(value / 1000)}k+`;\n              } else {\n                displayValue = `$${value}`;\n              }\n            }\n            break;\n          case 'number':\n            displayValue = typeof value === 'number' ? value.toLocaleString() : displayValue;\n            break;\n          case 'truncate':\n            displayValue = displayValue.length > 100 ? displayValue.substring(0, 97) + '...' : displayValue;\n            break;\n          case 'boolean':\n            displayValue = value ? 'Yes' : 'No';\n            break;\n          case 'availability':\n            displayValue = value ? 'Available' : 'Not Available';\n            break;\n        }\n      }\n      \n      element.textContent = displayValue;\n    }\n  }\n\n  /**\n   * Star rating rendering with optional text display\n   */\n  private renderStarRating(element: Element, rating: number): void {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    let starsHtml = '';\n    \n    // Full stars\n    for (let i = 0; i < fullStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-full\">★</span>';\n    }\n    \n    // Half star\n    if (hasHalfStar) {\n      starsHtml += '<span class=\"contra-star contra-star-half\">★</span>';\n    }\n    \n    // Empty stars\n    for (let i = 0; i < emptyStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-empty\">☆</span>';\n    }\n    \n    element.innerHTML = starsHtml;\n    \n    // Also update any rating text elements in the same card\n    const card = element.closest('[data-contra-template]') || element.closest('.expert-card');\n    if (card) {\n      const ratingTextElements = this.querySelectorAll(card, '[data-contra-rating-text]');\n      ratingTextElements.forEach(textElement => {\n        textElement.textContent = rating.toFixed(1);\n      });\n    }\n  }\n\n  /**\n   * Media type detection and element handling\n   */\n  private isMediaField(element: Element): boolean {\n    const field = this.getAttr(element, ATTRS.field);\n    // Only apply advanced media handling to project cover URLs, not avatars\n    return field === 'coverUrl';\n  }\n\n  /**\n   * Media value setting with automatic type detection\n   */\n  private setMediaValue(element: Element, url: string): void {\n    const mediaType = this.detectMediaType(url);\n    const parent = element.parentElement;\n    \n    if (!parent) {\n      this.log('Media element has no parent for replacement', element);\n      return;\n    }\n\n    // Remove existing media element\n    element.remove();\n\n    // Create appropriate media element\n    let mediaElement: HTMLElement;\n    \n    switch (mediaType) {\n      case 'video':\n        mediaElement = this.createVideoElement(url, element);\n        break;\n      case 'image':\n      default:\n        mediaElement = this.createImageElement(url, element);\n        break;\n    }\n\n    // Preserve classes and attributes from original element\n    this.transferAttributes(element, mediaElement);\n    \n    // Insert new media element\n    parent.appendChild(mediaElement);\n    \n    this.log(`Created ${mediaType} element for URL: ${url}`);\n  }\n\n  /**\n   * Detect media type from URL\n   */\n  private detectMediaType(url: string): 'image' | 'video' {\n    if (!url || typeof url !== 'string') {\n      this.log('Invalid URL provided to detectMediaType:', url);\n      return 'image';\n    }\n    \n    const urlLower = url.toLowerCase();\n    \n    // Video formats\n    const videoExtensions = ['.mp4', '.webm', '.mov', '.avi', '.mkv', '.ogg'];\n    const isVideo = videoExtensions.some(ext => urlLower.includes(ext));\n    \n    // Special handling for Cloudinary video URLs\n    const isCloudinaryVideo = urlLower.includes('cloudinary.com/') && urlLower.includes('/video/');\n    \n    return (isVideo || isCloudinaryVideo) ? 'video' : 'image';\n  }\n\n  /**\n   * Create video element with fallback\n   */\n  private createVideoElement(url: string, originalElement: Element): HTMLVideoElement {\n    const video = document.createElement('video');\n    \n    // Video attributes\n    video.src = url;\n    video.muted = this.config.videoMuted;\n    video.loop = this.config.videoLoop;\n    video.playsInline = true;\n    video.preload = 'metadata';\n    video.controls = this.config.videoControls;\n    \n    // Maintain aspect ratio and object-fit from original\n    video.style.width = '100%';\n    video.style.height = '100%';\n    video.style.objectFit = 'cover';\n    video.style.borderRadius = 'inherit';\n    \n    // Autoplay configuration\n    if (this.config.videoAutoplay) {\n      video.autoplay = true;\n      video.setAttribute('autoplay', '');\n    }\n    \n    // Error handling with fallback to poster or placeholder\n    video.onerror = () => {\n      this.log(`Video failed to load: ${url}`);\n      // Try to extract a thumbnail from Cloudinary video URL\n      const posterUrl = this.extractVideoThumbnail(url);\n      if (posterUrl) {\n        const fallbackImg = this.createImageElement(posterUrl, originalElement);\n        video.parentElement?.replaceChild(fallbackImg, video);\n      } else {\n        // Show placeholder\n        video.style.background = '#f3f4f6';\n        video.style.position = 'relative';\n        video.innerHTML = '<div style=\"position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);color:#9ca3af;font-size:12px;\">Video unavailable</div>';\n      }\n    };\n\n    // Hover-to-play functionality (if enabled and not autoplay)\n    if (this.config.videoHoverPlay && !this.config.videoAutoplay) {\n      video.addEventListener('mouseenter', () => {\n        video.currentTime = 0;\n        video.play().catch(() => {\n          // Ignore play errors (browser policies)\n        });\n      });\n\n      video.addEventListener('mouseleave', () => {\n        video.pause();\n        video.currentTime = 0;\n      });\n    }\n\n    return video;\n  }\n\n  /**\n   * Create image element with error handling\n   */\n  private createImageElement(url: string, originalElement: Element): HTMLImageElement {\n    const img = document.createElement('img');\n    \n    img.src = url;\n    img.alt = originalElement.getAttribute('alt') || 'Media content';\n    img.loading = 'lazy';\n    \n    // Maintain styling\n    img.style.width = '100%';\n    img.style.height = '100%';\n    img.style.objectFit = 'cover';\n    img.style.borderRadius = 'inherit';\n    \n    // Error handling\n    img.onerror = () => {\n      this.log(`Image failed to load: ${url}`);\n      img.style.background = '#f3f4f6';\n      img.style.opacity = '0.5';\n      img.alt = 'Image unavailable';\n      \n      // Add broken image icon\n      img.style.position = 'relative';\n      const placeholder = document.createElement('div');\n      placeholder.style.cssText = `\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        color: #9ca3af;\n        font-size: 12px;\n        text-align: center;\n      `;\n      placeholder.textContent = '🖼️ Image unavailable';\n      img.parentElement?.appendChild(placeholder);\n    };\n\n    return img;\n  }\n\n  /**\n   * Extract video thumbnail from Cloudinary URL\n   */\n  private extractVideoThumbnail(videoUrl: string): string | null {\n    if (videoUrl.includes('cloudinary.com/') && videoUrl.includes('/video/')) {\n      // Convert video URL to image thumbnail\n      return videoUrl\n        .replace('/video/', '/image/')\n        .replace(/\\.(mp4|webm|mov|avi|mkv)$/i, '.jpg')\n        .replace('fl_progressive', 'f_auto,q_auto,c_fill');\n    }\n    return null;\n  }\n\n  /**\n   * Transfer attributes and classes from old element to new\n   */\n  private transferAttributes(from: Element, to: HTMLElement): void {\n    // Transfer classes\n    if (from.className) {\n      to.className = from.className;\n    }\n    \n    // Transfer data attributes (except contra-field)\n    Array.from(from.attributes).forEach(attr => {\n      if (attr.name.startsWith('data-') && attr.name !== `${ATTR_PREFIX}${ATTRS.field}`) {\n        to.setAttribute(attr.name, attr.value);\n      }\n    });\n    \n    // Transfer style\n    if (from.getAttribute('style')) {\n      const existingStyle = to.getAttribute('style') || '';\n      to.setAttribute('style', existingStyle + '; ' + from.getAttribute('style'));\n    }\n  }\n\n  /**\n   * Handle repeating elements (projects, social links)\n   */\n  private populateRepeatingElements(card: Element, expert: ExpertProfile): void {\n    const repeatElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.repeat}]`);\n    \n    repeatElements.forEach(container => {\n      const repeatType = this.getAttr(container, ATTRS.repeat);\n      const maxItems = parseInt(this.getAttr(container, ATTRS.max) || '10');\n      \n      if (repeatType === 'projects' && expert.projects) {\n        this.populateRepeatingContainer(container, expert.projects.slice(0, maxItems));\n      } else if (repeatType === 'socialLinks' && expert.socialLinks) {\n        this.populateRepeatingContainer(container, expert.socialLinks.slice(0, maxItems));\n      } else if (repeatType === 'skillTags' && expert.skillTags) {\n        this.populateRepeatingContainer(container, expert.skillTags.slice(0, maxItems).map((tag: string) => ({ name: tag })));\n      }\n    });\n  }\n\n  /**\n   * Populate a repeating container with items\n   */\n  private populateRepeatingContainer(container: Element, items: any[]): void {\n    const template = container.firstElementChild;\n    if (!template) return;\n\n    // Clear existing items\n    container.innerHTML = '';\n    \n    // Create items from template\n    items.forEach(item => {\n      const itemElement = template.cloneNode(true) as Element;\n      this.populateFields(itemElement, item);\n      container.appendChild(itemElement);\n    });\n    \n    // Hide container if no items\n    if (items.length === 0) {\n      (container as HTMLElement).style.display = 'none';\n    }\n  }\n\n  /**\n   * Handle conditional display based on data\n   */\n  private handleConditionalDisplay(card: Element, expert: ExpertProfile): void {\n    const conditionalElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.showWhen}], [${ATTR_PREFIX}${ATTRS.hideWhen}]`);\n    \n    conditionalElements.forEach(element => {\n      const showWhen = this.getAttr(element, ATTRS.showWhen);\n      const hideWhen = this.getAttr(element, ATTRS.hideWhen);\n      \n      let shouldShow = true;\n      \n      if (showWhen) {\n        shouldShow = this.evaluateCondition(expert, showWhen);\n      }\n      \n      if (hideWhen) {\n        shouldShow = shouldShow && !this.evaluateCondition(expert, hideWhen);\n      }\n      \n      (element as HTMLElement).style.display = shouldShow ? '' : 'none';\n    });\n  }\n\n  /**\n   * Evaluate a condition against expert data\n   */\n  private evaluateCondition(expert: ExpertProfile, condition: string): boolean {\n    if (!condition || typeof condition !== 'string') {\n      this.log('Invalid condition provided:', condition);\n      return false;\n    }\n    \n    // Parse condition: \"field:value\" or \"field:>value\" etc.\n    const parts = condition.split(':');\n    if (parts.length < 2) {\n      this.log('Invalid condition format:', condition);\n      return false;\n    }\n    \n    const field = parts[0];\n    const restOfCondition = parts.slice(1).join(':'); // Handle colons in values\n    const expertValue = (expert as any)[field];\n    \n    this.log(`Evaluating condition: ${field} (${expertValue}, type: ${typeof expertValue}) against ${restOfCondition}`);\n    \n    if (expertValue == null) {\n      this.log(`Field '${field}' is null/undefined, condition fails`);\n      return false;\n    }\n    \n    // Check for comparison operators\n    if (restOfCondition.startsWith('>=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) >= Number(value);\n      this.log(`Comparison: ${expertValue} >= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) <= Number(value);\n      this.log(`Comparison: ${expertValue} <= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('>')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) > Number(value);\n      this.log(`Comparison: ${expertValue} > ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) < Number(value);\n      this.log(`Comparison: ${expertValue} < ${value} = ${result}`);\n      return result;\n    } else {\n      // Direct value comparison with type-aware handling\n      let result = false;\n      \n      // Handle boolean fields specially\n      if (typeof expertValue === 'boolean') {\n        // Convert string condition to boolean for comparison\n        if (restOfCondition.toLowerCase() === 'true') {\n          result = expertValue === true;\n        } else if (restOfCondition.toLowerCase() === 'false') {\n          result = expertValue === false;\n        } else {\n          result = false;\n        }\n        this.log(`Boolean comparison: ${expertValue} === ${restOfCondition.toLowerCase() === 'true'} = ${result}`);\n      } else if (typeof expertValue === 'number') {\n        // Handle numeric comparisons\n        const numValue = Number(restOfCondition);\n        result = !isNaN(numValue) && expertValue === numValue;\n        this.log(`Number comparison: ${expertValue} === ${numValue} = ${result}`);\n      } else {\n        // String comparison (case-insensitive)\n        const expertStr = String(expertValue);\n        const valueStr = String(restOfCondition);\n        result = expertStr.toLowerCase() === valueStr.toLowerCase();\n        this.log(`String comparison: '${expertStr}' === '${valueStr}' = ${result}`);\n      }\n      \n      return result;\n    }\n  }\n\n  /**\n   * Update UI states based on current data for a specific list.\n   */\n  private updateUIStates(listElement: Element, listId: string): void {\n    const state = this.state.getState(listId);\n    \n    // Show/hide empty state\n    const emptyElement = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (emptyElement) {\n      (emptyElement as HTMLElement).style.display = state.experts.length === 0 && !state.loading ? '' : 'none';\n    }\n    \n    // Update and control visibility of the load more button\n    const loadMoreButton = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.action}=\"load-more\"][${ATTR_PREFIX}${ATTRS.listTarget}=\"${listId}\"]`);\n    if (loadMoreButton) {\n      const btn = loadMoreButton as HTMLButtonElement;\n      const hasMore = state.hasNextPage;\n\n      btn.style.display = hasMore ? '' : 'none';\n      btn.disabled = state.loading;\n      btn.textContent = state.loading ? 'Loading...' : 'Load More';\n    }\n  }\n\n  /**\n   * Handle action buttons (just load-more for now).\n   */\n  private handleAction(action: string, targetListId: string, button: Element): void {\n    if (action === 'load-more') {\n      const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${targetListId}\"]`);\n      const programId = this.getAttr(listElement!, ATTRS.program);\n      if (listElement && programId) {\n        this.loadExperts(targetListId, programId, true); // `true` to append\n      } else {\n        this.log(`Could not find list or program for target: ${targetListId}`);\n      }\n    } else if (action === 'clear-filters') {\n      this.clearFilters(targetListId);\n    }\n  }\n\n  private clearFilters(targetListId: string): void {\n    const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${targetListId}\"]`);\n    if (!listElement) {\n        this.log(`Cannot find list element with ID: ${targetListId} to clear filters.`);\n        return;\n    }\n    const programId = this.getAttr(listElement, ATTRS.program);\n    if (!programId) {\n        this.log(`Cannot find programId for list: ${targetListId}`);\n        return;\n    }\n\n    this.log(`Clearing filters for list: ${targetListId}`);\n\n    // 1. Reset state\n    this.state.updateState(targetListId, { filters: {}, offset: 0 });\n\n    // 2. Reset controls visually\n    const filterControls = this.querySelectorAll(document.body, `[data-contra-filter][data-contra-list-target=\"${targetListId}\"]`);\n    filterControls.forEach(control => {\n        this.resetControlValue(control as HTMLInputElement | HTMLSelectElement);\n    });\n\n    // 3. Reload data\n    this.loadExperts(targetListId, programId, false); // false to replace, not append\n  }\n\n  private resetControlValue(control: HTMLInputElement | HTMLSelectElement): void {\n    if (control instanceof HTMLInputElement) {\n        switch (control.type) {\n            case 'checkbox':\n            case 'radio':\n                control.checked = false;\n                break;\n            case 'number':\n            case 'range':\n                control.value = '';\n                break;\n            default: // text, search, etc.\n                control.value = '';\n                break;\n        }\n    } else if (control instanceof HTMLSelectElement) {\n        control.selectedIndex = 0; // Reset to the first option\n    }\n  }\n\n  private updateFilterAndReload(listId: string, programId: string, filterKey: string, value: any): void {\n    const state = this.state.getState(listId);\n    const newFilters = { ...state.filters };\n\n    // Process and set value\n    let processedValue = value;\n    if (filterKey === 'available') {\n      // If checkbox is checked, value is true. If unchecked, it's false.\n      // We only want to apply the filter when it's true.\n      processedValue = value ? true : undefined;\n    } else if (['minRate', 'maxRate'].includes(filterKey)) {\n      processedValue = (value === '' || value === null) ? undefined : Number(value);\n    } else if (filterKey === 'languages' && typeof value === 'string') {\n        processedValue = value.split(',').map(v => v.trim()).filter(v => v);\n        if (processedValue.length === 0) {\n            processedValue = undefined;\n        }\n    }\n\n    if (processedValue !== undefined && processedValue !== '') {\n        const apiKey = this.filterNameMap[filterKey] || filterKey;\n        (newFilters as any)[apiKey] = processedValue;\n    } else {\n        const apiKey = this.filterNameMap[filterKey] || filterKey;\n        delete (newFilters as any)[apiKey];\n    }\n    \n    // Reset offset and update state\n    this.state.updateState(listId, { filters: newFilters, offset: 0 });\n\n    this.log(`Filter updated for list ${listId}, reloading. New filters:`, newFilters);\n    \n    // Reload the list\n    this.loadExperts(listId, programId, false);\n  }\n\n  private wireFilterControls(): void {\n    const filterControls = this.querySelectorAll(document.body, `[data-contra-filter]`);\n    this.log(`Found ${filterControls.length} filter controls to wire.`);\n\n    filterControls.forEach(control => {\n        const filterKey = control.getAttribute('data-contra-filter');\n        const targetListId = control.getAttribute('data-contra-list-target');\n\n        if (!filterKey || !targetListId) {\n            this.log('Filter control missing required attributes: data-contra-filter or data-contra-list-target', control);\n            return;\n        }\n\n        const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}list-id=\"${targetListId}\"]`);\n        if (!listElement) return;\n        const programId = this.getAttr(listElement, ATTRS.program);\n        if (!programId) return;\n\n        const debounceTime = (control instanceof HTMLInputElement && ['text', 'search'].includes(control.type)) ? 300 : 0;\n        \n        const handler = () => {\n            const value = this.getControlValue(control as HTMLInputElement | HTMLSelectElement);\n            this.updateFilterAndReload(targetListId, programId, filterKey, value);\n        };\n        \n        const debouncedHandler = this.debounce(handler, debounceTime);\n        \n        const eventType = (control instanceof HTMLInputElement && ['text', 'search'].includes(control.type)) ? 'input' : 'change';\n        control.addEventListener(eventType, debouncedHandler);\n    });\n  }\n\n  private debounce(func: (...args: any[]) => void, delay: number): (...args: any[]) => void {\n    let timeoutId: number;\n    return (...args: any[]) => {\n        clearTimeout(timeoutId);\n        if (delay > 0) {\n            timeoutId = window.setTimeout(() => func.apply(this, args), delay);\n        } else {\n            func.apply(this, args);\n  }\n    };\n  }\n\n  /**\n   * Utility Methods\n   */\n  private getAttr(element: Element, name: string): string | null {\n    return element.getAttribute(`${ATTR_PREFIX}${name}`);\n  }\n\n  private querySelector(element: Element, selector: string): Element | null {\n    return element.querySelector(selector);\n  }\n\n  private querySelectorAll(element: Element, selector: string): Element[] {\n    return Array.from(element.querySelectorAll(selector));\n  }\n\n  private parseFiltersFromElement(element: Element): ExpertFilters {\n    const filters: ExpertFilters = {};\n    \n    // Parse filter attributes\n    const filterMap = {\n      'available': 'available',\n      'languages': 'languages', \n      'location': 'location',\n      'min-rate': 'minRate',\n      'max-rate': 'maxRate',\n      'sort': 'sortBy',\n      'limit': 'limit',\n      'offset': 'offset'\n    };\n\n    Object.entries(filterMap).forEach(([attr, filterKey]) => {\n      const value = this.getAttr(element, attr);\n      if (value != null) {\n        if (filterKey === 'available') {\n          (filters as any)[filterKey] = value === 'true';\n        } else if (filterKey === 'languages') {\n          (filters as any)[filterKey] = value.split(',').map(v => v.trim());\n        } else if (['minRate', 'maxRate', 'limit', 'offset'].includes(filterKey)) {\n          (filters as any)[filterKey] = parseInt(value);\n        } else {\n          (filters as any)[filterKey] = value;\n        }\n      }\n    });\n\n    // Ensure offset defaults to 0 if not specified\n    if (filters.offset === undefined) {\n      filters.offset = 0;\n    }\n\n    return filters;\n  }\n\n  private getControlValue(control: HTMLInputElement | HTMLSelectElement): any {\n    if (control instanceof HTMLInputElement) {\n      switch (control.type) {\n        case 'checkbox':\n          return control.checked;\n        case 'number':\n        case 'range':\n          return control.valueAsNumber;\n        default:\n          return control.value;\n      }\n    } else if (control instanceof HTMLSelectElement) {\n      if (control.multiple) {\n        return Array.from(control.selectedOptions).map(option => option.value);\n      }\n      return control.value;\n    }\n    return null;\n  }\n\n  private showLoading(container: Element, show: boolean): void {\n    const loadingElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n    if (loadingElement) {\n      (loadingElement as HTMLElement).style.display = show ? '' : 'none';\n    }\n    \n    (container as HTMLElement).classList.toggle(this.config.loadingClass, show);\n  }\n\n  private showError(container: Element, error: Error): void {\n    const errorElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.error}]`);\n    if (errorElement) {\n      errorElement.textContent = error.message;\n      (errorElement as HTMLElement).style.display = '';\n    }\n    \n    (container as HTMLElement).classList.add(this.config.errorClass);\n    this.log('Error displayed', error);\n  }\n\n  private dispatchEvent(target: Element | Document, eventName: string, detail: any): void {\n    const event = new CustomEvent(`contra:${eventName}`, { detail });\n    target.dispatchEvent(event);\n  }\n\n  private log(message: string, ...args: any[]): void {\n    if (this.config.debug) {\n      console.log(`[ContraWebflow] ${message}`, ...args);\n    }\n  }\n\n  private async getAvailableFilters(programId: string): Promise<any[]> {\n    const url = `https://contra.com/public-api/programs/${programId}/filters`;\n    this.log(`Fetching available filters for program: ${programId}`);\n    try {\n        const response = await fetch(url, {\n            headers: {\n                'X-API-Key': this.config.apiKey,\n                'Accept': 'application/json'\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Failed to fetch filters: ${response.statusText}`);\n        }\n        const data = await response.json();\n        this.log('Successfully fetched filters', data.data);\n        return data.data || [];\n    } catch (error) {\n        this.log('Error fetching available filters', error);\n        return [];\n    }\n  }\n  \n  private getFilterOptionLabel(filterKey: string, value: string): string {\n    const labels = this.filterOptionLabels[filterKey];\n    if (labels && labels[value]) {\n      return labels[value];\n    }\n    // Capitalize the first letter and lowercase the rest as a fallback\n    return value.charAt(0).toUpperCase() + value.slice(1).toLowerCase();\n  }\n\n  private populateAllFilterControls(programFilters: Map<string, any[]>): void {\n    this.log('Populating all filter controls on the page...');\n    const allControls = this.querySelectorAll(document.body, `[data-contra-filter]`);\n\n    allControls.forEach(control => {\n      const targetListId = control.getAttribute('data-contra-list-target');\n      if (!targetListId) return;\n\n      const targetList = this.querySelector(document.body, `[data-contra-list-id=\"${targetListId}\"]`);\n      if (!targetList) return;\n\n      const programId = this.getAttr(targetList, ATTRS.program);\n      if (!programId) return;\n\n      const filters = programFilters.get(programId);\n      if (!filters) return;\n\n      const filterKey = control.getAttribute('data-contra-filter');\n      const filterDef = filters.find(f => f.name === filterKey);\n\n      if (!filterDef) return;\n\n      // Handle number input ranges\n      if (filterDef.type === 'number' && control instanceof HTMLInputElement) {\n        if (filterDef.minimum !== undefined) control.min = String(filterDef.minimum);\n        if (filterDef.maximum !== undefined) control.max = String(filterDef.maximum);\n      }\n\n      // Handle populating select dropdowns\n      if (filterDef.options && control instanceof HTMLSelectElement) {\n        this.log(`Populating options for filter '${filterKey}' on control`, control);\n        \n        const placeholder = control.firstElementChild?.cloneNode(true) as Element | null;\n        control.innerHTML = '';\n        if (placeholder && placeholder.getAttribute('value') === '') {\n          control.appendChild(placeholder);\n        }\n        \n        filterDef.options.forEach((option: any) => {\n          const optionElement = document.createElement('option');\n          const value = typeof option === 'object' && option.value !== undefined ? option.value : String(option);\n          \n          optionElement.value = value;\n\n          // Determine the user-friendly label\n          let label: string;\n          if (filterKey === 'locations') {\n            const labelMatch = value.match(/^(.*?)\\s*\\(/);\n            label = labelMatch ? labelMatch[1].trim() : value;\n          } else {\n            label = this.getFilterOptionLabel(filterKey!, value);\n          }\n          optionElement.textContent = label;\n          \n          if (filterKey === 'sortBy' && value === 'relevance') {\n            optionElement.selected = true;\n          }\n          control.appendChild(optionElement);\n        });\n      }\n    });\n  }\n}\n\n/**\n * Auto-initialize runtime when DOM is ready\n */\nfunction autoInit(): void {\n  const configElement = document.getElementById('contra-config');\n  if (!configElement) {\n    console.warn('[ContraWebflow] No config element found. Runtime not initialized.');\n    return;\n  }\n\n  try {\n    const config = JSON.parse(configElement.textContent || '{}');\n    \n    // Validate required config\n    if (!config.apiKey) {\n      console.error('[ContraWebflow] API key is required in config.');\n      return;\n    }\n    \n    const initializeRuntime = () => {\n    const runtime = new ContraWebflowRuntime(config);\n    \n    // Expose runtime globally for debugging\n    (window as any).contraRuntime = runtime;\n    \n    runtime.init().catch(error => {\n      console.error('[ContraWebflow] Runtime initialization failed:', error);\n    });\n    };\n    \n    // Use setTimeout to ensure DOM is fully ready\n    setTimeout(initializeRuntime, 100);\n    \n  } catch (error) {\n    console.error('[ContraWebflow] Failed to parse config:', error);\n  }\n}\n\n// Auto-initialize when DOM is ready with multiple fallbacks\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', autoInit);\n} else if (document.readyState === 'interactive') {\n  // DOM is ready but resources might still be loading\n  setTimeout(autoInit, 50);\n} else {\n  // DOM and resources are ready\n  autoInit();\n}\n\n// Export runtime class for manual initialization\nexport { ContraWebflowRuntime as default }; "]}
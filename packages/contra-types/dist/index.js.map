{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";;;AA8Oa,IAAA,eAAA,GAAkB,CAAC,GAAmC,KAAA;AACjE,EAAA,OAAO,OAAO,OAAO,GAAA,CAAI,OAAO,QAAY,IAAA,OAAO,IAAI,IAAS,KAAA,QAAA;AAClE;AAEa,IAAA,eAAA,GAAkB,CAAC,GAAmC,KAAA;AACjE,EAAA,OAAO,OAAO,OAAO,GAAA,CAAI,SAAS,QAAY,IAAA,OAAO,IAAI,OAAY,KAAA,QAAA;AACvE;AAGO,IAAM,aAAgB,GAAA;AAAA,EAC3B,IAAA;AAAA,EAAM,MAAA;AAAA,EAAQ,UAAA;AAAA,EAAY,WAAA;AAAA,EAAa,YAAA;AAAA,EAAc,YAAA;AAAA,EACrD,eAAA;AAAA,EAAiB,UAAA;AAAA,EAAY,WAAA;AAAA,EAAa,oBAAA;AAAA,EAC1C,cAAA;AAAA,EAAgB,wBAAA;AAAA,EAA0B,gBAAA;AAAA,EAC1C,aAAA;AAAA,EAAe,WAAA;AAAA,EAAa,aAAA;AAAA,EAAe;AAC7C;AAEO,IAAM,WAAc,GAAA;AAAA,EACzB,WAAA;AAAA,EAAa,WAAA;AAAA,EAAa,UAAA;AAAA,EAAY,SAAA;AAAA,EAAW,SAAA;AAAA,EACjD,QAAA;AAAA,EAAU,OAAA;AAAA,EAAS,QAAA;AAAA,EAAU;AAC/B;AAEO,IAAM,YAAe,GAAA;AAAA,EAC1B,WAAA;AAAA,EAAa,QAAA;AAAA,EAAU,QAAA;AAAA,EAAU,UAAA;AAAA,EAAY,WAAA;AAAA,EAAa;AAC5D","file":"index.js","sourcesContent":["/**\n * Contra API Types\n * Generated from OpenAPI 3.0.3 specification\n */\n\n// Core Expert Profile (exactly from OpenAPI spec)\nexport interface ExpertProfile {\n  /** Expert identifier */\n  id: string;\n  /** Full name */\n  name: string;\n  /** Short bio tagline */\n  oneLiner: string;\n  /** URL to avatar image */\n  avatarUrl: string;\n  /** Contra profile URL */\n  profileUrl: string;\n  /** Inquiry modal URL */\n  inquiryUrl: string;\n  /** Rate per hour in USD */\n  hourlyRateUSD: number | null;\n  /** Country or region */\n  location: string;\n  /** Availability status */\n  available: boolean;\n  /** Average review score */\n  averageReviewScore: number;\n  /** Total reviews */\n  reviewsCount: number;\n  /** Completed projects count */\n  projectsCompletedCount: number;\n  /** Followers count */\n  followersCount: number;\n  /** Total earnings on Contra (USD) */\n  earningsUSD: number;\n  /** Skills or technologies */\n  skillTags: string[];\n  /** Social platform links */\n  socialLinks: Array<{\n    /** Social platform */\n    label: string | null;\n    /** Social URL */\n    url: string;\n  }>;\n  /** Project samples */\n  projects: ProjectSample[];\n}\n\n// Project Sample\nexport interface ProjectSample {\n  /** Project title */\n  title: string;\n  /** Cover image URL */\n  coverUrl: string;\n  /** Project page URL */\n  projectUrl: string;\n}\n\n// Program Summary\nexport interface ProgramSummary {\n  /** Program identifier */\n  id: string;\n  /** Program title */\n  title: string;\n  /** Program subheader */\n  subheader: string;\n  /** Program logo URL */\n  logoUrl: string;\n  /** Number of experts in program */\n  expertsCount: number;\n  /** Total hires made */\n  totalHires: number;\n  /** Total value of hires (USD) */\n  totalHireValue: number;\n  /** Total reviews received */\n  totalReviews: number;\n  /** Apply to program URL */\n  applyUrl: string;\n  /** Hire from program URL */\n  hireUrl: string;\n}\n\n// API Response Wrapper\nexport interface ApiResponse<T> {\n  data: T;\n}\n\n// List Response with Pagination\nexport interface ListResponse<T> {\n  data: T[];\n  totalCount: number;\n  page?: number;\n  limit?: number;\n  hasMore?: boolean;\n}\n\n// Error Response\nexport interface ErrorResponse {\n  /** Error code */\n  code: string;\n  /** Error message */\n  message: string;\n}\n\n// Filter Types for Expert Search\nexport interface ExpertFilters {\n  /** Filter by availability */\n  available?: boolean;\n  /** Filter by languages/skills (comma-separated or array) */\n  languages?: string | string[];\n  /** Filter by location */\n  location?: string;\n  /** Minimum hourly rate */\n  minRate?: number;\n  /** Maximum hourly rate */\n  maxRate?: number;\n  /** Sort order */\n  sortBy?: 'relevance' | 'newest' | 'oldest' | 'rate_asc' | 'rate_desc' | 'rating_desc';\n  /** Number of results per page */\n  limit?: number;\n  /** Page offset */\n  offset?: number;\n  /** Search query */\n  q?: string;\n}\n\n// Client Configuration\nexport interface ClientConfig {\n  /** API key for authentication */\n  apiKey: string;\n  /** Base URL for API (defaults to https://api.contra.com) */\n  baseUrl?: string;\n  /** Request timeout in milliseconds */\n  timeout?: number;\n  /** Enable debug logging */\n  debug?: boolean;\n}\n\n// Event Types for Runtime\nexport interface FilterChangeEvent {\n  filters: ExpertFilters;\n  element: HTMLElement;\n}\n\nexport interface ExpertLoadEvent {\n  experts: ExpertProfile[];\n  totalCount: number;\n  filters: ExpertFilters;\n}\n\nexport interface ErrorEvent {\n  error: Error;\n  context: string;\n}\n\n// Webflow Attribute Configuration\nexport interface WebflowConfig {\n  /** Program ID to load experts from */\n  program: string;\n  /** Initial filters to apply */\n  filters?: ExpertFilters;\n  /** Auto-reload when filters change */\n  autoReload?: boolean;\n  /** Show loading states */\n  showLoading?: boolean;\n  /** Error handling mode */\n  errorMode?: 'console' | 'display' | 'throw';\n}\n\n// React Component Props\nexport interface ExpertListProps {\n  /** Program ID */\n  programId: string;\n  /** Initial filters */\n  filters?: ExpertFilters;\n  /** Custom expert card component */\n  expertComponent?: React.ComponentType<{ expert: ExpertProfile }>;\n  /** Loading component */\n  loadingComponent?: React.ComponentType;\n  /** Error component */\n  errorComponent?: React.ComponentType<{ error: Error }>;\n  /** Pagination settings */\n  pagination?: {\n    enabled: boolean;\n    pageSize: number;\n  };\n  /** Virtual scrolling for performance */\n  virtualScrolling?: boolean;\n  /** Event handlers */\n  onLoad?: (data: ExpertLoadEvent) => void;\n  onError?: (error: ErrorEvent) => void;\n  onFilterChange?: (event: FilterChangeEvent) => void;\n}\n\nexport interface ExpertCardProps {\n  /** Expert data */\n  expert: ExpertProfile;\n  /** Show projects */\n  showProjects?: boolean;\n  /** Maximum projects to show */\n  maxProjects?: number;\n  /** Show star rating */\n  showRating?: boolean;\n  /** Show social links */\n  showSocials?: boolean;\n  /** Custom CSS classes */\n  className?: string;\n  /** Click handler */\n  onClick?: (expert: ExpertProfile) => void;\n}\n\nexport interface FilterControlsProps {\n  /** Current filters */\n  filters: ExpertFilters;\n  /** Available filter options (from API) */\n  filterOptions?: {\n    languages: string[];\n    locations: string[];\n    rateRanges: Array<{ min: number; max: number; label: string }>;\n  };\n  /** Filter change handler */\n  onFilterChange: (filters: ExpertFilters) => void;\n  /** Show specific controls */\n  showControls?: {\n    availability?: boolean;\n    languages?: boolean;\n    location?: boolean;\n    rate?: boolean;\n    sort?: boolean;\n  };\n}\n\n// Utility Types\nexport type SortOption = ExpertFilters['sortBy'];\nexport type ExpertField = keyof ExpertProfile;\nexport type FilterKey = keyof ExpertFilters;\n\n// Type Guards\nexport const isExpertProfile = (obj: any): obj is ExpertProfile => {\n  return obj && typeof obj.id === 'string' && typeof obj.name === 'string';\n};\n\nexport const isErrorResponse = (obj: any): obj is ErrorResponse => {\n  return obj && typeof obj.code === 'string' && typeof obj.message === 'string';\n};\n\n// Constants\nexport const EXPERT_FIELDS = [\n  'id', 'name', 'oneLiner', 'avatarUrl', 'profileUrl', 'inquiryUrl',\n  'hourlyRateUSD', 'location', 'available', 'averageReviewScore',\n  'reviewsCount', 'projectsCompletedCount', 'followersCount', \n  'earningsUSD', 'skillTags', 'socialLinks', 'projects'\n] as const;\n\nexport const FILTER_KEYS = [\n  'available', 'languages', 'location', 'minRate', 'maxRate', \n  'sortBy', 'limit', 'offset', 'q'\n] as const;\n\nexport const SORT_OPTIONS = [\n  'relevance', 'newest', 'oldest', 'rate_asc', 'rate_desc', 'rating_desc'\n] as const; "]}
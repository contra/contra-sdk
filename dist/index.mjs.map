{"version":3,"sources":["../src/client.ts","../src/runtime.ts"],"sourcesContent":["import type {\n  ClientConfig,\n  ExpertProfile,\n  ExpertFilters,\n  ProgramSummary,\n  ListResponse,\n  ApiResponse,\n  ErrorResponse,\n  Filter,\n  FilterListResponse\n} from './types';\n\n/**\n * Professional Contra API Client\n * Features: Caching, retry logic, error handling, request deduplication\n */\nexport class ContraClient {\n  private config: Required<ClientConfig>;\n  private cache = new Map<string, { data: any; timestamp: number; ttl: number }>();\n  private pendingRequests = new Map<string, Promise<any>>();\n  \n  // Cache TTL settings (in milliseconds)\n  private static readonly CACHE_TTL = {\n    experts: 5 * 60 * 1000,      // 5 minutes for expert lists\n    expert: 10 * 60 * 1000,     // 10 minutes for individual experts\n    program: 30 * 60 * 1000,    // 30 minutes for program info\n    filters: 60 * 60 * 1000,    // 1 hour for available filters\n  };\n\n  constructor(config: ClientConfig) {\n    this.config = {\n      baseUrl: 'https://contra.com',\n      timeout: 10000,\n      debug: false,\n      ...config,\n    };\n\n    if (this.config.debug) {\n      console.log('[ContraClient] Initialized with config:', this.config);\n    }\n  }\n\n  /**\n   * Core fetch method with retry logic and error handling\n   */\n  private async fetch<T>(\n    endpoint: string,\n    options: RequestInit = {},\n    retries = 3\n  ): Promise<T> {\n    const url = `${this.config.baseUrl}${endpoint}`;\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), this.config.timeout);\n\n    const requestOptions: RequestInit = {\n      ...options,\n      signal: controller.signal,\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': this.config.apiKey,\n        'X-API-Key': this.config.apiKey,\n        ...options.headers,\n      },\n    };\n\n    try {\n      if (this.config.debug) {\n        console.log(`[ContraClient] Fetching: ${url}`, requestOptions);\n      }\n\n      const response = await fetch(url, requestOptions);\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        // Try to parse error response\n        let errorData: ErrorResponse;\n        try {\n          errorData = await response.json();\n        } catch {\n          errorData = {\n            code: `HTTP_${response.status}`,\n            message: response.statusText || 'Unknown error'\n          };\n        }\n\n        // Retry on 5xx errors or rate limits\n        if ((response.status >= 500 || response.status === 429) && retries > 0) {\n          const delay = Math.pow(2, 3 - retries) * 1000; // Exponential backoff\n          await new Promise(resolve => setTimeout(resolve, delay));\n          return this.fetch<T>(endpoint, options, retries - 1);\n        }\n\n        throw new ContraAPIError(errorData.message, errorData.code, response.status);\n      }\n\n      const data = await response.json();\n      \n      if (this.config.debug) {\n        console.log(`[ContraClient] Response:`, data);\n      }\n\n      return data;\n\n    } catch (error) {\n      clearTimeout(timeoutId);\n      \n      if (error instanceof ContraAPIError) {\n        throw error;\n      }\n\n      if (error instanceof Error && error.name === 'AbortError') {\n        throw new ContraAPIError(`Request timeout after ${this.config.timeout}ms`, 'TIMEOUT');\n      }\n\n      // Network or other errors - retry if we have retries left\n      if (retries > 0) {\n        const delay = Math.pow(2, 3 - retries) * 1000;\n        await new Promise(resolve => setTimeout(resolve, delay));\n        return this.fetch<T>(endpoint, options, retries - 1);\n      }\n\n      throw new ContraAPIError(\n        error instanceof Error ? error.message : 'Unknown error',\n        'NETWORK_ERROR'\n      );\n    }\n  }\n\n  /**\n   * Get from cache or fetch with request deduplication\n   */\n  private async fetchWithCache<T>(\n    cacheKey: string,\n    endpoint: string,\n    ttl: number,\n    options?: RequestInit\n  ): Promise<T> {\n    // Check cache first\n    const cached = this.cache.get(cacheKey);\n    if (cached && Date.now() - cached.timestamp < cached.ttl) {\n      if (this.config.debug) {\n        console.log(`[ContraClient] Cache hit: ${cacheKey}`);\n      }\n      return cached.data;\n    }\n\n    // Check for pending request (deduplication)\n    const pendingKey = `${endpoint}${JSON.stringify(options)}`;\n    if (this.pendingRequests.has(pendingKey)) {\n      if (this.config.debug) {\n        console.log(`[ContraClient] Request deduplication: ${pendingKey}`);\n      }\n      return this.pendingRequests.get(pendingKey)!;\n    }\n\n    // Make the request\n    const requestPromise = this.fetch<T>(endpoint, options);\n    this.pendingRequests.set(pendingKey, requestPromise);\n\n    try {\n      const data = await requestPromise;\n      \n      // Cache the result\n      this.cache.set(cacheKey, {\n        data,\n        timestamp: Date.now(),\n        ttl\n      });\n\n      return data;\n    } finally {\n      this.pendingRequests.delete(pendingKey);\n    }\n  }\n\n  /**\n   * Build query string from filters\n   */\n  private buildQueryString(filters: ExpertFilters): string {\n    const params = new URLSearchParams();\n    \n    Object.entries(filters).forEach(([key, value]) => {\n      if (value != null && value !== '') {\n        if (Array.isArray(value)) {\n          params.set(key, value.join(','));\n        } else {\n          params.set(key, String(value));\n        }\n      }\n    });\n\n    const queryString = params.toString();\n    return queryString ? `?${queryString}` : '';\n  }\n\n  /**\n   * Get program information\n   */\n  async getProgram(programNid: string): Promise<ProgramSummary> {\n    const cacheKey = `program:${programNid}`;\n    const endpoint = `/public-api/programs/${programNid}`;\n    \n    const response = await this.fetchWithCache<ApiResponse<ProgramSummary>>(\n      cacheKey,\n      endpoint,\n      ContraClient.CACHE_TTL.program\n    );\n    \n    return response.data;\n  }\n\n  /**\n   * List experts with advanced filtering and caching\n   */\n  async listExperts(\n    programNid: string,\n    filters: ExpertFilters = {}\n  ): Promise<ListResponse<ExpertProfile>> {\n    const queryString = this.buildQueryString(filters);\n    const cacheKey = `experts:${programNid}:${JSON.stringify(filters)}`;\n    const endpoint = `/public-api/programs/${programNid}/experts${queryString}`;\n    \n    return this.fetchWithCache<ListResponse<ExpertProfile>>(\n      cacheKey,\n      endpoint,\n      ContraClient.CACHE_TTL.experts\n    );\n  }\n\n  /**\n   * Search experts (using the main experts endpoint with filters)\n   */\n  async searchExperts(\n    programNid: string,\n    query: string,\n    filters: ExpertFilters = {}\n  ): Promise<ListResponse<ExpertProfile>> {\n    // Search is handled by client-side filtering since API doesn't support text search\n    const experts = await this.listExperts(programNid, filters);\n    \n    // Client-side filtering for search (since API doesn't support text search)\n    if (query.trim()) {\n      const searchTerm = query.toLowerCase();\n      experts.data = experts.data.filter(expert => \n        (expert.name && expert.name.toLowerCase().includes(searchTerm)) ||\n        (expert.oneLiner && expert.oneLiner.toLowerCase().includes(searchTerm)) ||\n        (expert.skillTags && expert.skillTags.some(tag => tag && tag.toLowerCase().includes(searchTerm)))\n      );\n    }\n    \n    return experts;\n  }\n\n  /**\n   * Get available filter options for a program\n   */\n  async getFilterOptions(programNid: string): Promise<FilterListResponse> {\n    const cacheKey = `filters:${programNid}`;\n    const endpoint = `/public-api/programs/${programNid}/filters`;\n    \n    return this.fetchWithCache<FilterListResponse>(\n      cacheKey,\n      endpoint,\n      ContraClient.CACHE_TTL.filters\n    );\n  }\n\n  /**\n   * Clear cache (useful for forced refreshes)\n   */\n  clearCache(pattern?: string): void {\n    if (pattern) {\n      // Clear specific cache entries\n      for (const key of this.cache.keys()) {\n        if (key.includes(pattern)) {\n          this.cache.delete(key);\n        }\n      }\n    } else {\n      // Clear all cache\n      this.cache.clear();\n    }\n\n    if (this.config.debug) {\n      console.log(`[ContraClient] Cache cleared${pattern ? ` (pattern: ${pattern})` : ''}`);\n    }\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getCacheStats(): {\n    size: number;\n    entries: Array<{ key: string; age: number; ttl: number }>;\n  } {\n    const now = Date.now();\n    const entries = Array.from(this.cache.entries()).map(([key, value]) => ({\n      key,\n      age: now - value.timestamp,\n      ttl: value.ttl\n    }));\n\n    return {\n      size: this.cache.size,\n      entries\n    };\n  }\n}\n\n/**\n * Custom error class for API errors\n */\nexport class ContraAPIError extends Error {\n  constructor(\n    message: string,\n    public code: string,\n    public status?: number\n  ) {\n    super(message);\n    this.name = 'ContraAPIError';\n  }\n}\n\n/**\n * Utility functions\n */\nexport const utils = {\n  /**\n   * Format hourly rate with proper handling of null values\n   */\n  formatRate(rate: number | null): string {\n    return rate ? `$${rate}/hr` : 'Rate on request';\n  },\n\n  /**\n   * Generate star rating HTML\n   */\n  renderStars(rating: number): string {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = (rating % 1) >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    let html = '';\n    \n    // Full stars\n    for (let i = 0; i < fullStars; i++) {\n      html += `<svg class=\"star star-full\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"#FFD700\">\n        <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>\n      </svg>`;\n    }\n    \n    // Half star\n    if (hasHalfStar) {\n      html += `<svg class=\"star star-half\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\n        <defs>\n          <linearGradient id=\"half-${rating}\">\n            <stop offset=\"50%\" stop-color=\"#FFD700\"/>\n            <stop offset=\"50%\" stop-color=\"#E5E5E5\"/>\n          </linearGradient>\n        </defs>\n        <path fill=\"url(#half-${rating})\" d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>\n      </svg>`;\n    }\n    \n    // Empty stars\n    for (let i = 0; i < emptyStars; i++) {\n      html += `<svg class=\"star star-empty\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"#E5E5E5\">\n        <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>\n      </svg>`;\n    }\n    \n    return html;\n  },\n\n  /**\n   * Debounce function for search inputs\n   */\n  debounce<T extends (...args: any[]) => any>(\n    func: T,\n    wait: number\n  ): (...args: Parameters<T>) => void {\n    let timeout: NodeJS.Timeout;\n    return (...args: Parameters<T>) => {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => func(...args), wait);\n    };\n  },\n\n  /**\n   * Throttle function for scroll events\n   */\n  throttle<T extends (...args: any[]) => any>(\n    func: T,\n    limit: number\n  ): (...args: Parameters<T>) => void {\n    let inThrottle: boolean;\n    return (...args: Parameters<T>) => {\n      if (!inThrottle) {\n        func(...args);\n        inThrottle = true;\n        setTimeout(() => inThrottle = false, limit);\n      }\n    };\n  }\n}; ","import { ContraClient, utils } from './client';\nimport type {\n  ExpertProfile,\n  ExpertFilters,\n  FilterChangeEvent,\n  ExpertLoadEvent,\n  ErrorEvent,\n  ExpertField\n} from './types';\n\n/**\n * Webflow Runtime for Contra Experts\n * Simplified for flexibility and predictability.\n */\n\n// Simplified configuration\ninterface RuntimeConfig {\n  apiKey: string;\n  debug?: boolean;\n  loadingClass?: string;\n  errorClass?: string;\n  emptyClass?: string;\n  // Video configuration\n  videoAutoplay?: boolean;\n  videoHoverPlay?: boolean;\n  videoMuted?: boolean;\n  videoLoop?: boolean;\n  videoControls?: boolean;\n  // Cloudinary transformations\n  imageTransformations?: string;\n  videoTransformations?: string;\n  optimizeGifsAsVideo?: boolean;\n  contraAnalytics?: boolean;\n}\n\nconst CLOUDINARY_TRANSFORM_PREFIXES = [\n  'w_', 'h_', 'c_', 'f_', 'q_', 'fl_', 'vc_', 'b_', 'e_', 'o_', 'a_', 'dpr_', 'ar_'\n];\n\n// Attribute constants\nconst ATTR_PREFIX = 'data-contra-';\nconst ATTRS = {\n  // Core list attributes\n  listId: 'list-id',\n  program: 'program',\n  template: 'template',\n  \n  // States\n  loading: 'loading',\n  error: 'error',\n  empty: 'empty',\n  \n  // Field binding\n  field: 'field',\n  format: 'format',\n  \n  // Repeating elements\n  repeat: 'repeat',\n  max: 'max',\n  \n  // Sorting and pagination\n  limit: 'limit',\n  \n  // Actions\n  action: 'action',\n  listTarget: 'list-target',\n\n  // Conditional display\n  showWhen: 'show-when',\n  hideWhen: 'hide-when',\n  prerenderPlaceholders: 'prerender-placeholders'\n} as const;\n\n// State management is now keyed by the list's unique ID\nclass RuntimeState {\n  private states = new Map<string, {\n    filters: ExpertFilters;\n    experts: ExpertProfile[];\n    loading: boolean;\n    error: Error | null;\n    offset: number;\n    limit: number;\n    totalCount: number;\n    hasNextPage: boolean;\n  }>();\n\n  getState(listId: string) {\n    if (!this.states.has(listId)) {\n      this.states.set(listId, {\n        filters: {},\n        experts: [],\n        loading: false,\n        error: null,\n        offset: 0,\n        limit: 20, // Default limit\n        totalCount: 0,\n        hasNextPage: false\n      });\n    }\n    return this.states.get(listId)!;\n  }\n\n  updateState(listId: string, updates: Partial<ReturnType<RuntimeState['getState']>>) {\n    const state = this.getState(listId);\n    Object.assign(state, updates);\n    this.states.set(listId, state);\n  }\n}\n\n/**\n * Main Runtime Class\n */\nexport class ContraWebflowRuntime {\n  private client: ContraClient;\n  private config: Required<RuntimeConfig>;\n  private state = new RuntimeState();\n  private debouncedReload: Map<string, () => void> = new Map();\n  private filterNameMap: Record<string, string> = {\n    locations: 'location',\n  };\n  private filterOptionLabels: Record<string, Record<string, string>> = {\n    sortBy: {\n      relevance: 'Relevance',\n      oldest: 'Oldest',\n      newest: 'Newest',\n      rate_asc: 'Rate (Low to High)',\n      rate_desc: 'Rate (High to Low)'\n    }\n  };\n\n  constructor(config: RuntimeConfig) {\n    this.config = {\n      debug: false,\n      loadingClass: 'loading',\n      errorClass: 'error',\n      emptyClass: 'empty',\n      // Video configuration defaults\n      videoAutoplay: false,\n      videoHoverPlay: true,\n      videoMuted: true,\n      videoLoop: true,\n      videoControls: false,\n      // Cloudinary transformation defaults\n      imageTransformations: 'f_auto,q_auto:eco,c_limit,w_800',\n      videoTransformations: 'fl_progressive,f_auto,q_auto:eco,vc_auto,c_limit,h_720',\n      optimizeGifsAsVideo: true,\n      contraAnalytics: true,\n      ...config\n    };\n\n    this.client = new ContraClient({\n      apiKey: this.config.apiKey,\n      debug: this.config.debug\n    });\n\n    this.log('Runtime initialized', this.config);\n  }\n\n  /**\n   * Initialize the runtime by finding and setting up all lists.\n   */\n  async init(): Promise<void> {\n    this.log('Initializing runtime...');\n\n    try {\n      // 1. Discover all lists and unique programs to fetch filters for\n      const listElements = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.listId}]`);\n      this.log(`Found ${listElements.length} lists to initialize.`);\n      \n      const programFilters = new Map<string, any[]>();\n      for (const listElement of listElements) {\n        const programId = this.getAttr(listElement, ATTRS.program);\n        if (programId && !programFilters.has(programId)) {\n          this.log(`Fetching filters for program: ${programId}`);\n          programFilters.set(programId, await this.getAvailableFilters(programId));\n        }\n      }\n\n      // 2. Populate all filter controls on the page once\n      this.populateAllFilterControls(programFilters);\n\n      // 3. Initialize each list\n      for (const listElement of listElements) {\n        await this.initList(listElement);\n      }\n\n      // 4. Wire up all action buttons and filter controls\n      this.wireActionButtons();\n      this.wireFilterControls();\n\n      this.log('Runtime initialization complete');\n    } catch (error) {\n      this.log('Runtime initialization failed', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize a single expert list.\n   */\n  private async initList(listElement: Element): Promise<void> {\n    const listId = this.getAttr(listElement, ATTRS.listId);\n    const programId = this.getAttr(listElement, ATTRS.program);\n\n    if (!listId || !programId) {\n      this.log('List element is missing required attributes `data-contra-list-id` or `data-contra-program`.', listElement);\n      return;\n    }\n\n    this.log(`Initializing list: ${listId} for program: ${programId}`);\n\n    try {\n      (listElement as HTMLElement).setAttribute('data-contra-initialized', 'true');\n      (listElement as HTMLElement).classList.add('contra-list');\n      \n      const limit = parseInt(this.getAttr(listElement, ATTRS.limit) || '20', 10);\n      const template = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.template}]`);\n\n      // Prerender placeholders if requested, before the original template is hidden\n      if (template && listElement.hasAttribute(`${ATTR_PREFIX}${ATTRS.prerenderPlaceholders}`)) {\n        this.log(`Prerendering ${limit} placeholders for list: ${listId}`);\n        for (let i = 0; i < limit; i++) {\n          const placeholder = template.cloneNode(true) as Element;\n          placeholder.removeAttribute(`${ATTR_PREFIX}${ATTRS.template}`);\n          placeholder.classList.add('contra-placeholder-item');\n          (placeholder as HTMLElement).style.display = ''; // Ensure placeholder is visible\n          listElement.appendChild(placeholder);\n        }\n      }\n      \n      if (template) {\n          (template as HTMLElement).style.display = 'none';\n          this.log(`Template found and hidden for list: ${listId}`);\n      }\n      \n      // Defensively remove inline display styles from state elements to prevent conflicts.\n      const loadingEl = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n      if (loadingEl) (loadingEl as HTMLElement).style.removeProperty('display');\n      const emptyEl = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n      if (emptyEl) (emptyEl as HTMLElement).style.removeProperty('display');\n\n      const initialFilters = this.parseFiltersFromElement(listElement);\n      \n      this.state.updateState(listId, { \n      filters: initialFilters,\n        limit: limit,\n        offset: initialFilters.offset || 0,\n      });\n      \n      this.state.updateState(listId, { loading: true, error: null });\n      this.showLoading(listElement, true);\n\n      const response = await this.client.listExperts(programId, initialFilters);\n      \n      this.log(`Loaded ${response.data.length} experts for list ${listId}`, response);\n\n      const newExperts = response.data;\n      const allExperts = newExperts;\n\n      // Update state before touching the DOM\n      this.state.updateState(listId, {\n        experts: allExperts,\n        totalCount: response.totalCount,\n        offset: initialFilters.offset || 0 + newExperts.length,\n        hasNextPage: newExperts.length === limit,\n        loading: false\n      });\n\n      // Render experts and then immediately update all UI states\n      this.renderExperts(listElement, newExperts, false);\n      this.updateUIStates(listElement, listId);\n\n    } catch (error) {\n      this.log(`Failed to initialize list ${listId}`, error);\n      this.state.updateState(listId, { loading: false, error: error as Error });\n      this.showError(listElement, error as Error);\n    } finally {\n      this.showLoading(listElement, false);\n    }\n  }\n\n  /**\n   * Wire up all action buttons on the page.\n   */\n  private wireActionButtons(): void {\n    const actionButtons = this.querySelectorAll(document.body, `[${ATTR_PREFIX}${ATTRS.action}]`);\n    \n    actionButtons.forEach(button => {\n      const action = this.getAttr(button, ATTRS.action);\n      const targetListId = this.getAttr(button, ATTRS.listTarget);\n      \n      if (!action || !targetListId) {\n        this.log('Action button is missing required `data-contra-action` or `data-contra-list-target` attributes.', button);\n        return;\n      }\n\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        this.handleAction(action, targetListId, button);\n      });\n    });\n  }\n\n  /**\n   * Load experts for a given list.\n   */\n  private async loadExperts(listId: string, programId: string, append = false): Promise<void> {\n    const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${listId}\"]`);\n    if (!listElement) {\n      this.log(`Cannot find list element with ID: ${listId}`);\n          return;\n        }\n\n    // When reloading the list (not appending), we must hide the empty state message first.\n    const emptyElement = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (!append && emptyElement) {\n        (emptyElement as HTMLElement).style.display = 'none';\n    }\n\n    const state = this.state.getState(listId);\n    const filters = {\n      ...state.filters,\n      limit: state.limit,\n      offset: state.offset,\n    };\n    \n    this.log(`Loading experts for list: ${listId}`, filters);\n\n    try {\n      this.showLoading(listElement, true);\n      this.state.updateState(listId, { loading: true, error: null });\n\n      const response = await this.client.listExperts(programId, filters);\n      \n      this.log(`Loaded ${response.data.length} experts for list ${listId}`, response);\n\n      const newExperts = response.data;\n      const allExperts = append ? [...state.experts, ...newExperts] : newExperts;\n\n      // Update state before touching the DOM\n      this.state.updateState(listId, {\n        experts: allExperts,\n        totalCount: response.totalCount,\n        offset: state.offset + newExperts.length,\n        hasNextPage: newExperts.length === state.limit,\n        loading: false\n      });\n\n      // Render experts and then immediately update all UI states\n      this.renderExperts(listElement, newExperts, append);\n      this.updateUIStates(listElement, listId);\n\n    } catch (error) {\n      this.log(`Failed to load experts for list: ${listId}`, error);\n      this.state.updateState(listId, { loading: false, error: error as Error });\n      this.showError(listElement, error as Error);\n    } finally {\n      // Always ensure loading state is removed\n      this.showLoading(listElement, false);\n    }\n  }\n\n  /**\n   * Render experts into the container. Can clear or append.\n   */\n  private renderExperts(listElement: Element, experts: ExpertProfile[], append: boolean): void {\n    const template = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.template}]`);\n    if (!template) {\n      this.log('No template found in list', listElement);\n      return;\n    }\n    const listId = this.getAttr(listElement, ATTRS.listId)!;\n\n    // Handle prerendered placeholders on initial load\n    const placeholders = this.querySelectorAll(listElement, '.contra-placeholder-item');\n    if (!append && placeholders.length > 0) {\n      this.log(`Populating ${experts.length} of ${placeholders.length} placeholders for list.`);\n      \n      experts.forEach((expert, i) => {\n        const placeholder = placeholders[i];\n        if (placeholder) {\n          this._configureCard(placeholder, expert, listId);\n          placeholder.classList.remove('contra-placeholder-item');\n        }\n      });\n\n      // Remove any unused placeholders\n      if (experts.length < placeholders.length) {\n        this.log(`Removing ${placeholders.length - experts.length} unused placeholders.`);\n        for (let i = experts.length; i < placeholders.length; i++) {\n          placeholders[i].remove();\n        }\n      }\n      this.log(`Finished rendering placeholders for list`, listElement);\n      return; // Skip the standard rendering path\n    }\n\n    if (!append) {\n      // Clear only previously rendered expert cards\n      const existingCards = this.querySelectorAll(listElement, '.contra-rendered-item');\n    existingCards.forEach(card => card.remove());\n    }\n\n    const fragment = document.createDocumentFragment();\n    experts.forEach(expert => {\n      const expertCard = this.populateExpertCard(template, expert, listId);\n      fragment.appendChild(expertCard);\n    });\n    listElement.appendChild(fragment);\n\n    this.log(`Rendered ${experts.length} expert cards into list`, listElement);\n  }\n\n  /**\n   * Populate expert card from template\n   */\n  private populateExpertCard(template: Element, expert: ExpertProfile, listId: string): Element {\n    const card = template.cloneNode(true) as Element;\n    this._configureCard(card, expert, listId);\n    return card;\n  }\n\n  /**\n   * Configures an existing card element with expert data, including all sub-fields and repeaters.\n   * This is the core rendering logic for a single item.\n   */\n  private _configureCard(card: Element, expert: ExpertProfile, listId: string): void {\n    // Add a marker class to identify this as a rendered card\n    card.classList.add('contra-rendered-item');\n    \n    // Remove template attribute and show the card\n    card.removeAttribute(`${ATTR_PREFIX}${ATTRS.template}`);\n    (card as HTMLElement).style.display = '';\n\n    // --- Fix for repeater template pollution ---\n    // 1. Temporarily detach repeater templates\n    const repeatContainers = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.repeat}]`);\n    const detachedTemplates = new Map<Element, DocumentFragment>();\n    repeatContainers.forEach(container => {\n        const fragment = document.createDocumentFragment();\n        while (container.firstChild) {\n            fragment.appendChild(container.firstChild);\n        }\n        detachedTemplates.set(container, fragment);\n    });\n\n    // 2. Populate fields on the main card (now safely without repeater templates)\n    this.populateFields(card, expert, listId);\n    \n    // 3. Re-attach the pristine templates\n    detachedTemplates.forEach((fragment, container) => {\n        container.appendChild(fragment);\n    });\n\n    // 4. Handle repeating elements, which will now use the clean templates\n    this.populateRepeatingElements(card, expert, listId);\n    \n    // Handle conditional display\n    this.handleConditionalDisplay(card, expert);\n  }\n\n  /**\n   * Populate data fields in the card\n   */\n  private populateFields(card: Element, expert: ExpertProfile, listId: string): void {\n    const fieldElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.field}]`);\n    \n    fieldElements.forEach(element => {\n      const fieldName = this.getAttr(element, ATTRS.field) as ExpertField;\n      const format = this.getAttr(element, ATTRS.format);\n      \n      if (!fieldName || !(fieldName in expert)) return;\n\n      const value = expert[fieldName];\n      this.setElementValue(element, value, format, listId);\n    });\n\n    // Handle star ratings\n    const starsElements = this.querySelectorAll(card, '[data-contra-stars]');\n    starsElements.forEach(element => {\n      if (expert.averageReviewScore) {\n        this.renderStarRating(element, expert.averageReviewScore);\n      }\n    });\n  }\n\n  /**\n   * Set element value with proper formatting\n   */\n  private setElementValue(element: Element, value: any, format?: string | null, listId?: string): void {\n    if (value == null || value === '') return;\n\n    // Media type detection and handling\n    if (this.isMediaField(element) && typeof value === 'string' && value.trim()) {\n      this.setMediaValue(element, value);\n      return;\n    }\n\n    if (element instanceof HTMLAnchorElement) {\n      let href = String(value);\n      if (listId) {\n          href = this._appendContraAnalytics(href, listId);\n      }\n      element.href = href;\n      if (element.children.length === 0 && !element.textContent?.trim()) {\n        element.textContent = String(value);\n      }\n    } else if (element instanceof HTMLInputElement) {\n      element.value = String(value);\n    } else if (element instanceof HTMLImageElement) {\n      // Regular image handling for avatars and other images\n      const mediaType = this.detectMediaType(String(value));\n      const transformedUrl = this.transformMediaUrl(String(value), mediaType);\n      element.src = transformedUrl;\n      element.alt = element.alt || 'Image';\n    } else {\n      // Text content with formatting\n      let displayValue = String(value);\n      \n      if (format) {\n        switch (format) {\n          case 'currency':\n            displayValue = typeof value === 'number' ? `$${value}` : displayValue;\n            break;\n          case 'rate':\n            displayValue = utils.formatRate(typeof value === 'number' ? value : null);\n            break;\n          case 'rating':\n            // Format rating to one decimal place (5.0, 4.9, etc.)\n            displayValue = typeof value === 'number' ? value.toFixed(1) : displayValue;\n            break;\n          case 'earnings':\n            // Format earnings like $25k+\n            if (typeof value === 'number') {\n              if (value >= 1000000) {\n                displayValue = `$${Math.floor(value / 1000000)}M+`;\n              } else if (value >= 1000) {\n                displayValue = `$${Math.floor(value / 1000)}k+`;\n              } else {\n                displayValue = `$${value}`;\n              }\n            }\n            break;\n          case 'number':\n            displayValue = typeof value === 'number' ? value.toLocaleString() : displayValue;\n            break;\n          case 'truncate':\n            displayValue = displayValue.length > 100 ? displayValue.substring(0, 97) + '...' : displayValue;\n            break;\n          case 'boolean':\n            displayValue = value ? 'Yes' : 'No';\n            break;\n          case 'availability':\n            displayValue = value ? 'Available' : 'Not Available';\n            break;\n        }\n      }\n      \n      element.textContent = displayValue;\n    }\n  }\n\n  /**\n   * Star rating rendering with optional text display\n   */\n  private renderStarRating(element: Element, rating: number): void {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 >= 0.5;\n    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);\n    \n    let starsHtml = '';\n    \n    // Full stars\n    for (let i = 0; i < fullStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-full\">★</span>';\n    }\n    \n    // Half star\n    if (hasHalfStar) {\n      starsHtml += '<span class=\"contra-star contra-star-half\">★</span>';\n    }\n    \n    // Empty stars\n    for (let i = 0; i < emptyStars; i++) {\n      starsHtml += '<span class=\"contra-star contra-star-empty\">☆</span>';\n    }\n    \n    element.innerHTML = starsHtml;\n    \n    // Also update any rating text elements in the same card\n    const card = element.closest('[data-contra-template]') || element.closest('.expert-card');\n    if (card) {\n      const ratingTextElements = this.querySelectorAll(card, '[data-contra-rating-text]');\n      ratingTextElements.forEach(textElement => {\n        textElement.textContent = rating.toFixed(1);\n      });\n    }\n  }\n\n  /**\n   * Media type detection and element handling\n   */\n  private isMediaField(element: Element): boolean {\n    const field = this.getAttr(element, ATTRS.field);\n    // Only apply advanced media handling to project cover URLs, not avatars\n    return field === 'coverUrl';\n  }\n\n  /**\n   * Media value setting with automatic type detection\n   */\n  private setMediaValue(element: Element, url: string): void {\n    const mediaType = this.detectMediaType(url);\n    const parent = element.parentElement;\n    \n    if (!parent) {\n      this.log('Media element has no parent for replacement', element);\n      return;\n    }\n\n    // Remove existing media element\n    element.remove();\n\n    // Create appropriate media element\n    let mediaElement: HTMLElement;\n    \n    switch (mediaType) {\n      case 'video':\n        const transformedVideoUrl = this.transformMediaUrl(url, 'video');\n        mediaElement = this.createVideoElement(transformedVideoUrl, element);\n        break;\n      case 'image':\n      default:\n        const transformedImageUrl = this.transformMediaUrl(url, 'image');\n        mediaElement = this.createImageElement(transformedImageUrl, element);\n        break;\n    }\n\n    // Preserve classes and attributes from original element\n    this.transferAttributes(element, mediaElement);\n    \n    // Insert new media element\n    parent.appendChild(mediaElement);\n    \n    this.log(`Created ${mediaType} element for URL: ${url}`);\n  }\n\n  /**\n   * Detect media type from URL\n   */\n  private detectMediaType(url: string): 'image' | 'video' {\n    if (!url || typeof url !== 'string') {\n      this.log('Invalid URL provided to detectMediaType:', url);\n      return 'image';\n    }\n    \n    const urlLower = url.toLowerCase();\n    \n    // If optimizing GIFs as videos, treat them as such immediately.\n    if (this.config.optimizeGifsAsVideo && urlLower.endsWith('.gif')) {\n        return 'video';\n    }\n    \n    // Video formats - check for extensions and Cloudinary video path\n    const videoExtensions = ['.mp4', '.webm', '.mov', '.avi', '.mkv', '.ogg'];\n    const isVideoExtension = videoExtensions.some(ext => urlLower.endsWith(ext));\n    const isCloudinaryVideo = urlLower.includes('cloudinary.com/') && urlLower.includes('/video/');\n    \n    if (isVideoExtension || isCloudinaryVideo) {\n      return 'video';\n    }\n    \n    // Default to image\n    return 'image';\n  }\n\n  /**\n   * Create video element with fallback\n   */\n  private createVideoElement(url: string, originalElement: Element): HTMLVideoElement {\n    const video = document.createElement('video');\n    \n    // Video attributes\n    video.src = url;\n    video.loop = this.config.videoLoop;\n    video.playsInline = true; // Essential for inline playback on iOS\n    video.preload = 'metadata';\n    video.controls = this.config.videoControls;\n    \n    // Set a poster image proactively for better mobile compatibility and UX.\n    const posterUrl = this.extractVideoThumbnail(url);\n    if (posterUrl) {\n      video.poster = posterUrl;\n      this.log(`Set poster for video ${url}: ${posterUrl}`);\n    }\n\n    // Muted is critical for autoplay on mobile.\n    if (this.config.videoMuted) {\n        video.muted = true;\n        video.setAttribute('muted', ''); // Set attribute for maximum compatibility\n    }\n    \n    // Maintain aspect ratio and object-fit from original\n    video.style.width = '100%';\n    video.style.height = '100%';\n    video.style.objectFit = 'cover';\n    video.style.borderRadius = 'inherit';\n    \n    // Autoplay configuration\n    if (this.config.videoAutoplay) {\n      video.autoplay = true;\n      video.setAttribute('autoplay', '');\n      \n      // Programmatically play the video to support mobile autoplay, which often ignores the attribute alone.\n      // The promise is caught to handle cases where the browser blocks autoplay (e.g., Low Power Mode).\n      const playPromise = video.play();\n      if (playPromise !== undefined) {\n        playPromise.catch(error => {\n          this.log('Autoplay was prevented.', { error, videoUrl: url });\n        });\n      }\n    }\n    \n    // Error handling with fallback to poster or placeholder\n    video.onerror = () => {\n      this.log(`Video failed to load: ${url}`);\n      // Create a fallback image element\n      const fallbackImg = this.createImageElement(posterUrl || url, originalElement);\n      if (video.parentElement) {\n        video.parentElement.replaceChild(fallbackImg, video);\n      }\n    };\n\n    // Hover-to-play functionality (if enabled and not autoplay)\n    if (this.config.videoHoverPlay && !this.config.videoAutoplay) {\n      // --- Desktop hover events ---\n      video.addEventListener('mouseenter', () => {\n        video.currentTime = 0;\n        video.play().catch(() => { /* Ignore play errors */ });\n        });\n      video.addEventListener('mouseleave', () => {\n        video.pause();\n        video.currentTime = 0;\n      });\n      \n      // --- Mobile & Desktop click/tap events ---\n      video.addEventListener('click', (e) => {\n        e.preventDefault(); // Prevent navigation if video is in a link\n        if (video.paused) {\n          video.currentTime = 0;\n          video.play().catch((err) => this.log('Video play failed on click', err));\n        } else {\n          video.pause();\n        }\n      });\n    }\n\n    return video;\n  }\n\n  /**\n   * Create image element with error handling\n   */\n  private createImageElement(url: string, originalElement: Element): HTMLImageElement {\n    const img = document.createElement('img');\n    \n    img.src = url;\n    img.alt = originalElement.getAttribute('alt') || 'Media content';\n    img.loading = 'lazy';\n    \n    // Maintain styling\n    img.style.width = '100%';\n    img.style.height = '100%';\n    img.style.objectFit = 'cover';\n    img.style.borderRadius = 'inherit';\n    \n    // Error handling\n    img.onerror = () => {\n      this.log(`Image failed to load: ${url}`);\n      img.style.background = '#f3f4f6';\n      img.style.opacity = '0.5';\n      img.alt = 'Image unavailable';\n      \n      // Add broken image icon\n      img.style.position = 'relative';\n      const placeholder = document.createElement('div');\n      placeholder.style.cssText = `\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        color: #9ca3af;\n        font-size: 12px;\n        text-align: center;\n      `;\n      placeholder.textContent = '🖼️ Image unavailable';\n      img.parentElement?.appendChild(placeholder);\n    };\n\n    return img;\n  }\n\n  /**\n   * Extract video thumbnail from Cloudinary URL\n   */\n  private extractVideoThumbnail(videoUrl: string): string | null {\n    // Loosened the check to work for any Cloudinary upload URL\n    if (!videoUrl.includes('/upload/')) {\n        this.log('URL does not appear to be a Cloudinary video, cannot generate poster.', videoUrl);\n    return null;\n    }\n\n    // Always change the file extension to .jpg for the poster\n    let posterUrl = videoUrl.replace(/\\.(mp4|webm|mov|avi|mkv|ogg|gif)$/i, '.jpg');\n\n    const uploadMarker = '/upload/';\n    const parts = posterUrl.split(uploadMarker);\n\n    if (parts.length !== 2) {\n        this.log(`Could not parse URL for thumbnail generation: ${videoUrl}`);\n        return posterUrl;\n    }\n\n    const [baseUrl, path] = parts;\n    let pathComponents = path.split('/');\n    \n    const firstPathComponent = pathComponents[0];\n    const hasTransformations = CLOUDINARY_TRANSFORM_PREFIXES.some(prefix => firstPathComponent.includes(prefix));\n\n    if (!hasTransformations) {\n        this.log(`No Cloudinary transformations found, returning basic .jpg poster URL for: ${videoUrl}`);\n        return posterUrl;\n    }\n\n    let transformations = pathComponents.shift() || '';\n    \n    // Remove params not ideal for a static poster (e.g., flags like fl_progressive)\n    const params = transformations.split(',');\n    const filteredParams = params.filter(param => \n        !param.startsWith('fl_') && \n        param !== 'f_auto'\n    );\n\n    const newTransformations = filteredParams.join(',');\n\n    if (newTransformations) {\n        pathComponents.unshift(newTransformations);\n    }\n\n    const newPath = pathComponents.join('/');\n    const finalUrl = `${baseUrl}${uploadMarker}${newPath}`;\n    \n    this.log(`Generated poster URL: ${finalUrl} from video URL: ${videoUrl}`);\n    return finalUrl;\n  }\n\n  /**\n   * Transfer attributes and classes from old element to new\n   */\n  private transferAttributes(from: Element, to: HTMLElement): void {\n    // Transfer classes\n    if (from.className) {\n      to.className = from.className;\n    }\n    \n    // Transfer data attributes (except contra-field)\n    Array.from(from.attributes).forEach(attr => {\n      if (attr.name.startsWith('data-') && attr.name !== `${ATTR_PREFIX}${ATTRS.field}`) {\n        to.setAttribute(attr.name, attr.value);\n      }\n    });\n    \n    // Transfer style\n    if (from.getAttribute('style')) {\n      const existingStyle = to.getAttribute('style') || '';\n      to.setAttribute('style', existingStyle + '; ' + from.getAttribute('style'));\n    }\n  }\n\n  /**\n   * Handle repeating elements (projects, social links)\n   */\n  private populateRepeatingElements(card: Element, expert: ExpertProfile, listId: string): void {\n    const repeatElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.repeat}]`);\n    \n    repeatElements.forEach(container => {\n      const repeatType = this.getAttr(container, ATTRS.repeat);\n      const maxItems = parseInt(this.getAttr(container, ATTRS.max) || '10');\n      \n      if (repeatType === 'projects' && expert.projects) {\n        this.populateRepeatingContainer(container, expert.projects.slice(0, maxItems), listId);\n      } else if (repeatType === 'socialLinks' && expert.socialLinks) {\n        this.populateRepeatingContainer(container, expert.socialLinks.slice(0, maxItems), listId);\n      } else if (repeatType === 'skillTags' && expert.skillTags) {\n        this.populateRepeatingContainer(container, expert.skillTags.slice(0, maxItems).map((tag: string) => ({ name: tag })), listId);\n      }\n    });\n  }\n\n  /**\n   * Populate a repeating container with items\n   */\n  private populateRepeatingContainer(container: Element, items: any[], listId: string): void {\n    const template = container.firstElementChild;\n    if (!template) return;\n\n    // Clear existing items\n    container.innerHTML = '';\n    \n    // Create items from template\n    items.forEach(item => {\n      const itemElement = template.cloneNode(true) as Element;\n      // The template pollution is fixed, so we can reliably use populateFields for all item types.\n      this.populateFields(itemElement, item, listId);\n      container.appendChild(itemElement);\n    });\n    \n    // Hide container if no items\n    if (items.length === 0) {\n      (container as HTMLElement).style.display = 'none';\n    }\n  }\n\n  /**\n   * Handle conditional display based on data\n   */\n  private handleConditionalDisplay(card: Element, expert: ExpertProfile): void {\n    const conditionalElements = this.querySelectorAll(card, `[${ATTR_PREFIX}${ATTRS.showWhen}], [${ATTR_PREFIX}${ATTRS.hideWhen}]`);\n    \n    conditionalElements.forEach(element => {\n      const showWhen = this.getAttr(element, ATTRS.showWhen);\n      const hideWhen = this.getAttr(element, ATTRS.hideWhen);\n      \n      let shouldShow = true;\n      \n      if (showWhen) {\n        shouldShow = this.evaluateCondition(expert, showWhen);\n      }\n      \n      if (hideWhen) {\n        shouldShow = shouldShow && !this.evaluateCondition(expert, hideWhen);\n      }\n      \n      (element as HTMLElement).style.display = shouldShow ? '' : 'none';\n    });\n  }\n\n  /**\n   * Evaluate a condition against expert data\n   */\n  private evaluateCondition(expert: ExpertProfile, condition: string): boolean {\n    if (!condition || typeof condition !== 'string') {\n      this.log('Invalid condition provided:', condition);\n      return false;\n    }\n    \n    // Parse condition: \"field:value\" or \"field:>value\" etc.\n    const parts = condition.split(':');\n    if (parts.length < 2) {\n      this.log('Invalid condition format:', condition);\n      return false;\n    }\n    \n    const field = parts[0];\n    const restOfCondition = parts.slice(1).join(':'); // Handle colons in values\n    const expertValue = (expert as any)[field];\n    \n    this.log(`Evaluating condition: ${field} (${expertValue}, type: ${typeof expertValue}) against ${restOfCondition}`);\n    \n    if (expertValue == null) {\n      this.log(`Field '${field}' is null/undefined, condition fails`);\n      return false;\n    }\n    \n    // Check for comparison operators\n    if (restOfCondition.startsWith('>=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) >= Number(value);\n      this.log(`Comparison: ${expertValue} >= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<=')) {\n      const value = restOfCondition.substring(2);\n      const result = Number(expertValue) <= Number(value);\n      this.log(`Comparison: ${expertValue} <= ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('>')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) > Number(value);\n      this.log(`Comparison: ${expertValue} > ${value} = ${result}`);\n      return result;\n    } else if (restOfCondition.startsWith('<')) {\n      const value = restOfCondition.substring(1);\n      const result = Number(expertValue) < Number(value);\n      this.log(`Comparison: ${expertValue} < ${value} = ${result}`);\n      return result;\n    } else {\n      // Direct value comparison with type-aware handling\n      let result = false;\n      \n      // Handle boolean fields specially\n      if (typeof expertValue === 'boolean') {\n        // Convert string condition to boolean for comparison\n        if (restOfCondition.toLowerCase() === 'true') {\n          result = expertValue === true;\n        } else if (restOfCondition.toLowerCase() === 'false') {\n          result = expertValue === false;\n        } else {\n          result = false;\n        }\n        this.log(`Boolean comparison: ${expertValue} === ${restOfCondition.toLowerCase() === 'true'} = ${result}`);\n      } else if (typeof expertValue === 'number') {\n        // Handle numeric comparisons\n        const numValue = Number(restOfCondition);\n        result = !isNaN(numValue) && expertValue === numValue;\n        this.log(`Number comparison: ${expertValue} === ${numValue} = ${result}`);\n      } else {\n        // String comparison (case-insensitive)\n        const expertStr = String(expertValue);\n        const valueStr = String(restOfCondition);\n        result = expertStr.toLowerCase() === valueStr.toLowerCase();\n        this.log(`String comparison: '${expertStr}' === '${valueStr}' = ${result}`);\n      }\n      \n      return result;\n    }\n  }\n\n  /**\n   * Update UI states based on current data for a specific list.\n   */\n  private updateUIStates(listElement: Element, listId: string): void {\n    const state = this.state.getState(listId);\n    \n    const emptyElement = this.querySelector(listElement, `[${ATTR_PREFIX}${ATTRS.empty}]`);\n    if (emptyElement) {\n        const showEmpty = !state.loading && state.experts.length === 0;\n        const display = showEmpty ? 'block' : 'none';\n        (emptyElement as HTMLElement).style.setProperty('display', display, 'important');\n        this.log(`List ${listId}: Empty state display set to '${display}'.`);\n    }\n    \n    const loadMoreButton = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.action}=\"load-more\"][${ATTR_PREFIX}${ATTRS.listTarget}=\"${listId}\"]`);\n    if (loadMoreButton) {\n      const btn = loadMoreButton as HTMLButtonElement;\n      const hasMore = !state.loading && state.hasNextPage;\n      const display = hasMore ? 'inline-block' : 'none';\n      (loadMoreButton as HTMLElement).style.setProperty('display', display, 'important');\n      btn.disabled = state.loading;\n      btn.textContent = state.loading ? 'Loading...' : 'Load More';\n    }\n  }\n\n  /**\n   * Handle action buttons (just load-more for now).\n   */\n  private handleAction(action: string, targetListId: string, button: Element): void {\n    if (action === 'load-more') {\n      const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${targetListId}\"]`);\n      const programId = this.getAttr(listElement!, ATTRS.program);\n      if (listElement && programId) {\n        this.loadExperts(targetListId, programId, true); // `true` to append\n      } else {\n        this.log(`Could not find list or program for target: ${targetListId}`);\n      }\n    } else if (action === 'clear-filters') {\n      this.clearFilters(targetListId);\n    }\n  }\n\n  private clearFilters(targetListId: string): void {\n    const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}${ATTRS.listId}=\"${targetListId}\"]`);\n    if (!listElement) {\n        this.log(`Cannot find list element with ID: ${targetListId} to clear filters.`);\n        return;\n    }\n    const programId = this.getAttr(listElement, ATTRS.program);\n    if (!programId) {\n        this.log(`Cannot find programId for list: ${targetListId}`);\n        return;\n    }\n\n    this.log(`Clearing filters for list: ${targetListId}`);\n\n    // 1. Reset state\n    this.state.updateState(targetListId, { filters: {}, offset: 0 });\n\n    // 2. Reset controls visually\n    const filterControls = this.querySelectorAll(document.body, `[data-contra-filter][data-contra-list-target=\"${targetListId}\"]`);\n    filterControls.forEach(control => {\n        this.resetControlValue(control as HTMLInputElement | HTMLSelectElement);\n    });\n\n    // 3. Reload data\n    this.loadExperts(targetListId, programId, false); // false to replace, not append\n  }\n\n  private resetControlValue(control: HTMLInputElement | HTMLSelectElement): void {\n    if (control instanceof HTMLInputElement) {\n        switch (control.type) {\n            case 'checkbox':\n            case 'radio':\n                control.checked = false;\n                break;\n            case 'number':\n            case 'range':\n                control.value = '';\n                break;\n            default: // text, search, etc.\n                control.value = '';\n                break;\n        }\n    } else if (control instanceof HTMLSelectElement) {\n        control.selectedIndex = 0; // Reset to the first option\n    }\n  }\n\n  private updateFilterAndReload(listId: string, programId: string, filterKey: string, value: any): void {\n    const state = this.state.getState(listId);\n    const newFilters = { ...state.filters };\n\n    // Process and set value\n    let processedValue = value;\n    if (filterKey === 'available') {\n      // If checkbox is checked, value is true. If unchecked, it's false.\n      // We only want to apply the filter when it's true.\n      processedValue = value ? true : undefined;\n    } else if (['minRate', 'maxRate'].includes(filterKey)) {\n      processedValue = (value === '' || value === null) ? undefined : Number(value);\n    } else if (filterKey === 'languages' && typeof value === 'string') {\n        processedValue = value.split(',').map(v => v.trim()).filter(v => v);\n        if (processedValue.length === 0) {\n            processedValue = undefined;\n        }\n    }\n\n    if (processedValue !== undefined && processedValue !== '') {\n        const apiKey = this.filterNameMap[filterKey] || filterKey;\n        (newFilters as any)[apiKey] = processedValue;\n    } else {\n        const apiKey = this.filterNameMap[filterKey] || filterKey;\n        delete (newFilters as any)[apiKey];\n    }\n    \n    // Reset offset and update state\n    this.state.updateState(listId, { filters: newFilters, offset: 0 });\n\n    this.log(`Filter updated for list ${listId}, reloading. New filters:`, newFilters);\n    \n    // Reload the list\n    this.loadExperts(listId, programId, false);\n  }\n\n  private wireFilterControls(): void {\n    const filterControls = this.querySelectorAll(document.body, `[data-contra-filter]`);\n    this.log(`Found ${filterControls.length} filter controls to wire.`);\n\n    filterControls.forEach(control => {\n        const filterKey = control.getAttribute('data-contra-filter');\n        const targetListId = control.getAttribute('data-contra-list-target');\n\n        if (!filterKey || !targetListId) {\n            this.log('Filter control missing required attributes: data-contra-filter or data-contra-list-target', control);\n            return;\n        }\n\n        const listElement = this.querySelector(document.body, `[${ATTR_PREFIX}list-id=\"${targetListId}\"]`);\n        if (!listElement) return;\n        const programId = this.getAttr(listElement, ATTRS.program);\n        if (!programId) return;\n\n        const debounceTime = (control instanceof HTMLInputElement && ['text', 'search'].includes(control.type)) ? 300 : 0;\n        \n        const handler = () => {\n            const value = this.getControlValue(control as HTMLInputElement | HTMLSelectElement);\n            this.updateFilterAndReload(targetListId, programId, filterKey, value);\n        };\n        \n        const debouncedHandler = this.debounce(handler, debounceTime);\n        \n        const eventType = (control instanceof HTMLInputElement && ['text', 'search'].includes(control.type)) ? 'input' : 'change';\n        control.addEventListener(eventType, debouncedHandler);\n    });\n  }\n\n  private debounce(func: (...args: any[]) => void, delay: number): (...args: any[]) => void {\n    let timeoutId: number;\n    return (...args: any[]) => {\n        clearTimeout(timeoutId);\n        if (delay > 0) {\n            timeoutId = window.setTimeout(() => func.apply(this, args), delay);\n        } else {\n            func.apply(this, args);\n        }\n    };\n  }\n\n  /**\n   * Utility Methods\n   */\n  private getAttr(element: Element, name: string): string | null {\n    return element.getAttribute(`${ATTR_PREFIX}${name}`);\n  }\n\n  private querySelector(element: Element, selector: string): Element | null {\n    return element.querySelector(selector);\n  }\n\n  private querySelectorAll(element: Element, selector: string): Element[] {\n    return Array.from(element.querySelectorAll(selector));\n  }\n\n  private parseFiltersFromElement(element: Element): ExpertFilters {\n    const filters: ExpertFilters = {};\n    \n    // Parse filter attributes\n    const filterMap = {\n      'available': 'available',\n      'languages': 'languages', \n      'location': 'location',\n      'min-rate': 'minRate',\n      'max-rate': 'maxRate',\n      'sort': 'sortBy',\n      'limit': 'limit',\n      'offset': 'offset'\n    };\n\n    Object.entries(filterMap).forEach(([attr, filterKey]) => {\n      const value = this.getAttr(element, attr);\n      if (value != null) {\n        if (filterKey === 'available') {\n          (filters as any)[filterKey] = value === 'true';\n        } else if (filterKey === 'languages') {\n          (filters as any)[filterKey] = value.split(',').map(v => v.trim());\n        } else if (['minRate', 'maxRate', 'limit', 'offset'].includes(filterKey)) {\n          (filters as any)[filterKey] = parseInt(value);\n        } else {\n          (filters as any)[filterKey] = value;\n        }\n      }\n    });\n\n    // Ensure offset defaults to 0 if not specified\n    if (filters.offset === undefined) {\n      filters.offset = 0;\n    }\n\n    return filters;\n  }\n\n  private getControlValue(control: HTMLInputElement | HTMLSelectElement): any {\n    if (control instanceof HTMLInputElement) {\n      switch (control.type) {\n        case 'checkbox':\n          return control.checked;\n        case 'number':\n        case 'range':\n          return control.valueAsNumber;\n        default:\n          return control.value;\n      }\n    } else if (control instanceof HTMLSelectElement) {\n      if (control.multiple) {\n        return Array.from(control.selectedOptions).map(option => option.value);\n      }\n      return control.value;\n    }\n    return null;\n  }\n\n  private showLoading(container: Element, show: boolean): void {\n    const loadingElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.loading}]`);\n    if (loadingElement) {\n      const display = show ? 'block' : 'none';\n      (loadingElement as HTMLElement).style.setProperty('display', display, 'important');\n    }\n  }\n\n  private showError(container: Element, error: Error): void {\n    const errorElement = this.querySelector(container, `[${ATTR_PREFIX}${ATTRS.error}]`);\n    if (errorElement) {\n      errorElement.textContent = error.message;\n      (errorElement as HTMLElement).style.setProperty('display', 'block', 'important');\n    }\n    (container as HTMLElement).classList.add(this.config.errorClass);\n    this.log('Error displayed', error);\n  }\n\n  private dispatchEvent(target: Element | Document, eventName: string, detail: any): void {\n    const event = new CustomEvent(`contra:${eventName}`, { detail });\n    target.dispatchEvent(event);\n  }\n\n  private log(message: string, ...args: any[]): void {\n    if (this.config.debug) {\n      console.log(`[ContraWebflow] ${message}`, ...args);\n    }\n  }\n\n  private async getAvailableFilters(programId: string): Promise<any[]> {\n    const url = `https://contra.com/public-api/programs/${programId}/filters`;\n    this.log(`Fetching available filters for program: ${programId}`);\n    try {\n        const response = await fetch(url, {\n            headers: {\n                'X-API-Key': this.config.apiKey,\n                'Accept': 'application/json'\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Failed to fetch filters: ${response.statusText}`);\n        }\n        const data = await response.json();\n        this.log('Successfully fetched filters', data.data);\n        return data.data || [];\n    } catch (error) {\n        this.log('Error fetching available filters', error);\n        return [];\n    }\n  }\n  \n  private getFilterOptionLabel(filterKey: string, value: string): string {\n    const labels = this.filterOptionLabels[filterKey];\n    if (labels && labels[value]) {\n      return labels[value];\n    }\n    // Capitalize the first letter and lowercase the rest as a fallback\n    return value.charAt(0).toUpperCase() + value.slice(1).toLowerCase();\n  }\n\n  private populateAllFilterControls(programFilters: Map<string, any[]>): void {\n    this.log('Populating all filter controls on the page...');\n    const allControls = this.querySelectorAll(document.body, `[data-contra-filter]`);\n\n    allControls.forEach(control => {\n      const targetListId = control.getAttribute('data-contra-list-target');\n      if (!targetListId) return;\n\n      const targetList = this.querySelector(document.body, `[data-contra-list-id=\"${targetListId}\"]`);\n      if (!targetList) return;\n\n      const programId = this.getAttr(targetList, ATTRS.program);\n      if (!programId) return;\n\n      const filters = programFilters.get(programId);\n      if (!filters) return;\n\n      const filterKey = control.getAttribute('data-contra-filter');\n      const filterDef = filters.find(f => f.name === filterKey);\n\n      if (!filterDef) return;\n\n      // Handle number input ranges\n      if (filterDef.type === 'number' && control instanceof HTMLInputElement) {\n        if (filterDef.minimum !== undefined) control.min = String(filterDef.minimum);\n        if (filterDef.maximum !== undefined) control.max = String(filterDef.maximum);\n      }\n      \n      // Handle populating controls with options (select, datalist)\n      if (filterDef.options) {\n          if (control instanceof HTMLSelectElement) {\n              this.populateSelectControl(control, filterKey!, filterDef.options);\n          } else if (control instanceof HTMLInputElement && control.getAttribute('list')) {\n              this.populateDatalistControl(control, filterKey!, filterDef.options);\n          }\n      }\n    });\n  }\n\n  private populateSelectControl(control: HTMLSelectElement, filterKey: string, options: any[]): void {\n    this.log(`Populating options for filter '${filterKey}' on control`, control);\n    \n    const placeholder = control.firstElementChild?.cloneNode(true) as Element | null;\n    control.innerHTML = '';\n    if (placeholder && placeholder.getAttribute('value') === '') {\n      control.appendChild(placeholder);\n    }\n\n    options.forEach((option: any) => {\n      const optionElement = document.createElement('option');\n      const value = typeof option === 'object' && option.value !== undefined ? option.value : String(option);\n      \n      optionElement.value = value;\n\n      let label: string;\n      if (filterKey === 'locations') {\n        const labelMatch = value.match(/^(.*?)\\s*\\(/);\n        label = labelMatch ? labelMatch[1].trim() : value;\n      } else {\n        label = this.getFilterOptionLabel(filterKey!, value);\n      }\n      optionElement.textContent = label;\n      \n      if (filterKey === 'sortBy' && value === 'relevance') {\n        optionElement.selected = true;\n      }\n      control.appendChild(optionElement);\n    });\n  }\n\n  private populateDatalistControl(control: HTMLInputElement, filterKey: string, options: any[]): void {\n      const datalistId = control.getAttribute('list');\n      if (!datalistId) return;\n\n      const datalist = document.getElementById(datalistId);\n      if (!datalist) {\n          this.log(`Datalist with id '${datalistId}' not found for input control.`, control);\n          return;\n      }\n\n      this.log(`Populating datalist '#${datalistId}' for filter '${filterKey}'`);\n      datalist.innerHTML = ''; // Clear existing options\n\n      options.forEach((option: any) => {\n          const optionElement = document.createElement('option');\n          const value = typeof option === 'object' && option.value !== undefined ? option.value : String(option);\n          \n          let displayValue = value;\n          // For locations, we want a cleaner value for the user to select.\n          if (filterKey === 'locations') {\n              const labelMatch = value.match(/^(.*?)\\s*\\(/);\n              displayValue = labelMatch ? labelMatch[1].trim() : value;\n          }\n\n          optionElement.value = displayValue;\n          datalist.appendChild(optionElement);\n      });\n  }\n\n  private transformMediaUrl(url: string, mediaType: 'image' | 'video'): string {\n    if (!url || (!url.includes('cloudinary.com/') && !url.includes('media.contra.com/'))) {\n        return url;\n    }\n\n    const transformations = mediaType === 'image' \n        ? this.config.imageTransformations \n        : this.config.videoTransformations;\n\n    if (!transformations) {\n        return url;\n    }\n\n    let processedUrl = url;\n    if (mediaType === 'video' && url.toLowerCase().endsWith('.gif')) {\n        processedUrl = url.replace(/\\.gif$/i, '.mp4');\n        this.log(`Converting GIF to MP4: ${processedUrl}`);\n    }\n\n    const uploadMarker = '/upload/';\n    const parts = processedUrl.split(uploadMarker);\n\n    if (parts.length !== 2) {\n        this.log(`Could not apply transformations, URL format unexpected: ${processedUrl}`);\n        return processedUrl;\n    }\n    \n    const [baseUrl, path] = parts;\n    let pathComponents = path.split('/');\n    \n    const firstPathComponent = pathComponents[0];\n    const hasExistingTransformations = CLOUDINARY_TRANSFORM_PREFIXES.some(prefix => firstPathComponent.includes(prefix));\n\n    if (hasExistingTransformations) {\n        this.log(`Removing existing transformations from URL: ${processedUrl}`);\n        pathComponents.shift();\n    }\n\n    const cleanPath = pathComponents.join('/');\n    const finalUrl = `${baseUrl}${uploadMarker}${transformations}/${cleanPath}`;\n    \n    this.log(`Transformed ${mediaType} URL from \"${url}\" to \"${finalUrl}\"`);\n    return finalUrl;\n  }\n\n  private _stringifyFilters(filters: ExpertFilters): string {\n    return Object.entries(filters)\n      .filter(([, value]) => {\n        if (value === null || value === undefined) return false;\n        if (Array.isArray(value) && value.length === 0) return false; // Exclude empty arrays\n        if (typeof value === 'string' && value.trim() === '') return false; // Exclude empty strings\n        // Keep numbers (like 0) and booleans\n        return true;\n      })\n      .map(([key, value]) => {\n        const stringValue = Array.isArray(value) ? value.join(',') : String(value);\n        return `${key}:${stringValue}`;\n      })\n      .join('|');\n  }\n\n  private _appendContraAnalytics(url: string, listId: string): string {\n    if (!this.config.contraAnalytics || !url) {\n      return url;\n    }\n\n    try {\n      // Find the list element in the main document to ensure it's the rendered one\n      const listElement = document.querySelector(`[${ATTR_PREFIX}${ATTRS.listId}=\"${listId}\"]`);\n      if (!listElement) return url;\n\n      const programId = this.getAttr(listElement, ATTRS.program);\n      const state = this.state.getState(listId);\n      \n      // We want the *current* filters from the state, which is correct\n      const filters = state.filters;\n\n      const params = new URLSearchParams();\n      params.set('contra_source', 'webflow_sdk');\n      if (programId) params.set('contra_program_id', programId);\n      if (listId) params.set('contra_list_id', listId);\n      \n      const filterString = this._stringifyFilters(filters);\n      if (filterString) {\n        params.set('contra_filters', filterString);\n      }\n\n      // Check if the URL is valid before creating a URL object\n      if (!url.startsWith('http')) {\n        this.log('Cannot append analytics to a relative or invalid URL', { url });\n        return url;\n      }\n\n      const urlObject = new URL(url);\n      \n      params.forEach((value, key) => {\n        // Use set instead of append to avoid duplicate params if logic is ever re-run\n        urlObject.searchParams.set(key, value);\n      });\n\n      return urlObject.toString();\n\n    } catch (error) {\n      this.log('Failed to append Contra analytics to URL.', { url, error });\n      return url; // Return original URL on error\n    }\n  }\n}\n\n/**\n * Auto-initialize runtime when DOM is ready\n */\nfunction autoInit(): void {\n  const configElement = document.getElementById('contra-config');\n  if (!configElement) {\n    console.warn('[ContraWebflow] No config element found. Runtime not initialized.');\n    return;\n  }\n\n  try {\n    const config = JSON.parse(configElement.textContent || '{}');\n    \n    // Validate required config\n    if (!config.apiKey) {\n      console.error('[ContraWebflow] API key is required in config.');\n      return;\n    }\n    \n    const initializeRuntime = () => {\n    const runtime = new ContraWebflowRuntime(config);\n    \n    // Expose runtime globally for debugging\n    (window as any).contraRuntime = runtime;\n    \n    runtime.init().catch(error => {\n      console.error('[ContraWebflow] Runtime initialization failed:', error);\n    });\n    };\n    \n    // Use setTimeout to ensure DOM is fully ready\n    setTimeout(initializeRuntime, 100);\n    \n  } catch (error) {\n    console.error('[ContraWebflow] Failed to parse config:', error);\n  }\n}\n\n// Auto-initialize when DOM is ready with multiple fallbacks\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', autoInit);\n} else if (document.readyState === 'interactive') {\n  // DOM is ready but resources might still be loading\n  setTimeout(autoInit, 50);\n} else {\n  // DOM and resources are ready\n  autoInit();\n}\n\n// Export runtime class for manual initialization\nexport { ContraWebflowRuntime as default }; "],"mappings":"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","names":[]}